#!/bin/sh

#############################################################################################################
# Name   	: nsi_db_get_pagedump_data
#
# Author 	: Ambuj Singh
#
# Description 	: This query extracts records from pagedumprecord table in test run and show 
#		  appropriate data in page dump screen.
#
# Usage 	: nsi_db_get_pagedump_data --testrun 12345 --session_status -2 --page_status -2 --limit 22 
#############################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

# Set default values of variables
TRNUM=""
LIMIT=""
OFFSET=""
SCRIPT=""
PAGE=""
GET_COUNT=0

DEBUG=0 # 0 --> off
        # 1 --> on

########################################################################
#                       Functions's Definitions
#######################################################################
debug_logs()
{
  if [ "X$DEBUG" != "X0" ];then
    echo "$*"
  fi
}

usage()
{
  echo "$*"
  echo  "$0 --testrun <value> --page_status <value> --session_status <value> --starttime <value> --endtime <value> --userindex<value> --session_instance <value> --child <value>" 
  echo ""
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --page_status is the page status, which is mandatory argument."
  echo "  --session_status is the page status, which is mandatory argument."
  echo "  --limit is for limit (This is the number of results returned by query statment (e.g. 10 it will show first 10 records)), which is optional argument"
  echo " --offset is for offset (This is used to skip rows as specified by offset (e.g suppose you wanted to show results 11-20 then you can use offset 10)), which is optional argument"
  echo "  --script is for selecting particular script result, which is optional argument"
  echo "  --page is for selecting particular page result, which is optional argument"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, which is optional argument."
  tput bold
  echo "  --userindex , --session_instance, --child are optional argument"
  echo "  <<userid = childindex : userindex>> So for selecting userid pass --userindex and --child"
  echo "  <<sessioninstance = childindex : sessioninstance>> So for selecting userid pass --session_instance, and --child"
  tput sgr0
  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
  fi
  if [ "X$PAGE_STATUS" == "X" ]; then
    usage "Page status argument is missing"
  fi
  if [ "X$SESSION_STATUS" == "X" ]; then
    usage "Session status argument is missing"
  fi
}

add_inn_where()
{
  if [ "X$INN_WHERE" == "X" ]; then
    INN_WHERE="WHERE $NEWLINE   "
  else
    INN_WHERE="$INN_WHERE $NEWLINE   AND "
  fi
}
########################################################################
#                            calling functions
########################################################################


chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    echo "Option $1 required a value."
    usage
    exit -1
  fi
}

#args: TR-NUM child-id user-id wan-env
if [ "X$1" == "X" ];then
  usage
fi

while [ "$1" != "" ];do
  debug_logs "ARGS=$1"
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--script")
        shift
        chk_args_of_option "--script" "$1"
        SCRIPT=$1;;
    "--scriptidx")
        shift
        chk_args_of_option "--scriptidx" "$1"
        SCRIPT_IDX=$1;;
    "--sessionidx")
        shift
        chk_args_of_option "--sessionidx" "$1"
        SCRIPT_IDX=$1;;
    "--page")
        shift
        chk_args_of_option "--page" "$1"
        PAGE=$1;;
    "--pageidx")
        shift
        chk_args_of_option "--pageidx" "$1"
        PAGE_IDX=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--abs_starttime")
        shift
        chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--abs_endtime")
        shift
        chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    "--page_status")
        shift
        chk_args_of_option "--page_status" "$1"
        PAGE_STATUS=$1;;
    "--session_status")
        shift
        chk_args_of_option "--session_status" "$1"
        SESSION_STATUS=$1;;
    "--get_count")
        shift
        chk_args_of_option "--get_count" "$1"
        GET_COUNT=$1;;
    "--generatorid")
        shift
        chk_args_of_option "--generatorid" "$1"
        GENERATORID=$1;;
    "--child")
        shift
        chk_args_of_option "--child" "$1"
        CHILD=$1;;
    "--userindex")
        shift
        chk_args_of_option "--userindex" "$1"
        USERIDX=$1;;
    "--session_instance")
        shift
        chk_args_of_option "--session_instance" "$1"
        SESSION_INSTANCE=$1;;
    "--param_filter")
        shift
        chk_args_of_option "--param_filter" "$1"
        PARAM_FILTER=$1;;
    "--fpinstance")
        shift
        chk_args_of_option "--fpinstance" "$1"
        FPI=$1;;
    --*) usage "Invalid options";;
    *) usage ;;
  esac
  shift
done

debug_logs "TRNUM = $TRNUM, LIMIT=$LIMIT"

#checking the version and build for setting timestamp in MS
set_testrun_version_and_build $TRNUM
if [ \( $VERSION -lt 414 \) -o \( $VERSION -eq 414 -a $BUILD -le 20 \) ]; then
  $0_old_tr $ALL_ARG
  exit 0
fi

handle_time_filters_in_ms $TRNUM

#Cheking mantatory arguments
#chk_args
set_query_files $TRNUM

# Check if limit argument is given or not. It will limit number of rows to max this number
if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

# Check if Offset argument is given or not. This is used to skip rows as specified by offset.
# For example, if offset is 1, then first row is skipped. If offset is 100, then first 100 rows are skipped
if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi


#Session Name|User Location|User Access|Child Index|Session ID|Start Time|Total Time|Status
# We are adding distinct because we page are in a loop in the session and when we
# join with session record we get multiple records.
#

  # showing retlative start time from NS start in milli-seconds.
  INN_SELECT="SELECT $NEWLINE    (PageDumpRecord_$TRNUM.StartTime - $TEST_START_RELATIVE_SINCE_CAV_EPOCH) AS \"Start Time\","

  #START_TIMESTAMP_RELATIVE_TO_UNIX_EPOCH=`expr $START_TIMESTAMP_RELATIVE_TO_UNIX_EPOCH \* 1000`
  INN_SELECT="$INN_SELECT $NEWLINE    (PageDumpRecord_$TRNUM.StartTime + $CAV_EPOCH_TIME) AS \"Absolute Start Time\","

  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.ChildIdx,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.UserIndex,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.GroupNum,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.PageStatus,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.PageIndex,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.PageInstance,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.SessionIndex,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.SessionInstance,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.Partition,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.TraceLevel,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.FlowName,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.Parameters,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.PageInstance as \"Page Instance\","
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.SessionIndex as \"Session Index\","
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.GeneratorId as \"Generator Index\","
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.LogFileNameSfx,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.RespBodyOrigName,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.PageRespTime,"
  INN_SELECT="$INN_SELECT $NEWLINE    PageDumpRecord_$TRNUM.ErrorCodesMsg,"
  INN_SELECT="$INN_SELECT $NEWLINE    (CASE WHEN Status IS NULL THEN -1 ELSE Status END),"
  INN_SELECT="$INN_SELECT $NEWLINE    (CASE WHEN ErrorName IS NULL THEN 'Unknown' ELSE ErrorName END)"

  INN_FROM="FROM $NEWLINE    SessionRecord_$TRNUM, PageDumpRecord_$TRNUM, ErrorCodes_$TRNUM"
  INN_WHERE="WHERE $NEWLINE        PageDumpRecord_$TRNUM.SessionInstance = SessionRecord_$TRNUM.SessionInstance"
  INN_WHERE="$INN_WHERE $NEWLINE        AND PageDumpRecord_$TRNUM.ChildIdx = SessionRecord_$TRNUM.ChildIndex"
  INN_WHERE="$INN_WHERE $NEWLINE        AND PageDumpRecord_$TRNUM.UserIndex = SessionRecord_$TRNUM.UserIndex"
  INN_WHERE="$INN_WHERE $NEWLINE        AND PageDumpRecord_$TRNUM.GeneratorId = SessionRecord_$TRNUM.GeneratorId"
  INN_WHERE="$INN_WHERE $NEWLINE        AND ErrorCodes_$TRNUM.ErrorCode = Status"
  INN_WHERE="$INN_WHERE $NEWLINE        AND ErrorCodes_$TRNUM.ObjectType = 3"


#ORDER BY PageDumpRecord_$TRNUM.ChildIdx, PageDumpRecord_$TRNUM.UserIndex, PageDumpRecord_$TRNUM.SessionIndex, PageDumpRecord_$TRNUM.SessionInstance, PageDumpRecord_$TRNUM.PageIndex
  INN_ORDER="  ORDER BY $NEWLINE  	PageDumpRecord_$TRNUM.ChildIdx"
  INN_ORDER="$INN_ORDER, $NEWLINE	PageDumpRecord_$TRNUM.UserIndex"
  INN_ORDER="$INN_ORDER, $NEWLINE       PageDumpRecord_$TRNUM.SessionIndex"
  INN_ORDER="$INN_ORDER, $NEWLINE	PageDumpRecord_$TRNUM.SessionInstance"
  INN_ORDER="$INN_ORDER, $NEWLINE	PageDumpRecord_$TRNUM.PageIndex"

  SELECT="SELECT $NEWLINE  \"Start Time\","
  SELECT="$SELECT $NEWLINE  \"Absolute Start Time\","

  SELECT="$SELECT $NEWLINE  ARRAY_TO_STRING(ARRAY[INN.childidx, INN.sessioninstance], ':') AS \"Session Instance\","
  SELECT="$SELECT $NEWLINE  ARRAY_TO_STRING(ARRAY[INN.childidx, INN.userindex], ':') AS \"User ID\","

  SELECT="$SELECT $NEWLINE  RunProfile_$TRNUM.groupname As \"Group\","
  SELECT="$SELECT $NEWLINE  SessionTable_$TRNUM.SessionName AS \"Script Name\","
  SELECT="$SELECT $NEWLINE  PageTable_$TRNUM.PageName AS \"Page Name\","

  SELECT="$SELECT $NEWLINE  INN.respbodyorigname AS \"PageDumpURL\","

  SELECT="$SELECT $NEWLINE  Page_Inn.ErrorName AS \"Page Status\","

  SELECT="$SELECT $NEWLINE  INN.errorname AS \"Session Status\","
  SELECT="$SELECT $NEWLINE  INN.partition AS \"Partition Number\","
  SELECT="$SELECT $NEWLINE  INN.tracelevel AS \"Trace Level\","
  SELECT="$SELECT $NEWLINE  INN.flowname AS \"Flow Name\","
  SELECT="$SELECT $NEWLINE  INN.parameters AS \"Parameter Substitution\","
  SELECT="$SELECT $NEWLINE  \"Page Instance\","
  SELECT="$SELECT $NEWLINE  \"Session Index\","
  SELECT="$SELECT $NEWLINE  \"Generator Index\","

  SELECT="$SELECT $NEWLINE  RunProfile_$TRNUM.groupnum As \"Group Number\","

  SELECT="$SELECT $NEWLINE  INN.logfilenamesfx AS \"Log File Suffix\","
  SELECT="$SELECT $NEWLINE  INN.pageresptime AS \"Page Response Time\","
  SELECT="$SELECT $NEWLINE  INN.ErrorCodesMsg AS \"Error Codes Message\""

  FROM="FROM $NEWLINE  RunProfile_$TRNUM, PageTable_$TRNUM, SessionTable_$TRNUM"
  #SESSIONRECORD_TABLE_FLAG=1

  FROM="$FROM, $NEWLINE  ( SELECT ErrorCodes_$TRNUM.ErrorName, ErrorCodes_$TRNUM.ErrorCode FROM ErrorCodes_$TRNUM WHERE ObjectType = 1 $NEWLINE  ) AS Page_Inn"


  #######################################################################################################################

  WHERE="WHERE $NEWLINE  INN.groupnum = RunProfile_$TRNUM.GroupNum"
  WHERE="$WHERE $NEWLINE  AND INN.sessionindex = SessionTable_$TRNUM.SessionIndex"
  WHERE="$WHERE $NEWLINE  AND INN.pageindex = PageTable_$TRNUM.PageIndex"
  WHERE="$WHERE $NEWLINE  AND INN.pagestatus = Page_Inn.ErrorCode"

  if [ "X$FPI" != "X" ];then
    FROM="$FROM , URLRecord_$TRNUM"
    if [ "X$WHERE" != "X" ]; then
      WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.FlowPathInstance = $FPI"
    else
      WHERE="WHERE URLRecord_$TRNUM.FlowPathInstance = $FPI"
    fi
    WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.PageInstance = INN.PageInstance"
    WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.SessionInstance = INN.SessionInstance"
    WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.ChildIndex = INN.ChildIdx"
    WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.PageIndex = PageTable_$TRNUM.PageIndex"
    WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.SessionIndex = SessionTable_$TRNUM.SessionIndex"
    WHERE="$WHERE $NEWLINE AND URLRecord_$TRNUM.Status = Page_Inn.ErrorCode"
  fi

  ORDER="ORDER BY $NEWLINE  \"Generator Index\""
  ORDER="$ORDER, $NEWLINE  INN.childidx"
  ORDER="$ORDER, $NEWLINE  INN.userindex"
  ORDER="$ORDER, $NEWLINE  INN.sessioninstance"
  ORDER="$ORDER, $NEWLINE  \"Page Instance\""

  #ORDER=""
#Add Script selection
if [ "X$SCRIPT" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND SessionTable_$TRNUM.SessionName = ""'"$SCRIPT"'"
fi

if [ "X$SCRIPT_IDX" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND SessionTable_$TRNUM.SessionIndex = $SCRIPT_IDX"
  INN_WHERE="$INN_WHERE AND PageDumpRecord_$TRNUM.SessionIndex = $SCRIPT_IDX"
fi

#Add page selection
if [ "X$PAGE" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND PageTable_$TRNUM.PageName = ""'"$PAGE"'"
fi

if [ "X$PAGE_IDX" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND PageTable_$TRNUM.PageIndex = $PAGE_IDX"
  INN_WHERE="$INN_WHERE AND PageDumpRecord_$TRNUM.PageIndex = $PAGE_IDX"
fi

# match starttime and endtimeswith tables
if [ "X$STARTTIME" != "X" -o "X$ENDTIME" != "X" -o "X$ABS_STARTTIME" != "X" -o "X$ABS_ENDTIME" != "X" ]; then
  if [ "X$STARTTIME" != "X" ];then
    add_inn_where
    INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.EndTime >= $STARTTIME"
  fi
  if [ "X$ENDTIME" != "X" ];then
    add_inn_where
    INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.EndTime <= $ENDTIME"
  fi

  if [ "X$ABS_STARTTIME" != "X" ];then
    add_inn_where
    INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi
  if [ "X$ABS_ENDTIME" != "X" ];then
    add_inn_where
    INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.EndTime <= $ABS_ENDTIME"
  fi
fi

# applying generator filter
if [ "X$GENERATORID" != "X" ]; then
  add_inn_where
  INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.GeneratorId = $GENERATORID"
fi

if [ "X$CHILD" != "X" ]; then
  add_inn_where
  INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.ChildIdx = $CHILD"
fi

if [ "X$USERIDX" != "X" ]; then
  add_inn_where
  INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.userindex = $USERIDX"
fi

if [ "X$SESSION_INSTANCE" != "X" ]; then
  add_inn_where
  INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.SessionInstance = $SESSION_INSTANCE"
fi
if [ "X$PARAM_FILTER" != "X" ]; then
  add_inn_where
  INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.Parameters LIKE '%$PARAM_FILTER%'"
fi

# -2 -> All pass
# -1 -> All Fail
if [ "X$PAGE_STATUS" != "X" ]; then
  if [ "X$PAGE_STATUS" == "X-1" ]; then
    add_inn_where
    INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.PageStatus != 0"
  elif [ "X$PAGE_STATUS" != "X-2" ]; then
    add_inn_where
    INN_WHERE="$INN_WHERE PageDumpRecord_$TRNUM.PageStatus IN ($PAGE_STATUS)"
  fi
fi

if [ "X$SESSION_STATUS" != "X" ]; then
  if [ "X$SESSION_STATUS" == "X-1" ]; then
    WHERE="$WHERE $NEWLINE  AND INN.status != 0"
  elif [ "X$SESSION_STATUS" != "X-2" ]; then
    WHERE="$WHERE $NEWLINE  AND INN.status IN ($SESSION_STATUS)"
  fi
fi

###############################################################################################################################
# Making the whole query
###############################################################################################################################

FROM="$FROM, $NEWLINE  ($NEWLINE   $INN_SELECT $NEWLINE   $INN_FROM $NEWLINE   $INN_WHERE$NEWLINE $INN_ORDER $LIMIT $OFFSET) AS INN"
LIMIT=
OFFSET=

#log_query
if [ $GET_COUNT -eq 0 ];then
  ns_run_query
else
 #FROM="FROM ($SELECT $FROM $WHERE $ORDER ) As \"Total \" "
 SELECT="SELECT Count(*) As \"Rows \" $NEWLINE FROM ( $NEWLINE $INN_SELECT $NEWLINE   $INN_FROM $NEWLINE   $INN_WHERE$NEWLINE"
 FROM=""
 WHERE=""
 if [ "X$SESSION_STATUS" == "X-1" ]; then
   OFFSET="$OFFSET $NEWLINE AND status != 0 ) As \"Total\" "
 elif [ "X$SESSION_STATUS" == "X" -o "X$SESSION_STATUS" == "X-2" ]; then
   OFFSET="$OFFSET $NEWLINE  ) As \"Total \" "
 else
   OFFSET="$OFFSET $NEWLINE AND status IN ($SESSION_STATUS)) As \"Total\""
 fi

 ORDER=""
 ns_run_query
fi
show_query_result_comma_sep

exit 0
