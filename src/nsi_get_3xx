#!/bin/bash

if [ $# -lt 4 -o $# -gt 7 ];then
	echo "Usage: nsi_get_3xx TR-NUM select-fields obj-type group-by [limit] [offset]"
	echo "run-time-flag is 1 for run-time phase only, otherwise 0"
        echo " Limit: This is the number of results returned by query statment (e.g. 10 it will show first 10 records)"
        echo " Offset: This is used to skip rows as specified by offset (e.g suppose you wanted to show results 11-20 then you can use offset 10)"
	exit 1
fi

NUM_ARG=$#
TRNUM=$1

if [ "XX" == "XX$NS_WDIR" ]
then
  NS_WDIR=/home/cavisson/work
fi

. $NS_WDIR/bin/nsi_db_utils
set_query_files $TRNUM


#To exclude failed records. URLs are always excluded, aggrgates are excluded
#based on config
if [ -f $NS_WDIR/logs/TR$1/exclude_failed_aggregate ];then
	EXCLUDE=1
else
	EXCLUDE=0
fi

if [ $# -eq 4 ];then
	RPO=0
else
	RPO=$5
fi

#Check if limit argument is given or not. It will limit number of rows to max this number
LIMIT=""
if [ $NUM_ARG -gt 5 ];then
  LIMIT="LIMIT $6"
fi

# Check if Offset argument is given or not. This is used to skip rows as specified by offset.
# For example, if offset is 1, then first row is skipped. If offset is 100, then first 100 rows are skipped
OFFSET=""
if [ $NUM_ARG -gt 6 ];then
  OFFSET="OFFSET $7"
fi
#args: TR-NUM select-fields obj-type group-by
#select-fields is anded fields with
#	1: Tries
#	2: Fail
#	4: success
#	8: Fail Pct
#	16: min
#	32: avg
#	64: max
#	128: median
#	256: 80%
#	512: 90%
#	1024: 95%
#	2048: 99%
#obj-type can be 0: URL, 1:Page: 2: Tx 3:Sess
#group-by: is ANDED field (0 allowed)
#	1: By Location
#	2: By Access


SELECT="SELECT 'All'"
SELECT=$SELECT' As "All"'

#Add obj name
if [ $3 -eq 0 ];then
    EXCLUDE=1
    OBJ="UrlRecord_$1"
    FROM="FROM  URLRecord_$1"
    if [ $4 -ne 0 -o $RPO -eq 1 ];then
	WHERE="WHERE $OBJ.SessionInstance = SessionRecord_$1.SessionInstance
      	AND $OBJ.ChildIndex = SessionRecord_$1.ChildIndex "
	FROM="$FROM, SessionRecord_$1"
    fi
elif [ $3 -eq 1 ];then
    OBJ="PageRecord_$1"
    FROM="FROM  PageRecord_$1"
    WHERE="WHERE PageRecord_$1.EndTime <> 0"
    if [ $4 -ne 0 -o $RPO -eq 1 ];then
	WHERE="$WHERE AND $OBJ.SessionInstance = SessionRecord_$1.SessionInstance
      	AND $OBJ.ChildIndex = SessionRecord_$1.ChildIndex "
	FROM="$FROM, SessionRecord_$1"
    fi
elif [ $3 -eq 2 ];then
    OBJ="TransactionRecord_$1"
#    SELECT="$SELECT TransactionName"
#    FROM="FROM TransactionRecord_$1, TransactionTable_$1"
    FROM="FROM TransactionRecord_$1"
    WHERE="WHERE TransactionRecord_$1.EndTime <> 0"
    if [ $4 -ne 0 -o $RPO -eq 1 ];then
	WHERE="$WHERE AND $OBJ.SessionInstance = SessionRecord_$1.SessionInstance
      	AND $OBJ.ChildIndex = SessionRecord_$1.ChildIndex "
	FROM="$FROM, SessionRecord_$1"
    fi
elif [ $3 -eq 3 ];then
    OBJ="SessionRecord_$1"
#    SELECT="$SELECT SessionName"
    FROM="FROM  SessionRecord_$1"
    WHERE="WHERE SessionRecord_$1.EndTime <> 0"
else
    echo "Invalid object-type (valid values 0-3)"
    exit 1
fi

if [ $RPO -eq 1 ];then
	WHERE="$WHERE AND isRunPhase = true"
fi
#echo "Select is $SELECT"

#Add User Types
if [ $4 -eq 1 ];then
	SELECT="$SELECT, Location AS \"User Location\""
	GROUP="GROUP BY Location"
	ORDER="ORDER BY Location"
elif [ $4 -eq 2 ];then
	SELECT="$SELECT, Access AS \"User Access\""
	GROUP="GROUP BY Access"
	ORDER="ORDER BY Access"
elif [ $4 -eq 3 ];then
	SELECT="$SELECT, Location AS \"User Location\", Access AS \"User Access\""
	GROUP="GROUP BY Location, Access"
	ORDER="ORDER BY Location, Access"
fi

#echo "Select2 is $SELECT"

if [ $EXCLUDE -eq 1 ];then
    VALUE="CASE WHEN $OBJ.Status != 0 THEN NULL ELSE ($OBJ.EndTime-$OBJ.StartTime) END"
else
    VALUE="$OBJ.EndTime-$OBJ.StartTime"
fi


#Add select elements
if [ $(($2 & 1)) -ne 0 ];then
    SELECT="$SELECT, count(*) AS \"Tried\""
fi
if [ $(($2 & 2)) -ne 0 ];then
    SELECT="$SELECT, count(nullif($OBJ.Status, 0)) AS \"Fail\""
fi
if [ $(($2 & 4)) -ne 0 ];then
        SELECT="$SELECT, count(*)-count(nullif($OBJ.Status, 0)) AS \"Success\""
fi
if [ $(($2 & 8)) -ne 0 ];then
        SELECT="$SELECT, CASE WHEN count(*) > 0 THEN (count(nullif($OBJ.Status, 0))*100/count(*)) ELSE 0 END AS \"FailPct\""
fi
if [ $(($2 & 16)) -ne 0 ];then
    SELECT="$SELECT, min($VALUE) AS \"Min\""
fi
if [ $(($2 & 32)) -ne 0 ];then
    SELECT="$SELECT, round(avg($VALUE)) AS \"Average\""
fi
if [ $(($2 & 64)) -ne 0 ];then
    SELECT="$SELECT, max($VALUE) AS \"Max\""
fi
if [ $(($2 & 128)) -ne 0 ];then
    SELECT="$SELECT, median_percentile($VALUE) AS \"Median\""
fi
if [ $(($2 & 256)) -ne 0 ];then
    SELECT="$SELECT, eighty_percentile($VALUE) AS \"80%\""
fi
if [ $(($2 & 512)) -ne 0 ];then
    SELECT="$SELECT, ninety_percentile($VALUE) AS \"90%\""
fi
if [ $(($2 & 1024)) -ne 0 ];then
    SELECT="$SELECT, ninety_five_percentile($VALUE) AS \"95%\""
fi
if [ $(($2 & 2048)) -ne 0 ];then
    SELECT="$SELECT, ninety_nine_percentile($VALUE) AS \"99%\""
fi

log_query
run_ns_query
show_query_result
exit 0
