#!/bin/bash
#######################################################################################################
# Name   : nsi_db_get_user_profile_data
# Syntax : nsi_db_get_user_profile_data --testrun <value> [--type <name>]
#
#   Author : Ankit Agarwal, Abhishek Mittal
#   Date :   25 June 2012
#   Purpose : This shell will create nsi_db_user_profile_data.dat (for the given test run) if it do not exist,if type     #             argument is given it will display only type specific portion of file else it will display the whole file 
# Note: here bracket [] show agrument is optional, and bracket <> show argument value
# Example : nsi_db_get_user_profile_data --testrun 11642 --type location
#
#
#########################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

#Set default values of variables
TRNUM=""
SELECT=""
FROM=""
WHERE=""
GROUP=""
FILE_CACHED="nsi_db_user_profile.dat"
TYPE=""

########################################################################
#                       Functions's Definitions
#######################################################################

#Function for displaying usage
usage()
{
  echo "$*"
  echo "Usage:"
  echo "$0 --testrun <value> [--type <name>] "
  echo ""
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --type is for displaying specific portion(location,access,browser) of nsi_db_user_profile_data.dat                          e.g --type location for displaying location data of file. if not specified all location,access,browser data is            displayed,which is optional argument"
  exit 1
}

#Function for checking mandatory arguments
check_arg()
{
   if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
   fi
}

#For showing Output
show_op()
{
OP_FILE=$1
#Parsing TYPE argument
if [ "X$TYPE" != "X" ];then
   case $TYPE in
     location)cat $OP_FILE |grep -v ACCESS| grep -v BROWSER;; 
     access)cat $OP_FILE |grep -v LOCATION| grep -v BROWSER;;
     browser)cat $OP_FILE |grep -v ACCESS| grep -v LOCATION;;
     *)usage "Invalid type";;
   esac
else
  cat  $OP_FILE
fi
}

#Function for executing query 
exec_query()
{
ns_run_query
sed '$d' $QUERY_OUT_FILE | grep -v "row)" | grep -v "rows)" | grep -v ^$ | sed '2,$s/ //g' >> /tmp/tmp1
}

########################################################################
#                            calling functions
########################################################################

#Parsing the arguments
if [ "X$*" = "X" ];then
usage 
fi
init $*
RUNNING=$?
#RET value 0 -if file already cached and test is not running, 1- if file not cached and test is not running ,              2- if test is running
if [ $RUNNING -ne 2 ];then
 check_cached "$FILE_CACHED"
 RET=$?
else
 RET=2
fi
 

#Checking mendatory arguments
check_arg


#Setting query files
set_query_files $TRNUM




#Running query if nsi_db_user_profile_data.dat do not exist or test is running  
if [ $RET -eq 1 -o $RET -eq 2 ]; then
 
  >/tmp/tmp1 
  #Query for Location
  SELECT="SELECT Userprofile_$TRNUM.Uptype As \"Type\",Userprofile_$TRNUM.ValueIndex As \"Index\",
               	 SessionRecord_$TRNUM.location As \"Name\""
  FROM="FROM Userprofile_$TRNUM,SessionRecord_$TRNUM" 
  WHERE="WHERE Uptype='LOCATION' AND SessionRecord_$TRNUM.location=Userprofile_$TRNUM.value" 
  GROUP="GROUP BY \"Type\",\"Index\",\"Name\""
  ORDER="ORDER BY  SessionRecord_$TRNUM.location"
  exec_query        
 
  #Query for Access
  SELECT="SELECT Userprofile_$TRNUM.Uptype As \"Type\",Userprofile_$TRNUM.ValueIndex As \"Index\",
      		 SessionRecord_$TRNUM.access As \"Name\""
  FROM="FROM Userprofile_$TRNUM,SessionRecord_$TRNUM"
  WHERE="WHERE Uptype='ACCESS' AND SessionRecord_$TRNUM.access=Userprofile_$TRNUM.value"
  GROUP="GROUP BY \"Type\",\"Index\",\"Name\"" 
  ORDER="ORDER BY  SessionRecord_$TRNUM.access"
  exec_query 
	
  #Query for Browser
  SELECT="SELECT Userprofile_$TRNUM.Uptype As \"Type\",Userprofile_$TRNUM.ValueIndex As \"Index\",
                 SessionRecord_$TRNUM.browser As \"Name\""
  FROM="FROM Userprofile_$TRNUM,SessionRecord_$TRNUM"
  WHERE="WHERE Uptype='BROWSER' AND SessionRecord_$TRNUM.Browser=Userprofile_$TRNUM.value"
  GROUP="GROUP BY \"Type\",\"Index\",\"Name\""
  ORDER="ORDER BY SessionRecord_$TRNUM.Browser"
  exec_query

  cat /tmp/tmp1 | sed -e '1p' -e '/Type/d' > /tmp/tmp2 
  cat /tmp/tmp2 > $QUERY_OUT_FILE
  rm /tmp/tmp2 
  rm /tmp/tmp1
  #Showing Output of query
  show_op $QUERY_OUT_FILE 
# Save file if test is not running
  if [ $RET -eq 1 ];then  
    cat $QUERY_OUT_FILE > $DBQ_CACHE_DIR/$FILE_CACHED
  fi
  remove_files
#Show Only File Contents if query is already cached
elif [ $RET -eq 0 ];then
  show_op $DBQ_CACHE_DIR/$FILE_CACHED
fi

exit 0
