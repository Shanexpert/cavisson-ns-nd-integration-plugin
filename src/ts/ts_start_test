#!/bin/sh
#
# Name: ts_start_test
# Author: Shalu Panwar 
# Purpsose: To start ts_run from Test SuiteGUI 
#

# Exit Values: 
#  0 - Start Sucessful
#  -1 - Usage Error
#  -2 - Test Suite do not exist
#  -3 - Already Running
#  -1 - Start failed
# Modification History:
#   01/04/13: Shalu - Initial Version
#   18/03/21: Anup Singh - added -w option to support Multiple User Bassed Wokspace
# 

WORKSPACE_PROFILE=""

error_log()
{
 echo "TS-ERROR:"$*
}

#Check if user is a registered 'Active' netstorm user
USER_NAME=`whoami 2>/dev/null`
if [ $? != 0 ];then
  error_log "Unable to get the real user name"
  exit 1
fi

nsu_check_user $USER_NAME $0
if [ $? != 0 ];then
  exit 1
fi

TS_SHELL="bin/ts_run"

if [ "XX" = "XX$NS_WDIR" ]
then
  NS_WDIR=/home/cavisson/work
fi

display_help_and_exit()
{
  echo "ERROR: Incorrect usage"
  echo "Usage:"
  echo "ts_start_test -n <[Project]/[Subproject]/TestSuite> ] [-l] [-D] [-S <cli or guiFg>] -u <GUI user> -r <role> -w <workspace>/<profile> [-K <additional keywords>]"
  echo "  Where: -l is used to run scenario in master mode (controller mode)"
  echo "         -S is used to give invoke test with gui"
  echo "         -D is used to run netstorm with debug log"
  echo "         -n is used to specify test suite name (without .conf extension)"
  echo "         -C is used to read nsi_check_tr_using_profile"
  echo "         -t is used to run a particular testscase only" 
  echo "         -w : To provide <workspace>/<profile>. Default values will be used in not provided"
  echo "         -K : To provide additional keywords to be passed to nsu_start_test"

  echo "  For example, "
  echo "    bin/ts_run -n default/default/sample1 -u cavisson -r admin -w <workspace_name>/<profile_name>"
  exit 1
}

echo "XXX $@ XXX" | grep "\-n" 2>/dev/null 1>&2
if [ $? != 0 ]; then
    display_help_and_exit
fi

INVOKER="cli"
MASTER_ARG=""
TSFileName=""
IS_DEBUG=""
IP_ADDR=""
GUI_USER=""
ROLE=""
TESTCASE="";
ADDITIONAL_KW="NA"

while getopts lDi:n:S:c:u:r:C:t:w:K: c
do
    case $c in
    l) MASTER_ARG=-l ;;
    D) IS_DEBUG="-D"  ;;
    S) INVOKER=$OPTARG ;;
    n) TESTSUITE=$OPTARG ;;
    c) CTRLOPT=$OPTARG ;;  #Bug-34392
    i) IP_ADDR="-i "$OPTARG ;;
    u) GUI_USER="-u "$OPTARG  ;;
    r) ROLE="-r "$OPTARG  ;;
    C) READ_PROFILE="-C "$OPTARG  ;;
    t) TESTCASE="-t "$OPTARG ;;
    w) WORKSPACE_PROFILE="-w "$OPTARG ;;
    K) ADDITIONAL_KW="-K $OPTARG" ;;
    ?) Usage ;;
  esac
done


ARGS="$MASTER_ARG $IS_DEBUG -n $TESTSUITE -S $INVOKER $IP_ADDR $GUI_USER $ROLE $READ_PROFILE $TESTCASE ${WORKSPACE_PROFILE} $ADDITIONAL_KW"

debug_log()
{
  if [ "XX$IS_DEBUG" == "XX" ];then
    return
  fi
  echo $*
}


clean_on_error()
{
  error_log ""
  error_log "Error in starting Test Suite. Please fix errors and try again."
  error_log "Following is the error output of the Test Suite:"
  cat $TestSuiteLogFile
}

get_tsrun_pid()
{
  # Get self pid
  TS_START_TEST_PID=$$

  debug_log "TS_START_TEST_PID = $TS_START_TEST_PID"

  # Find ts_run pid as child of self pid
  #Allow some time for ts_run process to start
  i=1
  while [ $i != 10 ]
  do
    TS_RUN_PID=""
    # Since this will return two child (ts_run and ps command itself)
    # we need to grep using scenario file name
    TS_RUN_PID=`ps --ppid $TS_START_TEST_PID -o 'pid args' |grep -v PID | grep $TS_SHELL | awk '{print $1}'`
    debug_log "TS_RUN_PID = {$TS_RUN_PID}"

    #Sometimes the above command status is 0 but the TS_RUN_PID is NULL 
    #so sleep is introduced if TS_RUN_PID is NULL
    if [ "XX$TS_RUN_PID" == "XX" ];then
      debug_log "get_tsrun_pid - No pid found, sleeping for $i second"
      sleep 1
      let i=i+1
      continue 
    fi

    debug_log "TS_RUN_PID is $TS_RUN_PID "
    break
  done

  if [ "XX$TS_RUN_PID" == "XX" ]
  then
    error_log "Error in getting the ts_run pid"
    exit -1
  fi
}

get_test_cycle_using_pid()
{
  # Find test run from instance files using nestorm pid

  #Give some time so that netstorm creates instance files
  sleep 1
  i=1
  while [ $i != 10 ]
  do
    OUT=/tmp/ts_start_test.$TS_RUN_PID
    #Here while listing instance files we are using -t option which help in sorting by modification time 
    #and current test comes first.
    #ls -td $NS_WDIR/.tmp_ts/$USER_NAME/ts_inst* >$OUT 2>/dev/null #dont want to show anything on screen
    ls $OUT 2>/dev/null 
    #If the ns-inst directory is not present then sleep and continue till the directory is not created
    if [ ! -f $OUT ];then
      sleep 1
      debug_log "get_test_cycle_using_pid() - No instances found. Sleeping to get ns-inst directory in OUT for $i second"
      let i=i+1
      continue
    fi

    for inst in `cat $OUT`
    do
      debug_log "Checking instance $inst"
      #Bug4614,
      #While getting tid and pid from directory ns-inst, one of the possibility is not finding  
      #netstorm.pid and netstorm.tid files then we will simply continue without throwing any error
      TEST_PID=`cat $inst/ts.pid` 2>/dev/null
      if [ $? != 0 ];then
      #  debug_log "Instance $inst/netstorm.pid is not present. Breaking of for loop"
      #  break
         continue
      fi
      if [ "XX$TEST_PID" == "XX$TS_RUN_PID" ];then
        TestCycleNum=`cat $inst/ts.cid` 2>/dev/null         #get the test run number
        if [ $? != 0 ];then
        # debug_log "Instance $inst/netstorm.tid is not present. Breaking of for loop"
        # break
          continue 
        fi
        debug_log "The Test Run Number Found is $TestCycleNum"
        break
      fi
    done
    rm -rf $OUT  #Removing the temp file

    if [ "XX$TestCycleNum" != "XX" ]; then
      break
    fi
    debug_log "get_test_cycle_using_pid() - Sleeping for $i second"
    sleep 1
    let i=i+1
  done

  # Check if nestorm process is still running or not
  # If test duration is very small, then this may fail
  #ps -ef | grep netstorm | grep -v grep | grep $TSFileName > /dev/null
  #if [ $? != 0 ];then #netstorm is no longer running, so there is some error
  #  debug_log "Netstorm process is no longer running for test run $TestCycleNum"
    #TestCycleNum="" # Set is empty so that we give error later
  #fi

  if [ "XX$TestCycleNum" == "XX" ]
  then
    error_log "Failed to get Test cycle number"
    clean_on_error
    exit -1
  fi

  debug_log "Test suite cycle is $TestCycleNum"

}

get_TestCycleNum()
{
  get_tsrun_pid
  get_test_cycle_using_pid 
  #Moved where chk_is_Master_ready is called as this is used in master mode only
  #It is Done because it takes time to move progree report in normal case also
  check_cycle_summary_report
}

check_cycle_summary_report()
{
  # Set cycle summary report file name
  CycleSummaryReport=$NS_WDIR/logs/tsr/$TestCycleNum/cycle_summary.report 

  debug_log "The cycle sumamry report is $CycleSummaryReport" 

  i=1
  while [ $i != 15 ]
  do
    if [ -f $CycleSummaryReport ]; then
      return
    fi
    debug_log "check_cycle_summary_report() - Sleeping for $i second"
    sleep 1
    let i=i+1
  done
  error_log "Cycle summary report file not found ($CycleSummaryReport)"
  clean_on_error
  exit -1 
}

move_log_file_to_test_dir_later()
{
  MOVE_SHELL=/tmp/ts_start_test_mv.$$

  > $MOVE_SHELL

  debug_log "move_log_file_to_test_dir_later() called"

  echo "test_function() { i=1; while [ \$i != 60 ]; do if [ ! -f $TestSuiteLogFile ]; then echo "Sleeping"; sleep 1; let i=i+1; continue; fi;  TSRunOutputFile=$TSRunOutputFile; mv -f $TestSuiteLogFile $TSRunOutputFile; if [ \$? != 0 ];then echo "Error in moving $TestSuiteLogFile to $TSRunOutputFile"; fi;  return; done; }; test_function" >>$MOVE_SHELL
  echo "rm -f $MOVE_SHELL; exit 0" >> $MOVE_SHELL
  chmod +x $MOVE_SHELL

  if [ "XX$IS_DEBUG" != "XX" ];then
    debug_log "move_log_file_to_test_dir_later shell is:"
    cat $MOVE_SHELL
  fi

  nohup $MOVE_SHELL 1>/dev/null 2>&1 &
}

# move netstorm.log to Testrun dir with name TestRunOutput.log
# we have loop so that if file is not created, we give some time
move_log_file_to_test_cycle_dir()
{
  i=1
  while [ $i != 5 ]
  do
    if [ ! -f $TestSuiteLogFile ]; then
      sleep 1
      let i=i+1
      continue
    fi
    TSRunOutputFile=$NS_WDIR/logs/tsr/$TestCycleNum/TSRunOutput.log
    mv -f $TestSuiteLogFile $TSRunOutputFile
    if [ $? != 0 ];then
      debug_log "Error in moving $TestSuiteLogFile to $TSRunOutputFile"
    fi
    debug_log "$TestSuiteLogFile moved to $TSRunOutputFile"
    return
  done

  error_log "Error: Test output file is not created. File name is $TestSuiteLogFile"
  move_log_file_to_test_dir_later $TestSuiteLogFile $TSRunOutputFile
}


#TestSuiteLogFile=$NS_WDIR/webapps/netstorm/logs/$USER_NAME.testsuite.log
TestSuiteLogFile="$NS_WDIR/logs/tsr/$USER_NAME.testsuite.log_$$"

if [ ! -d $NS_WDIR/logs/tsr ]; then 
  mkdir -p $NS_WDIR/logs/tsr >/dev/null
fi


#Remove this file so that we do not move old file which is
rm -f $TestSuiteLogFile


#If running from cli, start test in fore ground so that progress report comes on console.
# Also do not send data to GUI server.

cd $NS_WDIR
trap 'mv $TestSuiteLogFile /tmp 2>/dev/null;exit' EXIT

if [ "XX$INVOKER" == "XXcli" ];then
  debug_log "Runnning foreground"
  $TS_SHELL $ARGS
  exit $?
else 
  debug_log "Starting ts_run using - nohup $TS_SHELL $ARGS" 
  nohup $TS_SHELL $ARGS 1>$TestSuiteLogFile 2>&1 &
fi


# Get the test run of this test
get_TestCycleNum 

move_log_file_to_test_cycle_dir


echo "Test suite $TESTSUITE started successfully. Test cycle number is:"
# Test Suite GUI assumes that test cycle number is coming in name = value pair. So do not change this line
# Also GUI firt search for TestCycleNumber and then extracts cycle number. So no other line should have this keyword (TestCycleNumber)
echo "TestCycleNumber = $TestCycleNum"

#rm -f $TestSuiteLogFile
exit 0
