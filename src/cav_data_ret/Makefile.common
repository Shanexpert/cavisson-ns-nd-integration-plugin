include .cflags.mk
include ../../../../../.cav.build 

CFLAG1 += $(__obj_cflags)
CUR_DIR = "$(shell pwd)"

BIN = $(CUR_DIR)/builds/bin
OBJ = $(CUR_DIR)/builds/obj
COPY_BIN_DIR = $(CUR_DIR)/../bin/

build: MkDir $(BIN)/cdr $(BIN)/cdr.rhel

MkDir:
	mkdir -p $(OBJ)
	mkdir -p $(BIN)

CDR_OBJS = $(OBJ)/cdr_main.o $(OBJ)/cdr_utils.o $(OBJ)/cdr_cache.o $(OBJ)/cdr_log.o $(OBJ)/cdr_config.o \
           $(OBJ)/cdr_dir_operation.o $(OBJ)/cdr_file_handler.o $(OBJ)/cdr_components.o \
           $(OBJ)/cdr_cleanup.o $(OBJ)/cdr_cmt_handler.o $(OBJ)/cdr_nv_handler.o $(OBJ)/cdr_manual_del.o $(OBJ)/cdr_drop_tables.o

#RHEL_OBJS= $(OBJ)/cav_data_retention_mgr_rhel.o 

#UBUNTU_OBJS= $(OBJ)/cav_data_retention_mgr.o 

$(BIN)/cdr: $(CDR_OBJS)
	gcc -g  -D CDR $(LDFLAGS) $(CDR_OBJS) $(UBUNTU_OBJS) -o $(BIN)/cav_data_ret_manager -lpthread $(LIBS) -L$(__lib_dir) 
 
$(BIN)/cdr.rhel: $(CDR_OBJS) $(RHEL_OBJS)
	gcc -g  $(LDFLAGS) $(CDR_OBJS) $(RHEL_OBJS) -o $(BIN)/cav_data_ret_manager.rhel -lpthread $(LIBS) -L$(__lib_dir)  

$(OBJ)/cdr_main.o: cdr_main.h cdr_main.c 
	gcc $(CFLAG) $(CFLAG1) -D CDR -o $(OBJ)/cdr_main.o cdr_main.c -lpq -lm

$(OBJ)/cdr_file_handler.o: cdr_file_handler.h cdr_file_handler.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_file_handler.o cdr_file_handler.c -lpq -lm

$(OBJ)/cdr_utils.o: cdr_utils.h cdr_utils.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_utils.o cdr_utils.c -lpq -lm

$(OBJ)/cdr_components.o: cdr_components.h cdr_components.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_components.o cdr_components.c -lpq -lm

$(OBJ)/cdr_config.o: cdr_config.h cdr_config.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_config.o cdr_config.c -lpq -lm

$(OBJ)/cdr_log.o: cdr_log.h cdr_log.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_log.o cdr_log.c -lpq -lm

$(OBJ)/cdr_cache.o: cdr_cache.h cdr_cache.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_cache.o cdr_cache.c -lpq -lm

$(OBJ)/cdr_cleanup.o: cdr_cleanup.h cdr_cleanup.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_cleanup.o cdr_cleanup.c -lpq -lm

$(OBJ)/cdr_dir_operation.o: cdr_dir_operation.h cdr_dir_operation.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_dir_operation.o cdr_dir_operation.c -lpq -lm

$(OBJ)/cdr_cmt_handler.o: cdr_cmt_handler.h cdr_cmt_handler.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_cmt_handler.o cdr_cmt_handler.c -lpq -lm

$(OBJ)/cdr_nv_handler.o: cdr_nv_handler.h cdr_nv_handler.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_nv_handler.o cdr_nv_handler.c -lpq -lm

$(OBJ)/cdr_manual_del.o: cdr_manual_del.h cdr_manual_del.c 
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_manual_del.o cdr_manual_del.c -lpq -lm

$(OBJ)/cdr_drop_tables.o: cdr_drop_tables.c cdr_drop_tables.h
	gcc $(CFLAG) $(CFLAG1) -o $(OBJ)/cdr_drop_tables.o cdr_drop_tables.c -lpq -lm


clean:
	rm -rf $(CUR_DIR)/builds
	rm -rf $(__export_dir)/cdr*
	rm -rf $(__export_dir)/mk/cdr*

release:
	mkdir -p $(CUR_DIR)/builds/mk
	mkdir -p $(CUR_DIR)/builds/cdr  
	mkdir -p $(CUR_DIR)/builds/cdr/bin
	mkdir -p $(CUR_DIR)/builds/cdr/etc 
	cp $(BIN)/cav_data_ret_manager $(CUR_DIR)/builds/cdr/bin
	cp $(CUR_DIR)/cdr_create_default_config_json $(CUR_DIR)/builds/cdr/bin
	$(__tool_dir)/build_version -i
	cp etc/version $(CUR_DIR)/builds/cdr/etc
	cd $(CUR_DIR)/builds; tar cvzf cdr.`$(__tool_dir)/build_version -r -f ./cdr`.`$(__tool_dir)/build_version -b -f ./cdr`.tar.gz cdr
	make release_bin 
	cd $(CUR_DIR)/builds/bin;mv cav_data_ret_manager.rhel cav_data_ret_manager
	cd $(CUR_DIR)/builds; tar cvzf cdr.`$(__tool_dir)/build_version -r -f ./cdr`.`$(__tool_dir)/build_version -b -f ./cdr`.tar.gz cdr
	make release_rhel_bin

release_bin:BUILD_RELEASE=$(shell $(__tool_dir)/build_version -r)
release_bin:BUILD_VERSION=$(shell $(__tool_dir)/build_version -b)
release_bin:
	rm -rf $(CUR_DIR)/builds/mk
	mkdir -p $(CUR_DIR)/builds/mk
	cd $(CUR_DIR)/builds; echo "NS_RELEASE=$(NS_RELEASE)" >> ./mk/upgrade.spec
	cd $(CUR_DIR)/builds; echo "build=cdr.$(BUILD_RELEASE).$(BUILD_VERSION).$(NS_RELEASE).bin" >> ./mk/upgrade.spec
	cd $(CUR_DIR)/builds; echo "cdr=`ls cdr.*gz`" >> ./mk/upgrade.spec
	cp $(__tool_dir)/nsi_upgrade.sh $(CUR_DIR)/builds/cdr.*gz $(CUR_DIR)/builds/mk
	$(__tool_dir)/makeself.sh --current $(CUR_DIR)/builds/mk $(CUR_DIR)/builds/cdr.`$(__tool_dir)/build_version -r`.`$(__tool_dir)/build_version -b`.$(NS_RELEASE).bin "cdr `$(__tool_dir)/build_version -r` Build `$(__tool_dir)/build_version -b`" ./nsi_upgrade.sh

release_rhel_bin:NS_RELEASE=Redhat_64
release_rhel_bin:release_bin
do_export:
	mkdir -p $(__export_dir)/
	mkdir -p $(__export_dir)/mk/
	cp $(CUR_DIR)/builds/*.bin $(__export_dir)
	cp $(CUR_DIR)/builds/*.gz $(__export_dir)/mk
