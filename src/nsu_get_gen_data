#!/bin/bash
Generator_Name=$1
Generator_IP=$2
P_PID=$3
Generator_DIR=$4
Generator_Location=$5
build_ver_flag=$6
Ctrl_build_version=$8
Ctrl_build_flag=$9
Delete_gen_tr_flag=${10}
Controller=`echo $Generator_DIR | cut -d'/' -f4`

TMP_CMD_OUTPUT_FILE=/tmp/cmd_output.$$
OUT_FILE=$NS_WDIR/gen_data_$Generator_Name.$P_PID
ERR_FILE=$NS_WDIR/err.$P_PID
>$OUT_FILE
>$ERR_FILE

message_out()
{
  echo "$1" >>$OUT_FILE
}

error_msg()
{
  echo "$1" >>$ERR_FILE
}

# Provides the total RAM memory of a Generator
get_gen_memory()
{
  message_out "MEMORY DETAILS:"
  MEM_DATA=`nsu_server_admin -i -g -s $Generator_IP -c "free -g"| grep Mem:`
  totalram=`echo $MEM_DATA| awk '{ print $2 }'`
  freeram=`echo $MEM_DATA| awk '{ print $4 }'`
  buffer_cached_ram=`echo $MEM_DATA| awk '{ print $6 }'`
  Total_ram_free=`expr $freeram \+ $buffer_cached_ram `
  avail_ram_per=`printf "%.2f%%" $(awk "BEGIN {print $Total_ram_free/$totalram *100.0}")`
  message_out "Total Memory in GB: $totalram"
  message_out "Free Memory in GB: $Total_ram_free($avail_ram_per)"
  GUI_HDR_VAL="$GUI_HDR_VAL|$totalram"
  GUI_HDR_VAL="$GUI_HDR_VAL|$Total_ram_free($avail_ram_per)"
  message_out ""
}

# Provides the Available Hard Disk Space of a Generator 
get_gen_disk()
{
  message_out "DISK SPACE DETAILS:"
  nsu_server_admin -i -g -s $Generator_IP -c "df -hPBG" >$TMP_CMD_OUTPUT_FILE
  message_out "`cat $TMP_CMD_OUTPUT_FILE `"
  grep -w "/home" $TMP_CMD_OUTPUT_FILE >/dev/null
  if [ $? -eq 0 ];then
    ROOT_TOTAL_DISK=`grep -w "/home" $TMP_CMD_OUTPUT_FILE | awk '{print $2}' | sed 's/[!A-Z]*//g'`
    ROOT_AVAIL_DISK=`grep -w "/home" $TMP_CMD_OUTPUT_FILE | awk '{print $4}' | sed 's/[!A-Z]*//g'`
    AVAIL_DISK_PER=`grep -w "/home" $TMP_CMD_OUTPUT_FILE | awk '{print $5}' | sed 's/[!%]*//g'`
  else
    ROOT_TOTAL_DISK=`grep -w "/" $TMP_CMD_OUTPUT_FILE | awk '{print $2}' | sed 's/[!A-Z]*//g'`
    ROOT_AVAIL_DISK=`grep -w "/" $TMP_CMD_OUTPUT_FILE | awk '{print $4}' | sed 's/[!A-Z]*//g'`
    AVAIL_DISK_PER=`grep -w "/" $TMP_CMD_OUTPUT_FILE | awk '{print $5}' | sed 's/[!%]*//g'`
  fi
  AVAIL_DISK_PER=$((100-AVAIL_DISK_PER)) 
  GUI_HDR_VAL="$GUI_HDR_VAL|$ROOT_TOTAL_DISK"
  GUI_HDR_VAL="$GUI_HDR_VAL|$ROOT_AVAIL_DISK(${AVAIL_DISK_PER}%)"
  message_out ""
}

# Provides the Network Delay information of a Generator
get_gen_network_delay()
{
  message_out "NETWORK DELAY DETAILS:"
  ping $Generator_IP -c 1 >$TMP_CMD_OUTPUT_FILE
  if [ $? -ne 0 ]; then
    message_out "Host is down/not reachable..."
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Pingable"
    error_msg "$Generator_Name($Generator_IP): Host is down/not reachable." 
  else
    ping $Generator_IP -c 1 >$TMP_CMD_OUTPUT_FILE
    message_out "`echo $PING | sed -n '$p' $TMP_CMD_OUTPUT_FILE`"
    GUI_HDR_VAL="$GUI_HDR_VAL|Pingable"
  fi
  message_out ""
}

# Provides the Number of CPU Processor of an Generator
get_no_of_cpu()
{
  NO_CPU=`nsu_server_admin -i -g -s $Generator_IP -c 'grep '^processor' /proc/cpuinfo' | sort -u | wc -l`
  message_out  "CPU DETAILS:"
  message_out "No.Of Processor CPU: $NO_CPU"
  GUI_HDR_VAL="$GUI_HDR_VAL|$NO_CPU"
  message_out ""
}

# Provides the DNS status of a Generator
get_dns_status()
{
  message_out "DNS STATUS DETAILS:"
  nsu_server_admin -i -g -s $Generator_IP -c "/etc/init.d/dnsmasq status" >$TMP_CMD_OUTPUT_FILE
  if [ $? -eq 0 ]; then
    message_out "The service is running."
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;32mRunning\e[0m"`"
  else
    error_msg "$Generator_Name($Generator_IP): The DNS service is not running."
    message_out "The service is not running."
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;31mNot Running\e[0m"`"
  fi
  message_out ""
}

# Provides the Generator Version of a Generator
get_gen_version()
{
  flag=0
  message_out "Checking build version:"
  DATA=`nsu_server_admin -i -g -s $Generator_IP -c "$Generator_DIR/bin/nsu_get_version -n -w $Controller"`
  NS_BUILD=`echo $DATA | awk '{print $2 $3 $4}'`
  
  if [ $Ctrl_build_flag -eq 1 ] ;then
    BUILD_NAME=`echo $DATA | awk '{print $2}'| sed 's/[^0-9]//g'`
    BUILD_VER=`echo $DATA | awk -F '#' '{print "#"$2}' | sed 's/[ )]//g'`
    COMPLETE_BUILD=$BUILD_NAME$BUILD_VER 
    if [ $Ctrl_build_version != $COMPLETE_BUILD ];then
      flag=1 
    fi
  fi
  message_out "BUILD VERSION(NETSTORM): $NS_BUILD"
  if [ $flag -eq 1 ];then
    GUI_HDR_VAL="$GUI_HDR_VAL|`echo -e "\e[1;31m${NS_BUILD}\e[0m"`"
  else
    GUI_HDR_VAL="$GUI_HDR_VAL|${NS_BUILD}"
  fi
  message_out ""
}

# Provides the Date of a Generator
get_gen_date()
{
  TIME_DATA=`nsu_server_admin -i -g -s $Generator_IP -c 'date'`
  message_out "Current Time: "
  message_out "$TIME_DATA"
  GUI_HDR_VAL="$GUI_HDR_VAL|$TIME_DATA"
  message_out ""
}

# Provides the information resolv.conf file will exist or not and server name in /etc/.
check_etc_resolv_conf_file()
{
  not_found=0
  message_out "Checking for /etc/resolve file:"
  nsu_server_admin -i -g -s $Generator_IP -c "cat /etc/resolv.conf" >$TMP_CMD_OUTPUT_FILE 
  if [ $? -ne 0 ]; then
    message_out "Error: resolv.conf file not found in /etc/ directory at generator $Generator_Name($Generator_IP)"
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Exist"
    error_msg "$Generator_Name($Generator_IP): resolv.conf file not found in /etc/ directory."     
    #GUI_HDR_VAL="$GUI_HDR_VAL|-"
  else
    DATA=`cat $TMP_CMD_OUTPUT_FILE | grep -v "#" | grep -v "^$" | awk 'BEGIN{ORS=", ";}{print $2;}' | tr -d '\n' | sed 's/..$//'`
    message_out "resolv.conf file exist."
    DEFAULT_SERVER_ENTRY=`echo $DATA | awk -F',' '{print $1}'`
    if [ "X$DEFAULT_SERVER_ENTRY" != "X127.0.0.1" ];then
      not_found=1
    fi
    #GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
    if [ "X$DATA" = "X" ];then
      GUI_HDR_VAL="$GUI_HDR_VAL|-"
      message_out " but there is no data"
      error_msg "$Generator_Name($Generator_IP): /etc/resolv.conf file is empty."
    elif [ $not_found -eq 1 ];then
      GUI_HDR_VAL="$GUI_HDR_VAL|`echo -e "\e[1;31m${DATA}\e[0m"`"
    else
      GUI_HDR_VAL="$GUI_HDR_VAL|${DATA}"
      message_out "$DATA"
    fi
  fi
  message_out ""
}

# Provides the information resolv.conf file will exist or not and server name in /var/run/dnsmasq/.
check_dns_resolv_conf_file()
{
  message_out "Checking for /var/run/dnsmasq/resolve file:"
  nsu_server_admin -i -g -s $Generator_IP -c "cat /var/run/dnsmasq/resolv.conf" >$TMP_CMD_OUTPUT_FILE
  if [ $? -ne 0 ]; then
    message_out "Error: resolv.conf file not found in /var/run/dnsmasq directory at generator $Generator_Name($Generator_IP)"
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Exist"
    error_msg "$Generator_Name($Generator_IP): resolv.conf file not found in /var/run/dnsmasq directory."
   #GUI_HDR_VAL="$GUI_HDR_VAL|-"
  else
    DATA=`cat $TMP_CMD_OUTPUT_FILE | grep -v "#" | grep -v "^$" | awk 'BEGIN{ORS=", ";}{print $2;}' | tr -d '\n' | sed 's/..$//'`
    message_out "resolv.conf file exist."
    #GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
    if [ "X$DATA" = "X" ];then
      GUI_HDR_VAL="$GUI_HDR_VAL|-"
      message_out " but there is no data "
      error_msg "$Generator_Name($Generator_IP): /var/run/dnsmasq/resolv.conf file is empty."
    else
      GUI_HDR_VAL="$GUI_HDR_VAL|${DATA}"
      message_out "$DATA"
    fi
  fi
  message_out ""
}

#Provides the information server.dat file will exist or not
check_server_dat_file()
{
  message_out "Checking for server.dat file:"
  nsu_server_admin -i -g -s $Generator_IP -c "cat $Generator_DIR/server/servers.dat" >$TMP_CMD_OUTPUT_FILE
  if [ $? -ne 0 ]; then
    error_msg "$Generator_Name($Generator_IP): servers.dat file does not exist."
    message_out "Error: server.dat file not found at generator $Generator_Name($Generator_IP)"
    GUI_HDR_VAL="$GUI_HDR_VAL|NO"
  else
    message_out "servers.dat file exist."
    GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
  fi
  message_out ""
}

#Provides the information sys/gen_specific_site_keywords.default file will exist or not
check_gen_specific_site_keywords_file()
{
  message_out "Checking for $Generator_DIR/sys/gen_specific_site_keywords.default file:"
  nsu_server_admin -i -g -s $Generator_IP -c "cat $Generator_DIR/sys/gen_specific_site_keywords.default" >$TMP_CMD_OUTPUT_FILE
  FAILURE=$?
  grep -w "cat:" $TMP_CMD_OUTPUT_FILE >/dev/null 2>&1
  if [ $? -eq 0 -o $FAILURE -ne 0 ];then
    error_msg "$Generator_Name($Generator_IP): $Generator_DIR/sys/gen_specific_site_keywords.default file does not exist."
    message_out "$Generator_DIR/sys/gen_specific_site_keywords.default file does not exist at generator $Generator_Name($Generator_IP)"
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Exist"
  else
    DATA=`cat $TMP_CMD_OUTPUT_FILE | grep -v "#" | grep -v "^$" | awk 'BEGIN{ORS=", ";}{print $0;}' | tr -d '\n' | sed 's/..$//'`
    if [ "X$DATA" = "X" ];then
      message_out "$Generator_DIR/sys/gen_specific_site_keywords.default is empty"
      error_msg "$Generator_Name($Generator_IP): $Generator_DIR/sys/gen_specific_site_keywords.default is empty"
      GUI_HDR_VAL="$GUI_HDR_VAL|-"
    else
     message_out "$DATA"
     GUI_HDR_VAL="$GUI_HDR_VAL|$DATA"
    fi
  fi
  message_out ""
}

#Provides the information .license/license.nl1 file will exist or not
check_license_file()
{
  message_out "Checking for .license/license.nl1 file:"
  nsu_server_admin -i -g -s $Generator_IP -c "cat $Generator_DIR/.license/license.nl1" >$TMP_CMD_OUTPUT_FILE
  if [ $? -ne 0 ]; then
    error_msg "license file does not exist at generator $Generator_Name($Generator_IP) ."
    message_out "Error: license file does not exist at generator $Generator_Name($Generator_IP)"
    GUI_HDR_VAL="$GUI_HDR_VAL|NO"
  else
    message_out "license file exist."
    GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
  fi
  message_out ""
}

# Provides the information /etc/environment.conf file will exist or not
check_environment_conf_file()
{
  message_out "Checking /etc/environment file :"
  FILE_DATA=`nsu_server_admin -i -g -s $Generator_IP -c 'egrep "[^ ]*PATH" /etc/environment'`
  if [ $? -eq 0 ]; then
    message_out "environment file exist."
    GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
  else
    error_msg "$Generator_Name($Generator_IP): environment file does not exist in /etc/ directory."
    message_out "ERROR: environment file does not exist in /etc/ directory at generator $Generator_Name ."
    GUI_HDR_VAL="$GUI_HDR_VAL|No"
  fi
  message_out ""
}

# Provides the information /etc/cav_ns_generator.dat file will exist or not
check_cav_ns_generator_file()
{
  message_out "Checking /etc/cav_ns_generator.dat file :"
  nsu_server_admin -i -g -s $Generator_IP -c "cat $Generator_DIR/etc/cav_ns_generator.dat" >$TMP_CMD_OUTPUT_FILE
  if [ $? -eq 0 ]; then
    message_out "cav_ns_generator.dat file exist."
    GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
  else
    error_msg "$Generator_Name($Generator_IP): /etc/cav_ns_generator.dat file does not exist."
    message_out "ERROR: /etc/cav_ns_generator.dat file does not exist at generator $Generator_Name ."
    GUI_HDR_VAL="$GUI_HDR_VAL|No"
  fi
  message_out ""
}

# Provides the Postgres status of a Generator
check_postgres_status()
{
  message_out "Postgres Status Details:"
  STATUS=`nsu_server_admin -i -g -s $Generator_IP -c "/etc/init.d/postgresql status"`
  STATUS=`echo $STATUS | grep "Running clusters:" | awk '{print $3}'`
  if [ "X$STATUS" != "X" ]; then
    message_out "The service is running."
    GUI_HDR_VAL="$GUI_HDR_VAL|Running"
  else
    error_msg "$Generator_Name($Generator_IP): The Postgres service is not running."
    message_out "The Postgres service is not running."
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Running"
  fi
  message_out ""
}

# Provides the lps status of a Generator
check_lps_status()
{
  message_out "LPS Status:"
  if [ "$Controller" != "work" ];then
    STATUS=`nsu_server_admin -i -g -s $Generator_IP -c "/etc/init.d/lps_$Controller show"`
  else
    STATUS=`nsu_server_admin -i -g -s $Generator_IP -c "/etc/init.d/lps show"`
  fi
  echo $STATUS | grep "LPS is not running." >$TMP_CMD_OUTPUT_FILE
  if [ $? -eq 0 ]; then
    message_out "The lps service is not running."
    error_msg "$Generator_Name($Generator_IP): The lps service is not running."
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Running"
  else
    message_out "The lps service is running."
    GUI_HDR_VAL="$GUI_HDR_VAL|Running"
  fi
  message_out ""
}

# Provides the tomcat status of a Generator
check_tomcat_status()
{
  message_out "Tomcat Status:"
  STATUS=`nsu_server_admin -i -g -s $Generator_IP -c "ps -ef | grep java | grep $Controller"`
  STATUS=`echo $STATUS | grep $Controller/apache-tomcat`
  if [ $STATUS -ne 0 ]; then
    message_out "The tomcat service is not running."
    error_msg "$Generator_Name($Generator_IP): The tomcat service is not running. "
    GUI_HDR_VAL="$GUI_HDR_VAL|Not Running"
  else
    message_out "The tomcat service is running."
    GUI_HDR_VAL="$GUI_HDR_VAL|Running"
  fi
  message_out ""
}

#testing running wrapper
check_test_running()
{
  message_out "Running test detail:" 
  ret=`nsu_server_admin -i -g -s $Generator_IP -c "$Generator_DIR/bin/nsu_check_test_running_on_generator $Generator_DIR"`
  if [ $? -ne 0 ];then
    return
  fi
  if [ "$ret" = "false" ]; then
    message_out "Test is not running at generator $Generator_Name" 
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;32mNO\e[0m"`"
  else
    message_out "Test is running at generator $Generator_Name $ret" 
    error_msg "$Generator_Name($Generator_IP): Test is running at generator"
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;31mYES($ret)\e[0m"`"
  fi
  message_out "" 
}

# Provides the information test is running  or not
check_test_is_running()
{
  message_out "Running test detail:" 
  ret=`nsu_server_admin -i -g -s $Generator_IP -c "$Generator_DIR/bin/nsu_check_test_running_on_generator $Generator_DIR"`
  if [ "$ret" = "true" ]; then
    message_out "Test is running at generator $Generator_Name" 
    error_msg "$Generator_Name($Generator_IP): Test is running at generator"
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;31mYES\e[0m"`"
  else
    message_out "Test is not running at generator $Generator_Name" 
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;32mNO\e[0m"`"
  fi
  message_out "" 
}

get_sysstat_package_details()
{
  SYSSTAT_DATA=`nsu_server_admin -i -g -s $Generator_IP -c "dpkg -l sysstat"`
  echo $SYSSTAT_DATA | grep -w "No packages found matching" >/dev/null
  if [ $? -eq 0 ];then
    message_out "sysstat package is not Installed"
    GUI_HDR_VAL=""$GUI_HDR_VAL"|`echo -e "\e[1;32mNot Installed\e[0m"`"
  else
    message_out "sysstat package is Installed"
    GUI_HDR_VAL="$GUI_HDR_VAL|Installed"
  fi
}

print_blank_header_and_exit()
{
  Gen_Name=$1
  Gen_IP=$2
  message_out "$Gen_Name|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-"
  exit 0
}

#Check cmon status of generator
get_cmon_details()
{
  CMON=`nsu_server_admin -i -g -s $Generator_IP -S`
  echo "$CMON" | grep 'cmon is running' >/dev/null
  stat=$?
  #if [ "XX$CMON" = "XX" ];then
    if [ "XX$stat" != "XX0" ]; then
      if [ "$build_ver_flag" -eq 1 ];then
        message_out "$Generator_Name|cmon not running|$Controller"
        return 1
      else
        print_blank_header_and_exit $Generator_Name $Generator_IP
      fi
    fi
  #fi
}

get_cmon_version()
{
  message_out "Checking cmon version:"
  DATA=`nsu_server_admin -i -g -s $Generator_IP -v`
  CMON_VER=`echo $DATA |awk '{print $3 $4 $5}'`
  message_out "CMON VERSION(NETSTORM): $CMON_VER"
  GUI_HDR_VAL="$GUI_HDR_VAL|$CMON_VER"
  message_out ""
}

#handling when controller name is not present
check_blade()
{
  BLADE_INFO=`nsu_server_admin -i -g -s $Generator_IP -c "grep -w ^$Controller $HOME_DIR/etc/cav_controller.conf"`
  if [ $? != 0 ];then
    message_out "'$Controller' Blade does not exist|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-"
    GUI_HDR_VAL="$GUI_HDR_VAL|No|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-"
    message_out "$Generator_Name$GUI_HDR_VAL"
    message_out ""    
    rm -f $TMP_CMD_OUTPUT_FILE
    exit 0
  else 
    GUI_HDR_VAL="$GUI_HDR_VAL|Yes"
    message_out "'$Controller' Blade exist|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-"
    message_out ""
  fi
}

#(Bug 32122) to find the ethernet speed of machine
get_ethernet_speed()
{
  current_status=`ping -c 1 -W 1 $Generator_IP| awk 'FNR == 2 {print}' |cut -d " " -f 7 | cut -d "=" -f 1`
  if [ "XX$current_status" == "XXtime" ]; then
    interface=`nsu_server_admin -s $Generator_IP -g -c 'ifconfig' | grep -B1 $Generator_IP | cut -d " " -f 1`   
    if [ $? != 0 ];then
      GUI_HDR_VAL="$GUI_HDR_VAL|Machine is down"
    else
      speed=`nsu_server_admin -s $Generator_IP -g -c "ethtool $interface"|grep "Speed" |cut -d " " -f 2`
      GUI_HDR_VAL="$GUI_HDR_VAL|$speed"
      message_out  "ETHERNET SPEED(INTERFACE: $interface): $speed"
    fi
    message_out ""
  fi
}

get_gen_data()
{
  message_out "FOR GENERATOR -- $Generator_Name($Generator_IP):"
  message_out ""
  get_cmon_details
  check_blade
  get_gen_version 
  get_cmon_version
  get_gen_date
  check_test_running
  #check_test_is_running 
  get_dns_status
  check_etc_resolv_conf_file
  check_dns_resolv_conf_file
  check_gen_specific_site_keywords_file
  get_no_of_cpu
  get_gen_disk
  get_gen_memory  
  #get_gen_network_delay   
  check_environment_conf_file  
  #check_server_dat_file
  #check_license_file
  #check_postgres_status
  #check_tomcat_status
  #check_lps_status
  #check_cav_ns_generator_file
  #get_sysstat_package_details
  get_ethernet_speed
}

if [ "$build_ver_flag" -eq 1 ];then
  get_cmon_details
  retval=$?
  echo "retval = $retval" >>/tmp/ss
  if [ "$retval" == 1 ];then
    exit 0
  fi
  DATA=`nsu_server_admin -i -g -s $Generator_IP -c "grep -w ^$Controller $HOME_DIR/etc/cav_controller.conf"`
  if [ $? = 0 ];then
    DATA=`nsu_server_admin -i -g -s $Generator_IP -c "$Generator_DIR/bin/nsu_get_version -w $Controller"`
  else
    DATA="$Generator_DIR does not exists in generator conf file"
  fi

  NS_BUILD=`echo $DATA | awk -F " " '{print $2 $3 $4}' | sed 's/NetStorm:Version//g'`
  echo "NS_BUILD = $NS_BUILD" >>/tmp/ss
  message_out "$Generator_Name|${NS_BUILD}|$Controller"
else
  if [ $Delete_gen_tr_flag -eq 1 ] ; then
    nsu_server_admin -i -g -s $Generator_IP -c "$Generator_DIR/bin/nsu_rm_trun -f env_var:NS_WDIR=$Generator_DIR"
    if [ $? -eq 0 ];then
      message_out "All testruns are deleted from blade '$Controller' of Generator '$Generator_Name'"
    else
      message_out "ERROR: Not able to delete testruns from blade '$Controller' of Generator [$Generator_Name]"
    fi
  elif [ $Delete_gen_tr_flag -eq 2 ] ; then
    echo 
  else 
    get_gen_data
    message_out "$Generator_Name$GUI_HDR_VAL"
    message_out "----------------------------------------------------------------------------------------------"
  fi
fi

rm -f $TMP_CMD_OUTPUT_FILE
exit 0 
