shopt -s expand_aliases
alias sqlCredentials="psql -U cavisson test"
logFile=$NS_WDIR/mssqlMigration.log

normalizeTableExist=0
executionStatsTableExists=0
isPrimaryKeyPresent=0

currentTime="$(($(date +%s%N)/1000000))"

exitOnErr()
{
        # echo message
        echo "		$1" 1>&2
        echo "		Hence, aborting migration."

        echo "		$1" 1>&2 >> $logFile
        echo "		Hence, aborting migration." >> $logFile

        echo ""
        echo "" >> $logFile


	echo "		Migration Aborted at $(date)"
	echo "          Migration Aborted at $(date)" >> $logFile

	echo ""
        echo "" >> $logFile

        echo "====================== MIGRATION ABORTED ======================"
        echo "====================== MIGRATION ABORTED ======================" >> $logFile

        echo ""
        echo "" >> $logFile

        # exit using error code
        exit $2
}

errorMessage()  
{
        echo "		$1" 1>&2
        echo "		$1" 1>&2 >> $logFile
}

message()
{
        #Echo message
        echo "		$1"
        echo "		$1" >> $logFile
}

stepMessage()
{
        #Echo message
        echo "$1"
        echo "$1" >> $logFile
}



stepMessage ""
stepMessage "======================DATA MIGRATION STARTED WITH 18 STEPS========================"
stepMessage ""
stepMessage "Migration Started At $(date)"
stepMessage "Database Migration logs will be created in [ $logFile ]"
stepMessage ""


#If user does not pass the test run number then will fetch test run number from config.ini

        stepMessage "STEP 1:"
        message "Going to get Test Run Number."

        if [ -z $1 ]; then
                testNum=`cat $NS_WDIR/webapps/sys/config.ini | grep -v '#' |awk -F= '/nde.testRunNum/{print $2}'`
                message "TestRun number fetched from config.ini [ $NS_WDIR/webapps/sys/config.ini ] - $testNum"
        else
                testNum=$1
                message "TestRun number fetched from user - $testNum"
        fi

#Checking if TR fetched is valid or not
        if [ ${testNum:-0} -lt  1 ]; then
                exitOnErr "ERROR: TestRun number [$testNum] is neither fetched from $NS_WDIR/webapps/sys/config.ini nor given by user in argument."
        fi

        message "COMPLETED."
        echo ""

#Checking if TR fetched is directory or not
        directory="$NS_WDIR/logs/TR$testNum"

        stepMessage "STEP 2:"
        message "Checking if directory '$directory' exist or not."

        if [ ! -d "$directory" ]; then
                exitOnErr "Directory '$directory' does not exist."
        fi

        message "Directory '$directory' exist."
        message "COMPLETED."
        message ""


	mssqlTableTR="mssqltable_$testNum"
	mssqlReportTR="mssqlreport_$testNum"
	mssqlEstimatedExecutionPlanTR="mssqlestimatedexecutionplan_$testNum"
	mssqlExecutionStatsTR="mssqlexecutionstats_$testNum"

#Checking if mssqltable_<TR> exits in test or not. If does not exist, then no migration required."

        stepMessage "STEP 3:"
        message "Checking if table '$mssqlTableTR' exist in testRunNum - $testNum"

        sqlCredentials  -c "\d+ $mssqlTableTR;" >/dev/null
        [[ $? != 0 ]] && exitOnErr "ERROR:  Table '$mssqlTableTR' does not exist. So, no migration required."

        message "Table '$mssqlTableTR' exist. "
        message "COMPLETED."
        message ""

#mssqltable_<TR> exits so, checking if mssqlestimatedexecutionplan_<TR> exists or not. If table is already present, then no migration required.
	mssqlEstimateExecutionPlanTRExist="\d+ $mssqlEstimatedExecutionPlanTR;"

        stepMessage "STEP 4:"
        message "Checking if table '$mssqlEstimatedExecutionPlanTR' exist in testRunNum - $testNum"
	message "Query : $mssqlEstimateExecutionPlanTRExist"

        sqlCredentials  -c "$mssqlEstimateExecutionPlanTRExist" >/dev/null
        
	[[ $? = 0 ]] && normalizeTableExist=1 
        [[ $? != 0 ]] && exitOnErr "Table '$mssqlEstimatedExecutionPlanTR' does not exist."

	message "Table '$mssqlEstimatedExecutionPlanTR' exist."
        message "COMPLETED."
        message ""

#Checking if mssqlexecutionstats_<TR> exits.

        stepMessage "STEP 5:"
        message "Checking if table '$mssqlExecutionStatsTR' exist in testRunNum - $testNum"

        sqlCredentials  -c "\d+ $mssqlExecutionStatsTR;" >/dev/null

        [[ $? = 0 ]] && executionStatsTableExists=1
        [[ $? != 0 ]] && exitOnErr "Table '$mssqlExecutionStatsTR' does not exist."

	message "Table '$mssqlExecutionStatsTR' exist."
        message "COMPLETED."
        message ""

#Check if both mssqlexecutionstats_<TR> and mssqlestimatedexecutionplan_<TR> exits and mssqlreport_TR also exist.
        stepMessage "STEP 6:"
        message "Checking if tables '$mssqlEstimatedExecutionPlanTR' and '$mssqlExecutionStatsTR' exist or not. If both exist, then check if $mssqlReportTR exist."

        if (( ($executionStatsTableExists != 1) && ($normalizeTableExist != 1) )); then
                exitOnErr "ERROR: Both or either of the  destination tables '$mssqlEstimatedExecutionPlanTR' and '$mssqlExecutionStatsTR' are already existing. So, no migration required."       
		fi

	message "Both the destimation tables '$mssqlEstimatedExecutionPlanTR' and '$mssqlExecutionStatsTR' are existing."
	message "Checking if $mssqlReportTR exist or not."
	
	sqlCredentials  -c "\d+ $mssqlReportTR;" >/dev/null
	[[ $? = 0 ]] && message "Table '$mssqlReportTR' exist."
	[[ $? != 0 ]] && exitOnErr "ERROR: Table '$mssqlReportTR' does not exist. So, no migration required."
	
        message "COMPLETED."


#If mssqlestimatedexecutionplan_<TR> exist, then fetch primary key for table mssqlestimatedexecutionplan_<TR>
	getPrimaryKeyEstimatedExecutionPlan="select constraint_name from information_schema.key_column_usage where table_name = '$mssqlEstimatedExecutionPlanTR' and column_name = 'startoffset';"
	
	stepMessage "STEP 7:"
	message "Going to fetch primary key name for table '$mssqlEstimatedExecutionPlanTR'."
	message "Query : $getPrimaryKeyEstimatedExecutionPlan"

	estimatedPKey=(`sqlCredentials  -c "$getPrimaryKeyEstimatedExecutionPlan"`)
	[[ $? != 0 ]] && errorMessage "ERROR: Unable to get primary key name for table '$mssqlEstimatedExecutionPlanTR'."
	
	estimatedPKey=${estimatedPKey[2]}

	
	if [[ "$estimatedPKey" =~ "(0" ]]; then
		errorMessage "ERROR: Primary Key name fetched for table '$mssqlEstimatedExecutionPlanTR' is empty"
	else
		isPrimaryKeyPresent=1
		message "Primary Key name for table '$mssqlEstimatedExecutionPlanTR' - $estimatedPKey."
	fi
	
	message "COMPLETED."
	

#fetch number of rows in mssqlestimatedexecutionplan_<TR>	

	estimatedExecutionPlanCountQuery="select count(*) from $mssqlEstimatedExecutionPlanTR;"	

	stepMessage "STEP 8:"
	message "Fetching number of rows present in table '$mssqlEstimatedExecutionPlanTR'."
	message "Query : $estimatedExecutionPlanCountQuery" 
	
	data=(`sqlCredentials  -c "$estimatedExecutionPlanCountQuery"`)
	[[ $? != 0 ]] && errorMessage "ERROR: Unable to get total row count for table '$mssqlEstimatedExecutionPlanTR'"

	count=${data[2]}
	
	message "Total row count for table $mssqlEstimatedExecutionPlanTR is $count."
	message "COMPLETED."
	message ""
	

#If mssqlestimatedexecutionplan_<TR> row count is greater than 0, then create backup table.
	estimatedBkpTb="$mssqlEstimatedExecutionPlanTR""_bkp_$currentTime"
	estimatedTbBackupQuery="select * into $estimatedBkpTb from $mssqlEstimatedExecutionPlanTR;"
	
	stepMessage "STEP 9:"
        message "Checking if row count for table '$mssqlEstimatedExecutionPlanTR' is greater than 0 or not."
		message "If count is greater than 0, then create backup for table '$mssqlEstimatedExecutionPlanTR'"

	if [ ${count:-0} -gt  0 ]; then
		message "Table '$mssqlEstimatedExecutionPlanTR' row count is $count."
		message "Going to create backup table '$estimatedBkpTb' for table '$mssqlEstimatedExecutionPlanTR'."
		
		sqlCredentials -c "$estimatedTbBackupQuery" >/dev/null
		[[ $? = 0 ]] && message "Successfully created backup table for '$mssqlEstimatedExecutionPlanTR'."
		[[ $? != 0 ]] && exitOnErr "Error: Unable to create backup table for table '$mssqlEstimatedExecutionPlanTR'."
	
	else
		message "Total row count on table '$mssqlEstimatedExecutionPlanTR' is 0. So, skipping taking backup of table '$mssqlEstimatedExecutionPlanTR.'"
	fi
	
	message "COMPLETED."
	message ""
		
		
	stepMessage "STEP 10:"
	message "Checking if primary key name from table '$mssqlEstimatedExecutionPlanTR' is fetched."
		
	if [ ${isPrimaryKeyPresent:-0} -gt 0 ]; then
		dropMssqlEstimatedExecutionPlanPKeyQuery="alter table $mssqlEstimatedExecutionPlanTR drop constraint $estimatedPKey"
			
		message "Going to alter primary key '$estimatedPKey' on table '$mssqlEstimatedExecutionPlanTR'."
		message "Query: $dropMssqlEstimatedExecutionPlanPKeyQuery"
			
		sqlCredentials  -c "$dropMssqlEstimatedExecutionPlanPKeyQuery" >/dev/null
		[[ $? != 0 ]] && exitOnErr "ERROR: Unable to drop primary key '$estimatedPKey' from table '$mssqlEstimatedExecutionPlanTR'."
		
		message "Primary key '$estimatedExecutionPlanPrimaryKey' dropped successfully from table '$mssqlEstimatedExecutionPlanTR'."
		message "COMPLETED."
	else
		message "No primary key name fetched for table $mssqlEstimatedExecutionPlanTR. So, skipping altering primary key."
		message "COMPLETED."
	fi
			
#insert data into mssqlEstimatedExecutionPlanTR_<TR> from mssqlreport_<TR>
	mssqlEstimatedExecutionPlanQuery="insert into $mssqlEstimatedExecutionPlanTR(planhandle, startoffset, endoffset, servername, queryplan)  select distinct on(old.planhandle, old.startoffset, old.endoffset, old.sourcedb) old.planhandle, old.startoffset, old.endoffset, old.sourcedb, old.queryplan from $mssqlReportTR old left join $mssqlEstimatedExecutionPlanTR new ON ( old.planhandle, old.startoffset, old.endoffset, old.sourcedb) = (new.planhandle, new.startoffset, new.endoffset, new.servername) where  new.planhandle is null;"
		
	stepMessage "STEP 11:"
	message "Going to insert data into table '$mssqlEstimatedExecutionPlanTR'"
	message "Query : $mssqlEstimatedExecutionPlanQuery"

	sqlCredentials  -c "$mssqlEstimatedExecutionPlanQuery" >/dev/null
	[[ $? != 0 ]] && exitOnErr "ERROR: Unable to insert data from table '$mssqlReportTR' to '$mssqlEstimatedExecutionPlanTR'. So, no migration required."
		
	message "Successfully inserted data from table '$mssqlReportTR' to '$mssqlEstimatedExecutionPlanTR'"
	message "COMPLETED."


#Create primary key on table mssqlEstimatedExecutionPlanTR_<TR>
		
	createMssqlEstimatedExecutionStatsPrimaryKeyQuery="alter table $mssqlEstimatedExecutionPlanTR add PRIMARY KEY (planhandle,startoffset,endOffset,servername);"

	stepMessage "STEP 12:"
	message "Going to create primary key on table '$mssqlEstimatedExecutionPlanTR'."
	message "Query: $createMssqlEstimatedExecutionStatsPrimaryKeyQuery;"
		
	sqlCredentials  -c "$createMssqlEstimatedExecutionStatsPrimaryKeyQuery" >/dev/null
	[[ $? != 0 ]] && exitOnErr "ERROR: Unable to create primary key on table $mssqlEstimatedExecutionPlanTR."

	message "Primary key successful created on table '$mssqlEstimatedExecutionPlanTR'."
	message "Table 'mssqlEstimatedExecutionPlanTR' row count is 0 so skipped STEP 13  to STEP 16."
	message "COMPLETED."

	

#If mssqlexecutionstats_<TR> exist, then fetch primary key for table mssqlexecutionstats_<TR>
	getPrimaryKeyExecutionPlan="select constraint_name from information_schema.key_column_usage where table_name = '$mssqlExecutionStatsTR' and column_name = 'serialno';"
	
	stepMessage "STEP 13:"
	message "Going to fetch primary key name for table '$mssqlExecutionStatsTR'."
	message "Query : $getPrimaryKeyExecutionPlan"
	
	executionStatsPKey=(`sqlCredentials  -c "$getPrimaryKeyExecutionPlan"`)
	[[ $? != 0 ]] && errorMessage "Error: Unable to get primary key name for table '$mssqlExecutionStatsTR'."

	executionStatsPKey=${executionStatsPKey[2]}
	
	if [[ "$executionStatsPKey" =~ "(0" ]]; then
		errorMessage "Primary Key name fetched for table '$mssqlExecutionStatsTR' is empty"
	else
		isPrimaryKeyPresent=1
		message "Primary Key name for table '$mssqlExecutionStatsTR' - $executionStatsPKey."
	fi
	
	message "COMPLETED."

#Fetch number of rows in mssqlexecutionstats_<TR>       
	executionStatCountQuery="select count(*) from $mssqlExecutionStatsTR;"

	stepMessage "STEP 14:"
	message "Fetching number of rows present in table '$mssqlExecutionStatsTR'."
	message "Query : $executionStatCountQuery"

	data=(`sqlCredentials  -c "$executionStatCountQuery"`)
	executionStatsRowCount=${data[2]}

	message "Total row count for table $mssqlExecutionStatsTR is $executionStatsRowCount."
	message "COMPLETED."
	message ""
	
#If mssqlexecutionstats_<TR> row count is 0, then take backup for table mssqlexecutionplan_<TR>
#If primary key exist then, drop primary key and insert data from mssqlreport_<TR> into mssqlestimatedexecutionplan_<TR>
	stepMessage "STEP 15:"
	message "Checking if row count for table '$mssqlExecutionStatsTR' is greater than 0 or not."
	message "If count is greater than 0, then create backup for table '$mssqlExecutionStatsTR'"

	if [ ${executionStatsRowCount:-0} -gt  0 ]; then
		executionBkpTb="$mssqlExecutionStatsTR""_bkp_$currentTime"
		executionTbBackupQuery="select * into $executionBkpTb from $mssqlExecutionStatsTR;"
		
		message "Total count of data in table '$mssqlExecutionStatsTR' is $executionStatsRowCount."
		message "Going to create backup table '$executionBkpTb' for table '$mssqlExecutionStatsTR'."
		
		sqlCredentials -c "$executionTbBackupQuery" >/dev/null
		[[ $? = 0 ]] && message "Successfully created backup table '$executionBkpTb' for '$mssqlExecutionStatsTR'."
		[[ $? != 0 ]] && errorMessage "Error: Unable to create backup table '$executionBkpTb' for table '$mssqlExecutionStatsTR'."
	else
		message "Total count of data in table '$mssqlExecutionStatsTR' is $executionStatsRowCount. So, skipping deletion of backup table for table '$mssqlExecutionStatsTR'"
	fi
	message "COMPLETED."

#Checking if primary key is fetched is blank or not. If it is not blank, then drop primary key.

	stepMessage "STEP 16:"
	message "Check if primary key is present or not."

	if [[ "${executionStatsPKey}" != "(0" ]]; then
		dropMssqlExecutionStatsPrimaryKeyQuery="alter table $mssqlExecutionStatsTR drop constraint $executionStatsPKey;"

		message "Going to drop primary key $executionStatsPKey."
		message "Query: $dropMssqlExecutionStatsPrimaryKeyQuery"

		sqlCredentials  -c "$dropMssqlExecutionStatsPrimaryKeyQuery" >/dev/null
		[[ $? != 0 ]] && exitOnErr "ERROR: Unable to drop primary key '$executionStatsPrimaryKey' from table '$mssqlExecutionStatsTR'."
	
		message "Primary key '$executionStatsPrimaryKey' dropped successfully from table '$mssqlExecutionStatsTR'."
		message "COMPLETED."
	else
		message "Primary key is not present on table '$mssqlExecutionStatsTR'. So, skipping the step 19 to drop primary key."
		message "COMPLETED."
	fi
	
#Insert data into mssqlexecutionstats_TR from mssqlreport_TR
     mssqlExecutionStatsInsertQuery="insert into $mssqlExecutionStatsTR (normmssqlid, totalexecutioncount, totalworkertime, totalelapsedtime, totalphysicalreads, totallogicalreads, totallogicalwrites, totalclrtime, avgworkertime, avgphysicalreads, avglogicalwrites,avglogicalreads,avgclrtime,avgelapsedtime,totalwaittime,lastwaittime,minwaittime,maxwaittime, avgwaittime, planhandle, creationtime, timestamp, databasename,servername, startoffset,endoffset,serialno)  select old.normmssqlid, old.totalexecutioncount, old.totalworkertime, old.totalelapsedtime, old.totalphysicalreads, old.totallogicalreads, old.totallogicalwrites, old.totalclrtime, old.avgworkertime, old.avgphysicalreads, old.avglogicalwrites, old.avglogicalreads, old.avgclrtime, old.avgelapsedtime, old.totalwaittime, old.lastwaittime, old.minwaittime, old.maxwaittime, old.avgwaittime, old.planhandle, old.creationtime, old.timestamp, old.databasename, old.sourcedb, old.startoffset, old.endoffset, old.serialno from $mssqlReportTR old left join $mssqlExecutionStatsTR new on ( old.serialno, old.timestamp) = (new.serialno, new.timestamp) where  new.serialno is null ;"
     
	stepMessage "STEP 17:"
	message "Going to insert data into table '$mssqlExecutionStatsTR'"
	message "Query : $mssqlExecutionStatsInsertQuery"
     
     	sqlCredentials  -c "$mssqlExecutionStatsInsertQuery" >/dev/null
     	[[ $? != 0 ]] && exitOnErr "ERROR: Unable to insert data from table '$mssqlReportTR' to '$mssqlExecutionStatsTR'. So, no migration required."
    
	message "Successfully inserted data from table '$mssqlReportTR' to '$mssqlExecutionStatsTR'"
	message "COMPLETED."

#Create primary key on table mssqlexecutionstats_<TR>
	createMssqlExecutionStatsPrimaryKeyQuery="alter table $mssqlExecutionStatsTR add PRIMARY KEY (serialno,timestamp);"

	stepMessage "STEP 18:"
	message "Going to create primary key on table '$mssqlExecutionStatsTR'."
	message "Query: $createMssqlExecutionStatsPrimaryKeyQuery;"

	sqlCredentials  -c "$createMssqlExecutionStatsPrimaryKeyQuery" >/dev/null
	[[ $? != 0 ]] && exitOnErr "            ERROR:Unable to create primary key on table $mssqlExecutionStatsTR."

	message "Primary key successfully created on table '$mssqlExecutionStatsTR'."
	message "COMPLETED."

	stepMessage "Migration Completed at $(date)"
	message ""
	stepMessage "======================DATA MIGRATION COMPLETED========================"
	message ""
