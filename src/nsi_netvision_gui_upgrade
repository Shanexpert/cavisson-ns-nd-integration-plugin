#! /bin/sh

export IDIR=`pwd`
export LOG_FILE_NAME="$IDIR/upgrade_`date +%m%d%y`.log"
UPGRADE_SPEC_FILE="$IDIR/upgrade.spec"
export NS_VER_SYS=9999999
export NS_VER_BUILD=9999999


# This mthd will log the msgs on the console and in the file as well
msgout_both ()
{
  echo "$1" >>$LOG_FILE_NAME
  echo "$1"
}
export -f msgout_both

set_history_file()
{
  if [ "X$NS_WDIR" = "X" ];then
    msgout_both "NS_WDIR environment variable is not set"
    exit -1
  fi

  REL_DIR=$NS_WDIR/.rel
  if [ ! -d $NS_WDIR/.rel ];then
    mkdir $NS_WDIR/.rel
  fi

  #Must set history file as on error we add enrty in this file
  VERSION_FILE="version.dat"
  VRESION_FILE_WITH_PATH="$REL_DIR/$VERSION_FILE"
}

check_user_id()
{
  USERID=`id -u`
  if [ $USERID -ne 0 ];
  then
    update_history 1 "You need to login as root to do the upgrade"
  fi
}

check_enviorment()
{
  msgout_both "Checking environment variables"
  if [ "X$TOMCAT_DIR" == "X" ];then
    update_history 1 "TOMCAT_DIR environment variable is not set"
  fi


  if [ "X$TOMCAT_CMD" == "X" ];then
    update_history 1 "TOMCAT_CMD environment variable is not set"
  fi
 
  echo "Current dir is $IDIR"
  if [ $IDIR != "$NS_WDIR/upgrade" ];then
    update_history 1 "Current working directory is not $NS_WDIR/upgrade. You must be in $NS_WDIR/upgrade to upgrade build."
  fi

  cd $NS_WDIR
}

update_history()
{
  EXIT_STATUS=$1
  COMMENTS=$2

  if [ $EXIT_STATUS != 0 ];then
    msgout_both "$2"
    msgout_both "Upgrade is not done"
  fi

  GET_DATE=`date +"%F %X"`
  GET_VERSION=`$NS_WDIR/bin/nsu_get_version -n`
  VERSION=`echo "$GET_VERSION" | awk '{print $2" "$3" "$4}'`

  BUILD_NAME=`egrep "^build=" $UPGRADE_SPEC_FILE | awk -F '=' '{print $2}'`

  echo "$VERSION|$BUILD_NAME|$GET_DATE|$EXIT_STATUS|$COMMENTS" >> $VRESION_FILE_WITH_PATH
  # Removing upgrade.spec and nsi_upgrade.sh
  rm -rf $NS_WDIR/upgrade/upgrade.spec $NS_WDIR/upgrade/nsi_upgrade.sh
  exit $EXIT_STATUS
}

cd $NS_WDIR/webapps
if [ `pwd` != "$NS_WDIR/webapps" ];then
  msgout_both "You must be in $NS_WDIR/webapps to execute upgrade cmd"
  exit 1
fi

get_build_file_name()
{
  COMPONENT=$1
  BUILD_FILE_NAME=`egrep "^$COMPONENT=" $UPGRADE_SPEC_FILE | awk -F '=' '{print $2}'`
  if [ "XX$BUILD_FILE_NAME" != "XX" ];then
    if [ ! -f $NS_WDIR/upgrade/$BUILD_FILE_NAME ];then
      update_history 1 "$COMPONENT upgrade can not be completed, build ($BUILD_FILE_NAME) not found in the $NS_WDIR/upgrade directory"
    fi
    # GZ is used by nsi_hpd_upgrade and cmon and it need this in .rel, now it is used by nsi_gui_upgrade as well
    export GZ="$BUILD_FILE_NAME"

    if [ ! -d $NS_WDIR/.rel/ ];then
      mkdir -p $NS_WDIR/.rel
    fi
    
    mv $NS_WDIR/upgrade/$GZ .rel/
    RETURN=$?
    echo "Move cmd returned $RETURN $GZ"
  fi
}

isNetstromRunning() 
{ 
  msgout_both "Checking if any Test is running"
  if [ -f $NS_WDIR/bin/nsu_show_netstorm ];then
    runningTRList=`$NS_WDIR/bin/nsu_show_netstorm|sed /TestRun/d | awk '{print $1}'`
    if [ "X$runningTRList" != "X" ];then
      msgout_both "Test Run(s) are Running"
      if [ "X$STOP_TEST_BEFORE_UPGRADE" == "X1" ]; then
        msgout_both "STOP_TEST_BEFORE_UPGRADE environment var is set to 1. So stopping all running tests"
        tokens=($runningTRList)
        for(( i = 0; i < ${#tokens[@]};))
        do
          msgout_both "Stopping Test - TR${tokens[$i]}"
          nsu_stop_test -f  ${tokens[$i]} -C "nsi_netvision_gui_upgrade"
          if [ $? -ne 0 ];then
           msgout_both "Warning: Unable to Stop Test - TR${tokens[$i]}. Ignored"
          fi
          i=`expr $i + 1`
        done
      else
        update_history 1 "Test Run Number ($runningTRList) are running presently. Please stop test run before doing upgrade."
      fi
    fi
  fi
}

####################################################################################################################################

set_history_file
#check_user_id
check_enviorment

get_build_file_name "netvision"

echo "############################################################" >> $LOG_FILE_NAME
msgout_both "Starting upgrade. Start Date: `date +%m/%d/%y`, Time: `date +%H:%M:%S`"
msgout_both " "

RELEASE_CMD="nsi_get_linux_release_ex"
DISTRO=`$RELEASE_CMD -d`
RELEASE=`$RELEASE_CMD -r`

echo "Below is the $UPGRADE_SPEC_FILE" >> $LOG_FILE_NAME
cat $UPGRADE_SPEC_FILE >> $LOG_FILE_NAME

if [ -f $RELEASE_CMD ];then
  msgout_both "Verifying machine & build compatibility ..."
  DISTRO=`$RELEASE_CMD -d`
  RELEASE=`$RELEASE_CMD -r`
  #exported to be used in nsi_hpd_upgrade
  ARCH_BITS=`$RELEASE_CMD -b`
  NS_RELEASE=${DISTRO}${RELEASE}_${ARCH_BITS}
  export NS_RELEASE
  NS_RELEASE_FROM_SPEC=`egrep "^NS_RELEASE=" $UPGRADE_SPEC_FILE | awk -F '=' '{print $2}'`
  if [ "XX$NS_RELEASE" != "XX$NS_RELEASE_FROM_SPEC" ];then
     update_history 1 "Machine is not compatible with build. You are trying to install $NS_RELEASE_FROM_SPEC build on $NS_RELEASE machine."
  fi

fi

CONTROLLER_TYPE=`nsi_show_config -t`

#TODO change == to =   and put " "
if [ "NV" != "$CONTROLLER_TYPE" ];then
  msgout_both "Error: CONTROLLER_TYPE not NV so aborting !!!"
  exit 1 
fi

isNetstromRunning

cd $NS_WDIR/webapps
msgout_both "Removing directories of old version"
msgout_both "----------------------------------------------------------------"
rm -rf netvision


msgout_both "Uncompressing tar file - $GZ"
tar xvzf $NS_WDIR/.rel/$GZ >> $LOG_FILE_NAME
if [ "$?" != 0 ];then
  msgout_both "Error: Error in uncompressing the $GZ"
  exit 1
fi

 
msgout_both "Making softlink of thirdparty jar files..."
if [ ! -d $NS_WDIR/thirdparty/gui_signed_jars ];then
  msgout_both " "
  msgout_both "Error: Directory gui_signed_jars doesn't exist on the path /home/cavisson/thirdparty/. First install thirdparty and then upgrade the gui build."
    msgout_both "GUI upgradation failed."
  exit 1
fi

#if [ ! -f netstorm/WEB-INF/lib/used_jars.list ];then
 # msgout_both " "
  #msgout_both "Error: File doesn't exist on the path $NS_WDIR/webapps/netstorm/WEB-INF/lib/."
  #msgout_both "GUI upgradation failed."
  #exit 1
#fi

while read line
do
  #jar_name="${Arr_jar[a]}"
  jar_name=`echo $line | awk -F'|' '{printf $1" "}'`
  if [ "X`echo $jar_name | cut -c -1`" = "X#" ];then
    echo "Ignoring line $line." >>$LOG_FILE_NAME
    continue
  fi

  
  echo "Making softlink jar: $jar_name" >>$LOG_FILE_NAME 
  if [ ! -f $NS_WDIR/thirdparty/gui_signed_jars/$jar_name ];then
    msgout_both " "
    msgout_both "Error: jar: $NS_WDIR/thirdparty/gui_signed_jars/$jar_name doesn't exist."
    msgout_both "GUI upgradation failed."
    exit 1
  fi

  
  if [ "cdi-api-1.0.jar" == $jar_name -o "com.fasterxml.jackson.databind.jar" == $jar_name -o "hk2-api-2.4.0-b31.jar" == $jar_name -o "hk2-locator-2.4.0-b31.jar" == $jar_name -o "hk2-utils-2.4.0-b31.jar" == $jar_name -o "jackson-annotations-2.1.2.jar" == $jar_name -o "jackson-core-2.0.0.jar" == $jar_name -o "jackson-jaxrs-base-2.2.3.jar" == $jar_name -o "jackson-jaxrs-json-provider-2.0.2.jar" == $jar_name -o "javax.annotation-api-1.2.jar" == $jar_name -o "javax.inject-2.4.0-b31.jar" == $jar_name -o "javax.json-1.0.2.jar" == $jar_name -o "javax.servlet-api-3.0.1.jar" == $jar_name -o "javax.ws.rs-api-2.0.1.jar" == $jar_name -o "jersey-client.jar" == $jar_name -o "jersey-common.jar" == $jar_name -o "jersey-container-servlet-core.jar" == $jar_name -o "jersey-guava-2.22.1.jar" == $jar_name -o "jersey-media-json-jackson-2.13.jar" == $jar_name -o "jersey-server.jar" == $jar_name -o "jettison-1.3.jar" == $jar_name -o "org.apache.oltu.oauth2.authzserver-0.31.jar" == $jar_name -o "org.apache.oltu.oauth2.client-1.0.0.jar" == $jar_name -o "org.apache.oltu.oauth2.common-0.31.jar" == $jar_name -o "slf4j-simple-1.6.1.jar" == $jar_name -o "validation-api-1.1.0.Final.jar" == $jar_name -o "jcs-1.3.jar" == $jar_name -o "concurrent.jar" == $jar_name ];then
    if [ -d netvision/WEB-INF/lib -a ! -f netvision/WEB-INF/lib/$jar_name ];then
      ln -s $NS_WDIR/thirdparty/gui_signed_jars/$jar_name netvision/WEB-INF/lib/. >> $LOG_FILE_NAME
    fi
    continue
  fi

  if [ "NV" = "$CONTROLLER_TYPE" ];then
    if [ "j2ee_api.jar" != $jar_name -a "javaee-api-5.0.3.jar" != $jar_name -a "servlet-api.jar" != $jar_name -a "slf4j-api-1.5.8.jar" != $jar_name -a "jakarta-poi-2.5.jar" != $jar_name -a "jcs-1.3.jar" != $jar_name -a "concurrent.jar" != $jar_name ];then 
      if [ ! -f netvision/WEB-INF/lib/$jar_name ];then
        ln -s $NS_WDIR/thirdparty/gui_signed_jars/$jar_name netvision/WEB-INF/lib/. >> $LOG_FILE_NAME
        if [ "$?" != 0 ];then
          msgout_both "Error: Error in making softlink thirdparty jar files into netvision/WEB-INF/lib/. Could not make softlink of $jar_name."
          msgout_both "GUI upgradation failed."
          exit 1
        fi
      fi
    fi
  fi
done < netvision/WEB-INF/lib/used_jars.list


if [ "NV" = "$CONTROLLER_TYPE" ];then  
  #Handle to copy icons for events
  if [ ! -d "$NS_WDIR/webapps/eventIcons" ];then
    mkdir -p "$NS_WDIR/webapps/eventIcons"
    chown -R cavisson:cavisson $NS_WDIR/webapps/eventIcons/
    cp -r $NS_WDIR/webapps/netvision/images/eventIcons/* $NS_WDIR/webapps/eventIcons/
  else
    chown -R cavisson:cavisson $NS_WDIR/webapps/eventIcons/
    cp -r $NS_WDIR/webapps/netvision/images/eventIcons/* $NS_WDIR/webapps/eventIcons/
  fi

  #Handle to copy nvConfig js to sys
  if [ ! -f "$NS_WDIR/webapps/sys/nvConfig.js" ];then
    cp $NS_WDIR/webapps/netvision/js/nvConfig.js $NS_WDIR/webapps/sys/
  fi

  #handle to copy cache.ccf to sys
  if [ ! -f $NS_WDIR/webapps/sys/cache.ccf ];then
   echo "Copying cache.ccf file"
   cp $NS_WDIR/webapps/netstorm/config/cache.ccf $NS_WDIR/webapps/sys
  fi
  #Handle to copy Standard customreports to webapps for netvision.
  #Note: This will copy only standard reports.
  if [ ! -d "$NS_WDIR/webapps/reports/customreports" ];then
    mkdir -p $NS_WDIR/webapps/reports/customreports/
    cp $NS_WDIR/webapps/netvision/customreports/*.crq $NS_WDIR/webapps/reports/customreports/
    chown -R cavisson:cavisson $NS_WDIR/webapps/reports/
  else
    rm $NS_WDIR/webapps/reports/customreports/*.crq
    cp $NS_WDIR/webapps/netvision/customreports/*.crq $NS_WDIR/webapps/reports/customreports/
    chown -R cavisson:cavisson $NS_WDIR/webapps/reports/customreports/
  fi

  #Handle to copy template reports
  if [ ! -d "$NS_WDIR/webapps/reports/templatereports" ];then
    mkdir -p $NS_WDIR/webapps/reports/templatereports/datamodel/
    mkdir -p $NS_WDIR/webapps/reports/templatereports/xls/
    cp $NS_WDIR/webapps/netvision/templatereports/datamodel/*.dmcrq $NS_WDIR/webapps/reports/templatereports/datamodel/
    cp $NS_WDIR/webapps/netvision/templatereports/xls/*.xls $NS_WDIR/webapps/reports/templatereports/xls/
    chown -R cavisson:cavisson $NS_WDIR/webapps/reports/templatereports
  else
    cp $NS_WDIR/webapps/netvision/templatereports/datamodel/*.dmcrq $NS_WDIR/webapps/reports/templatereports/datamodel/
    cp $NS_WDIR/webapps/netvision/templatereports/xls/*.xls $NS_WDIR/webapps/reports/templatereports/xls/
    chown -R cavisson:cavisson $NS_WDIR/webapps/reports/templatereports
  fi


  #Handle to copy netstorm bean jar for netvision
  cp $NS_WDIR/webapps/netstorm/WEB-INF/lib/netstorm_bean.jar netvision/WEB-INF/lib/
fi

msgout_both "Cleaning tomcat cache and restarting tomcat in background"

nohup $NS_WDIR/bin/nsi_gui_tomcat_restart >> $LOG_FILE_NAME &

#Softlink created for showing pagedump in netvision
msgout_both "Making softlink of HPD_ROOT"
cd $NS_WDIR/webapps;
rm -f ./hpd;
ln -s $HPD_ROOT

msgout_both "Checking version of all components after upgrade procedure"
$NS_WDIR/bin/nsu_get_version | tee -a $LOG_FILE_NAME

msgout_both "Upgrade completed. End Date: `date +%m/%d/%y`, Time: `date +%H:%M:%S`"

update_history 0 "Upgrade completed successfully"

msgout_both "Removing tar file - $BUILD_FILE_NAME"
rm -f $NS_WDIR/.rel/$BUILD_FILE_NAME
msgout_both "------------------------------------------------------------"

