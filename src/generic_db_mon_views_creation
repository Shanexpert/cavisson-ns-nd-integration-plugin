#!/bin/sh

TRNUM=$1

ISMSSQL=`psql test cavisson -t 2>&1<<+
SELECT EXISTS (
   SELECT FROM pg_tables
   WHERE  schemaname = 'public'
   AND    tablename  = 'mssqlexecutionstat_$TRNUM'
   );
+`

ISPOSTGRES=`psql test cavisson -t 2>&1<<+
SELECT EXISTS (
   SELECT FROM pg_tables
   WHERE  schemaname = 'public'
   AND    tablename  = 'postgresexecutionstat_$TRNUM'
   );
+`
ISMYSQL=`psql test cavisson -t 2>&1<<+
SELECT EXISTS (
   SELECT FROM pg_tables
   WHERE  schemaname = 'public'
   AND    tablename  = 'mysqlexecutionstat_$TRNUM'
   );
+`
ISORACLE=`psql test cavisson -t 2>&1<<+
SELECT EXISTS (
   SELECT FROM pg_tables
   WHERE  schemaname = 'public'
   AND    tablename  = 'oracleexecutionstat_$TRNUM'
   );
+`
ISMONGODB=`psql test cavisson -t 2>&1<<+
SELECT EXISTS (
   SELECT FROM pg_tables
   WHERE  schemaname = 'public'
   AND    tablename  = 'mongodbexecutionstat_$TRNUM'
   );
+`

ISUNION=false
QUERY="DROP VIEW dbmonitoring_executionstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_executionstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT to_char(creationtime :: timestamp, 'yyyy-mm-dd hh24:mi:ss') creationtime,
         report.totalexecutioncount, 
         report.totalworkertime, 
         totalphysicalreads, 
         report.totallogicalreads, 
         report.totallogicalwrites, 
         report.totalelapsedtime, 
         totalclrtime, 
         avglogicalwrites, 
         avgworkertime, 
         avgphysicalreads, 
         avglogicalreads, 
         avgclrtime, 
         avgelapsedtime, 
         report.totalwaittime, 
         report.lastwaittime, 
         report.minwaittime, 
         report.maxwaittime, 
         report.avgwaittime, 
         report.lastexecutiontime, 
        -1::bigint AS userid,
         NULL::text AS username,
         -1::bigint AS dbid,
         -1::bigint AS queryid,
         -1::double precision AS totaltime,
         -1::double precision AS rows,
         -1::bigint AS sharedblockshit,
         -1::bigint AS sharedblocksread,
         -1::bigint AS sharedblocksdirtied,
         -1::bigint AS sharedblockswritten,
         -1::bigint AS localblockshit,
         -1::bigint AS localblocksread,
         -1::bigint AS localblocksdirtied,
         -1::bigint AS localblockswritten,
         -1::bigint AS tempblocksread,
         -1::bigint AS tempblockswritten,
         -1::double precision AS blockreadtime,
         -1::double precision AS blockwritetime,
        NULL::text AS event_name,
        NULL::text AS processlist_host,
        -1::double precision AS sum_lock_time,
        -1::double precision AS sum_errors,
        -1::double precision AS sum_warnings,
        -1::double precision AS sum_rows_affected,
        -1::double precision AS sum_rows_examined,
        -1::double precision AS sum_created_tmp_disk_tables,
        -1::double precision AS sum_created_tmp_tables,
        -1::double precision AS sum_select_full_join,
        -1::double precision AS sum_select_full_range_join,
        -1::double precision AS sum_select_range,
        -1::double precision AS sum_select_range_check,
        -1::double precision AS sum_select_scan,
        -1::double precision AS sum_sort_merge_passes,
        -1::double precision AS sum_sort_range,
        -1::double precision AS sum_sort_rows,
        -1::double precision AS sum_sort_scan,
        -1::double precision AS sum_no_index_used,
        -1::double precision AS sum_no_good_index_used,
	NULL::text as "rowseffecteddetail",
	NULL::text as "originatingcommand",
		-1::bigint as "keysexamined" ,
		-1::bigint  as "docsexamined",
		NULL::text as "hassortstage",
		NULL::text as "upsert",
		NULL::text as "frommultiplanner",
		NULL::text as "replanned",
		-1::bigint  as "keyinserted",
		-1::bigint  as "keydeleted",
		NULL::text as "useddisk",
		-1::bigint  as "documentReturned",
		-1::bigint as "responseLength",
		NULL::text as "protocol",
		NULL::text as "planSummary",
		-1::bigint  as "numYeild",
		NULL::text as "application",
		-1::bigint  as "writeConflicts",
		-1::bigint  as "schemaLockWaitTime",
		-1::bigint as "dataHandleLockWaitTime",
		-1::bigint as "readRytes",
		-1::bigint as "diskReadingTime",
		-1::bigint as "writtenBytes",
         parent.timestamp,
         planhandlemeta.planhandle, 
         report.dbname AS databasename,
         source.servername   AS sourcedb, 
         source.globalid, 
         planhandlemeta.startoffset, 
         planhandlemeta.endoffset, 
         planhandlemeta.planid, 
         querymeta.sqlid     AS normmssqlid, 
         parent.serialno, 
         querymeta.sqlhandle AS sqlhandler, 
         querymeta.query     AS sqlquery 
  FROM   parentexecutionstat_$TRNUM AS parent
         LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
         LEFT JOIN planidmeta_$TRNUM AS planhandlemeta USING (planid, globalid)
         LEFT JOIN dbsourcemeta_$TRNUM AS source  USING (globalid)
         RIGHT JOIN mssqlexecutionstat_$TRNUM AS report USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISPOSTGRES = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT NULL::text AS creationtime,
         preport.calls AS totalexecutioncount, 
         -1::bigint AS totalworkertime, 
         -1::bigint AS totalphysicalreads, 
         -1::bigint AS totallogicalreads, 
         -1::bigint AS totallogicalwrites, 
         -1::double precision AS totalelapsedtime, 
         -1::bigint AS totalclrtime, 
         -1::bigint AS avglogicalwrites, 
         -1::bigint AS avgworkertime, 
         -1::bigint AS avgphysicalreads, 
         -1::bigint AS avglogicalreads, 
         -1::bigint AS avgclrtime, 
         -1::bigint AS avgelapsedtime, 
         -1::double precision AS totalwaittime, 
         -1::double precision AS lastwaittime, 
         -1::double precision AS minwaittime, 
         -1::double precision AS maxwaittime, 
         -1::double precision AS avgwaittime, 
         NULL::text AS lastexecutiontime, 
        preport.userid,
         preport.username,
         preport.dbid,
         preport.queryid,
         preport.totaltime * 1000 totaltime,
         preport.rows,
         preport.sharedblockshit,
         preport.sharedblocksread,
         preport.sharedblocksdirtied,
         preport.sharedblockswritten,
         preport.localblockshit,
         preport.localblocksread,
         preport.localblocksdirtied,
         preport.localblockswritten,
         preport.tempblocksread,
         preport.tempblockswritten,
         preport.blockreadtime,
         preport.blockwritetime,
        NULL::text AS event_name,
        NULL::text AS processlist_host,
        -1::double precision AS sum_lock_time,
        -1::double precision AS sum_errors,
        -1::double precision AS sum_warnings,
        -1::double precision AS sum_rows_affected,
        -1::double precision AS sum_rows_examined,
        -1::double precision AS sum_created_tmp_disk_tables,
        -1::double precision AS sum_created_tmp_tables,
        -1::double precision AS sum_select_full_join,
        -1::double precision AS sum_select_full_range_join,
        -1::double precision AS sum_select_range,
        -1::double precision AS sum_select_range_check,
        -1::double precision AS sum_select_scan,
        -1::double precision AS sum_sort_merge_passes,
        -1::double precision AS sum_sort_range,
        -1::double precision AS sum_sort_rows,
        -1::double precision AS sum_sort_scan,
        -1::double precision AS sum_no_index_used,
        -1::double precision AS sum_no_good_index_used,
	NULL::text as "rowseffecteddetail",
	NULL::text as "originatingcommand",
		-1::bigint as "keysexamined" ,
		-1::bigint  as "docsexamined",
		NULL::text as "hassortstage",
		NULL::text as "upsert",
		NULL::text as "frommultiplanner",
		NULL::text as "replanned",
		-1::bigint  as "keyinserted",
		-1::bigint  as "keydeleted",
		NULL::text as "useddisk",
		-1::bigint  as "documentReturned",
		-1::bigint as "responseLength",
		NULL::text as "protocol",
		NULL::text as "planSummary",
		-1::bigint  as "numYeild",
		NULL::text as "application",
		-1::bigint  as "writeConflicts",
		-1::bigint  as "schemaLockWaitTime",
		-1::bigint as "dataHandleLockWaitTime",
		-1::bigint as "readRytes",
		-1::bigint as "diskReadingTime",
		-1::bigint as "writtenBytes",
         parent.timestamp,
         planhandlemeta.planhandle, 
         preport.datname AS databasename,
         source.servername   AS sourcedb, 
         source.globalid, 
         planhandlemeta.startoffset, 
         planhandlemeta.endoffset, 
         planhandlemeta.planid, 
         querymeta.sqlid     AS normmssqlid, 
         parent.serialno, 
         querymeta.sqlhandle AS sqlhandler, 
         querymeta.query     AS sqlquery 
  FROM   parentexecutionstat_$TRNUM AS parent
         LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
         LEFT JOIN planidmeta_$TRNUM AS planhandlemeta USING (planid, globalid)
         LEFT JOIN dbsourcemeta_$TRNUM AS source  USING (globalid)
         RIGHT JOIN postgresexecutionstat_$TRNUM AS preport USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISMYSQL = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT mreport.first_seen AS creationtime,
         mreport.count_star AS totalexecutioncount, 
         -1::bigint AS totalworkertime, 
         -1::bigint AS totalphysicalreads, 
         -1::bigint AS totallogicalreads, 
         -1::bigint AS totallogicalwrites, 
         mreport.timer_wait/(10^6) AS totalelapsedtime, 
         -1::bigint AS totalclrtime, 
         -1::bigint AS avglogicalwrites, 
         -1::bigint AS avgworkertime, 
         -1::bigint AS avgphysicalreads, 
         -1::bigint AS avglogicalreads, 
         -1::bigint AS avgclrtime, 
         -1::bigint AS avgelapsedtime, 
         mreport.sum_timer_wait/(10^6) AS totalwaittime, 
         mreport.timer_wait/(10^6) AS lastwaittime, 
         mreport.min_timer_wait/(10^6) AS minwaittime, 
         mreport.max_timer_wait/(10^6) AS maxwaittime, 
         mreport.avg_timer_wait/(10^6) AS avgwaittime, 
         mreport.last_seen AS lastexecutiontime,
         -1::bigint AS userid,
         mreport.processlist_user AS username,
         -1::bigint AS dbid,
         -1::bigint AS queryid,
         -1::double precision AS totaltime,
         mreport.sum_rows_sent AS rows,
         -1::bigint AS sharedblockshit,
         -1::bigint AS sharedblocksread,
         -1::bigint AS sharedblocksdirtied,
         -1::bigint AS sharedblockswritten,
         -1::bigint AS localblockshit,
         -1::bigint AS localblocksread,
         -1::bigint AS localblocksdirtied,
         -1::bigint AS localblockswritten,
         -1::bigint AS tempblocksread,
         -1::bigint AS tempblockswritten,
         -1::double precision AS blockreadtime,
         -1::double precision AS blockwritetime,
        mreport.event_name,
        mreport.processlist_host,
        mreport.sum_lock_time/(10^6) sum_lock_time,
        mreport.sum_errors,
        mreport.sum_warnings,
        mreport.sum_rows_affected,
        mreport.sum_rows_examined,
        mreport.sum_created_tmp_disk_tables,
        mreport.sum_created_tmp_tables,
        mreport.sum_select_full_join,
        mreport.sum_select_full_range_join,
        mreport.sum_select_range,
        mreport.sum_select_range_check,
        mreport.sum_select_scan,
        mreport.sum_sort_merge_passes,
        mreport.sum_sort_range,
        mreport.sum_sort_rows,
        mreport.sum_sort_scan,
        mreport.sum_no_index_used,
        mreport.sum_no_good_index_used,
	NULL::text as "rowseffecteddetail",
	NULL::text as "originatingcommand",
		-1::bigint as "keysexamined" ,
		-1::bigint  as "docsexamined",
		NULL::text as "hassortstage",
		NULL::text as "upsert",
		NULL::text as "frommultiplanner",
		NULL::text as "replanned",
		-1::bigint  as "keyinserted",
		-1::bigint  as "keydeleted",
		NULL::text as "useddisk",
		-1::bigint  as "documentReturned",
		-1::bigint as "responseLength",
		NULL::text as "protocol",
		NULL::text as "planSummary",
		-1::bigint  as "numYeild",
		NULL::text as "application",
		-1::bigint  as "writeConflicts",
		-1::bigint  as "schemaLockWaitTime",
		-1::bigint as "dataHandleLockWaitTime",
		-1::bigint as "readRytes",
		-1::bigint as "diskReadingTime",
		-1::bigint as "writtenBytes",
         parent.timestamp,
         planhandlemeta.planhandle, 
         mreport.curr_schema AS databasename,
         source.servername   AS sourcedb, 
         source.globalid, 
         planhandlemeta.startoffset, 
         planhandlemeta.endoffset, 
         planhandlemeta.planid, 
         querymeta.sqlid     AS normmssqlid, 
         parent.serialno, 
         querymeta.sqlhandle AS sqlhandler, 
         querymeta.query     AS sqlquery 
  FROM   parentexecutionstat_$TRNUM AS parent
         LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
         LEFT JOIN planidmeta_$TRNUM AS planhandlemeta USING (planid, globalid)
         LEFT JOIN dbsourcemeta_$TRNUM AS source  USING (globalid)
         RIGHT JOIN mysqlexecutionstat_$TRNUM AS mreport USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT oreport.firsttimeload AS creationtime,
         oreport.executions AS totalexecutioncount, 
         oreport.cputime AS totalworkertime, 
         -1::bigint AS totalphysicalreads,
         oreport.diskreads AS totallogicalreads, 
         oreport.directwrites AS totallogicalwrites, 
         oreport.elapsedtime/(10^6) AS totalelapsedtime, 
         -1::bigint AS totalclrtime, 
         -1::bigint AS avglogicalwrites, 
         -1::bigint AS avgworkertime, 
         -1::bigint AS avgphysicalreads, 
         -1::bigint AS avglogicalreads, 
         -1::bigint AS avgclrtime, 
         -1::bigint AS avgelapsedtime, 
         oreport.applicationwaittime/(10^6) AS totalwaittime, 
         -1::double precision AS lastwaittime, 
         oreport.concurrencywaittime/(10^6) AS minwaittime, 
         oreport.clusterwaittime/(10^6) AS maxwaittime, 
         oreport.useriowaittime/(10^6) AS avgwaittime, 
         oreport.lastactivetime AS lastexecutiontime, 
        -1::bigint AS userid,
         NULL::text AS username,
         -1::bigint AS dbid,
         -1::bigint AS queryid,
         -1::double precision AS totaltime,
         oreport.rowsprocessed AS rows,
         -1::bigint AS sharedblockshit,
         oreport.buffergets AS sharedblocksread,
         -1::bigint AS sharedblocksdirtied,
         oreport.shareablememory AS sharedblockswritten,
         -1::bigint AS localblockshit,
         -1::bigint AS localblocksread,
         -1::bigint AS localblocksdirtied,
         oreport.persistentmemory AS localblockswritten,
         -1::bigint AS tempblocksread,
         oreport.runtimememory AS tempblockswritten,
         -1::double precision AS blockreadtime,
         -1::double precision AS blockwritetime,
        oreport.service AS event_name,
        oreport.module AS processlist_host,
        -1::double precision AS sum_lock_time,
        -1::double precision AS sum_errors,
        -1::double precision AS sum_warnings,
        oreport.fetches AS sum_rows_affected,
        oreport.loads AS sum_rows_examined,
        -1::double precision AS sum_created_tmp_disk_tables,
        -1::double precision AS sum_created_tmp_tables,
        -1::double precision AS sum_select_full_join,
        -1::double precision AS sum_select_full_range_join,
        -1::double precision AS sum_select_range,
        -1::double precision AS sum_select_range_check,
        oreport.parsecalls AS sum_select_scan,
        -1::double precision AS sum_sort_merge_passes,
        -1::double precision AS sum_sort_range,
        -1::double precision AS sum_sort_rows,
        oreport.sorts AS sum_sort_scan,
        -1::double precision AS sum_no_index_used,
        -1::double precision AS sum_no_good_index_used,	
	NULL::text as "rowseffecteddetail",
	NULL::text as "originatingcommand",
		-1::bigint as "keysexamined" ,
		-1::bigint  as "docsexamined",
		NULL::text as "hassortstage",
		NULL::text as "upsert",
		NULL::text as "frommultiplanner",
		NULL::text as "replanned",
		-1::bigint  as "keyinserted",
		-1::bigint  as "keydeleted",
		NULL::text as "useddisk",
		-1::bigint  as "documentReturned",
		-1::bigint as "responseLength",
		NULL::text as "protocol",
		NULL::text as "planSummary",
		-1::bigint  as "numYeild",
		NULL::text as "application",
		-1::bigint  as "writeConflicts",
		-1::bigint  as "schemaLockWaitTime",
		-1::bigint as "dataHandleLockWaitTime",
		-1::bigint as "readRytes",
		-1::bigint as "diskReadingTime",
		-1::bigint as "writtenBytes",
         parent.timestamp,
         planhandlemeta.planhandle, 
         oreport.parsingschemaname AS databasename,
         source.servername   AS sourcedb, 
         source.globalid, 
         planhandlemeta.startoffset, 
         planhandlemeta.endoffset, 
         planhandlemeta.planid, 
         querymeta.sqlid     AS normmssqlid, 
         parent.serialno, 
         querymeta.sqlhandle AS sqlhandler, 
         querymeta.query     AS sqlquery 
  FROM   parentexecutionstat_$TRNUM AS parent
         LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
         LEFT JOIN planidmeta_$TRNUM AS planhandlemeta USING (planid, globalid)
         LEFT JOIN dbsourcemeta_$TRNUM AS source  USING (globalid)
         RIGHT JOIN oracleexecutionstat_$TRNUM AS oreport USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISMONGODB = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
		QUERY="$QUERY SELECT NULL::text AS creationtime,
		 -1::double precision AS totalexecutioncount,
         -1::bigint AS totalworkertime,
         -1::bigint AS totalphysicalreads,
         -1::bigint AS totallogicalreads,
         -1::bigint AS totallogicalwrites,
         -1::double precision AS totalelapsedtime,
         -1::bigint AS totalclrtime,
         -1::bigint AS avglogicalwrites,
         -1::bigint AS avgworkertime,
         -1::bigint AS avgphysicalreads,
         -1::bigint AS avglogicalreads,
         -1::bigint AS avgclrtime,
         -1::bigint AS avgelapsedtime,
         -1::double precision AS totalwaittime,
         -1::double precision AS lastwaittime,
         -1::double precision AS minwaittime,
         -1::double precision AS maxwaittime,
         -1::double precision AS avgwaittime,
	to_char(lastexecutiontime :: timestamp, 'yyyy-mm-dd hh24:mi:ss.ms') lastexecutiontime,
		 -1::bigint AS userid,
		 mongo.username,
		 -1::bigint AS dbid,
		 mongo.queryid,
		 mongo.totaltime,
		 -1::double precision AS rows,
         -1::bigint AS sharedblockshit,
         -1::bigint AS sharedblocksread,
         -1::bigint AS sharedblocksdirtied,
         -1::bigint AS sharedblockswritten,
         -1::bigint AS localblockshit,
         -1::bigint AS localblocksread,
         -1::bigint AS localblocksdirtied,
         -1::bigint AS localblockswritten,
         -1::bigint AS tempblocksread,
		 -1::bigint AS tempblockswritten,
		 mongo.blockreadtime,
		mongo.blockwritetime,
		mongo.event_name,
		mongo.processlist_host,
		  -1::double precision AS sum_lock_time,
        -1::double precision AS sum_errors,
        -1::double precision AS sum_warnings,
        -1::double precision AS sum_rows_affected,
        -1::double precision AS sum_rows_examined,
        -1::double precision AS sum_created_tmp_disk_tables,
		-1::double precision AS sum_created_tmp_tables,
        -1::double precision AS sum_select_full_join,
        -1::double precision AS sum_select_full_range_join,
        -1::double precision AS sum_select_range,
        -1::double precision AS sum_select_range_check,
        -1::double precision AS sum_select_scan,
        -1::double precision AS sum_sort_merge_passes,
        -1::double precision AS sum_sort_range,
        -1::double precision AS sum_sort_rows,
        -1::double precision AS sum_sort_scan,
        -1::double precision AS sum_no_index_used,
        -1::double precision AS sum_no_good_index_used,
		'Deleted='|| mongo.ndeleted || ', Inserted=' || mongo.ninserted || ', Modified=' || mongo.nModified || ', Matched=' || mongo.nMatched as "rowseffecteddetail",
		mongo.originatingCommand as "originatingcommand",
		mongo.keysExamined as "keysexamined" ,
		mongo.docsExamined as "docsexamined",
		mongo.hasSortstage as "hassortstage",
		mongo.upsert as "upsert",
		mongo.fromMultiPlanner as "frommultiplanner",
		mongo.replanned as "replanned",
		mongo.keysInserted as "keyinserted",
		mongo.keysDeleted as "keydeleted",
		mongo.usedDisk as useddisk,
		mongo.nreturned as "documentReturned",
		mongo.responseLength as "responseLength",
		mongo.protocol as "protocol",
		mongo.planSummary as "planSummary",
		mongo.numYield as "numYeild",
		mongo.appname as "application",
		mongo.writeConflicts as "writeConflicts",
		mongo.schemaLock as "schemaLockWaitTime",
		mongo.handleLock as "dataHandleLockWaitTime",
		mongo.bytesRead as "readRytes",
		mongo.timeReadingMicros as "diskReadingTime",
		mongo.bytesWritten as "writtenBytes",
        parent.timestamp,
		mongo.planhandle,
		mongo.databasename,
		source.servername as sourcedb,
        source.globalid,
         0::bigint AS startoffset,
         0::bigint AS endoffset,
         -1::bigint AS planid,
         querymeta.sqlid AS normmssqlid,
		parent.serialno,
        querymeta.sqlhandle as sqlhandler,
		querymeta.query AS sqlquery
 FROM   parentexecutionstat_$TRNUM AS parent
         LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
         LEFT JOIN dbsourcemeta_$TRNUM AS source  USING (globalid)
         RIGHT JOIN (select (alldata#>>'{ts,\$date}') as "lastexecutiontime",
				alldata->>'user' as "username",
				coalesce(alldata->>'cursorid','-123456789')::double precision::bigint as "queryid",
				coalesce(alldata->>'millis','-123456789')::double precision as "totaltime",
				coalesce(alldata#>>'{storage,data,timeWritingMicros,\$numberLong}','-123456789')::double precision as "blockreadtime",
				coalesce(alldata#>>'{storage,timeWaitingMicros,cache,\$numberLong}','-123456789')::double precision as "blockwritetime",
				alldata->>'op' as "event_name",
				alldata->>'client' as "processlist_host",
				alldata->>'replanReason' as "planhandle",
				alldata->>'ns' as "databasename",
				alldata->>'command' as "sqlquery",
				alldata->>'originatingCommand' as "originatingcommand",
				coalesce(alldata->>'keysExamined','-123456789')::bigint as "keysexamined",
				coalesce(alldata->>'docsExamined','-123456789')::bigint as "docsexamined",
				alldata->>'hasSortStage' as "hassortstage",
				coalesce(alldata->>'ndeleted','-123456789')::bigint as "ndeleted",
				coalesce(alldata->>'ninserted','-123456789')::bigint as "ninserted",
				coalesce(alldata->>'nMatched','-123456789')::bigint as "nmatched",
				coalesce(alldata->>'nModified','-123456789')::bigint as "nmodified",
				alldata->>'upsert' as "upsert",
				alldata->>'fromMultiPlanner' as "frommultiplanner",
				alldata->>'replanned' as "replanned",
				coalesce(alldata->>'keysInserted','-123456789')::bigint as "keysinserted",
				coalesce(alldata->>'keysDeleted','-123456789')::bigint as "keysdeleted",
				alldata->>'usedDisk' as "useddisk",
				coalesce(alldata->>'nreturned','-123456789')::bigint as "nreturned",
				coalesce(alldata->>'responseLength','-123456789')::bigint as "responselength",
				alldata->>'protocol' as "protocol",
				alldata->>'planSummary' as "plansummary",
				coalesce(alldata->>'numYield','-123456789')::bigint as "numyield",
				alldata->>'appname' as "appname",
				coalesce(alldata->>'writeConflicts','-123456789')::bigint as "writeconflicts",
				coalesce(alldata#>>'{storage,timeWaitingMicros,schemaLock}','-123456789')::bigint as "schemalock",
				coalesce(alldata#>>'{storage,timeWaitingMicros,handleLock}','-123456789')::bigint as "handlelock",
				coalesce(alldata#>>'{storage,data,bytesRead}','-123456789')::bigint as "bytesread",
				coalesce(alldata#>>'{storage,data,timeReadingMicros}','-123456789')::bigint as "timereadingmicros",
				coalesce(alldata#>>'{storage,data,bytesWritten}','-123456789')::bigint as "byteswritten",
				serialno,
				timestamp
				FROM (select replace(convert_from(decode(mainresult,'base64'),'UTF-8'),'<Binary Data>','0')::json as alldata, serialno, timestamp from mongodbexecutionstat_$TRNUM) as mongodata) mongo USING (serialno, "timestamp")"
				ISUNION=true
	fi

if [ $ISUNION = false ]
then
        QUERY="$QUERY SELECT NULL::text AS creationtime,
         -1::double precision AS totalexecutioncount, 
         -1::bigint AS totalworkertime, 
         -1::bigint AS totalphysicalreads, 
         -1::bigint AS totallogicalreads, 
         -1::bigint AS totallogicalwrites, 
         -1::double precision AS totalelapsedtime, 
         -1::bigint AS totalclrtime, 
         -1::bigint AS avglogicalwrites, 
         -1::bigint AS avgworkertime, 
         -1::bigint AS avgphysicalreads, 
         -1::bigint AS avglogicalreads, 
         -1::bigint AS avgclrtime, 
         -1::bigint AS avgelapsedtime, 
         -1::double precision AS totalwaittime, 
         -1::double precision AS lastwaittime, 
         -1::double precision AS minwaittime, 
         -1::double precision AS maxwaittime, 
         -1::double precision AS avgwaittime, 
         NULL::text AS lastexecutiontime, 
        -1::bigint AS userid,
         NULL::text AS username,
         -1::bigint AS dbid,
         -1::bigint AS queryid,
         -1::double precision AS totaltime,
         -1::double precision AS rows,
         -1::bigint AS sharedblockshit,
         -1::bigint AS sharedblocksread,
         -1::bigint AS sharedblocksdirtied,
         -1::bigint AS sharedblockswritten,
         -1::bigint AS localblockshit,
         -1::bigint AS localblocksread,
         -1::bigint AS localblocksdirtied,
         -1::bigint AS localblockswritten,
         -1::bigint AS tempblocksread,
         -1::bigint AS tempblockswritten,
         -1::double precision AS blockreadtime,
         -1::double precision AS blockwritetime,
        NULL::text AS event_name,
        NULL::text AS processlist_host,
        -1::double precision AS sum_lock_time,
        -1::double precision AS sum_errors,
        -1::double precision AS sum_warnings,
        -1::double precision AS sum_rows_affected,
        -1::double precision AS sum_rows_examined,
        -1::double precision AS sum_created_tmp_disk_tables,
        -1::double precision AS sum_created_tmp_tables,
        -1::double precision AS sum_select_full_join,
        -1::double precision AS sum_select_full_range_join,
        -1::double precision AS sum_select_range,
        -1::double precision AS sum_select_range_check,
        -1::double precision AS sum_select_scan,
        -1::double precision AS sum_sort_merge_passes,
        -1::double precision AS sum_sort_range,
        -1::double precision AS sum_sort_rows,
        -1::double precision AS sum_sort_scan,
        -1::double precision AS sum_no_index_used,
        -1::double precision AS sum_no_good_index_used,	
	NULL::text as "rowseffecteddetail",
	NULL::text as "originatingcommand",
		-1::bigint as "keysexamined" ,
		-1::bigint  as "docsexamined",
		NULL::text as "hassortstage",
		NULL::text as "upsert",
		NULL::text as "frommultiplanner",
		NULL::text as "replanned",
		-1::bigint  as "keyinserted",
		-1::bigint  as "keydeleted",
		NULL::text as "useddisk",
		-1::bigint  as "documentReturned",
		-1::bigint as "responseLength",
		NULL::text as "protocol",
		NULL::text as "planSummary",
		-1::bigint  as "numYeild",
		NULL::text as "application",
		-1::bigint  as "writeConflicts",
		-1::bigint  as "schemaLockWaitTime",
		-1::bigint as "dataHandleLockWaitTime",
		-1::bigint as "readRytes",
		-1::bigint as "diskReadingTime",
		-1::bigint as "writtenBytes",
         -1::bigint AS timestamp,
         NULL::text AS planhandle, 
         NULL::text AS databasename,
         NULL::text AS sourcedb, 
         -1::bigint AS globalid, 
         -1::bigint AS startoffset, 
         -1::bigint AS endoffset, 
         -1::bigint AS planid, 
         -1::bigint AS normmssqlid, 
         -1::bigint AS serialno, 
         NULL::text AS sqlhandler, 
         NULL::text AS sqlquery"
fi

ISUNION=false
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY; DROP VIEW dbmonitoring_executionplan_$TRNUM;
	CREATE OR replace VIEW dbmonitoring_executionplan_$TRNUM 
	AS SELECT planmeta.executionplan   AS PLAN,
       actualplan.executionplan AS actualplan,
       actualplan.eventtime,
       planhandlemeta.sqlhandle,
       planhandlemeta.planhandle,
       planhandlemeta.startoffset,
       planhandlemeta.endoffset,
       planhandlemeta.globalid
FROM   planidmeta_$TRNUM planhandlemeta
       LEFT JOIN estimatedplanmeta_$TRNUM planmeta using (planid)
       LEFT JOIN parentactualexecutionplanstat_$TRNUM p using (globalid)
       LEFT JOIN mssqlactualexecutionplanstat_$TRNUM actualplan using (planhandle, startoffset, endoffset, sqlhandle, serialno, "timestamp")"
elif [ $ISPOSTGRES = t ]
then
	QUERY="$QUERY; DROP VIEW dbmonitoring_executionplan_$TRNUM;
        CREATE OR replace VIEW dbmonitoring_executionplan_$TRNUM 
        AS  SELECT planmeta.executionplan   AS PLAN,
       NULL::text AS actualplan,
       NULL::text AS eventtime,
       planhandlemeta.sqlhandle,
       planhandlemeta.planhandle,
       planhandlemeta.startoffset,
       planhandlemeta.endoffset,
       planhandlemeta.globalid
FROM   planidmeta_$TRNUM planhandlemeta
       LEFT JOIN estimatedplanmeta_$TRNUM planmeta using (planid)"
elif [ $ISMONGODB = t ]
then
        QUERY="$QUERY; DROP VIEW dbmonitoring_executionplan_$TRNUM;
        CREATE OR replace VIEW dbmonitoring_executionplan_$TRNUM
        AS  SELECT mongo.plan,
       	NULL::text AS actualplan,
	NULL::text AS eventtime,
       	querymeta.sqlhandle,
       	NULL::text AS planhandle,
       0::bigint AS startoffset,
       0::bigint AS endoffset,
       	source.globalid
	FROM   parentexecutionstat_$TRNUM AS parent
         LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
         LEFT JOIN dbsourcemeta_$TRNUM AS source  USING (globalid)
         RIGHT JOIN (select coalesce(alldata::json->> 'execStats','') as "plan",
                                serialno,
                                timestamp
                                FROM (select replace(convert_from(decode(mainresult,'base64'),'UTF-8'),'<Binary Data>','0')::json as alldata, serialno, timestamp from mongodbexecutionstat_$TRNUM) as mongodata) mongo USING (serialno, "timestamp") where plan != ''"
fi

ISUNION=false
if [ $ISORACLE = f ]
then
        QUERY="$QUERY; CREATE OR replace VIEW oracleestimatedexecutionplanstat_$TRNUM 
		AS SELECT NULL::text AS operation,
		NULL::text AS options,
		NULL::text AS objectname,
		NULL::text AS objectalias,
		NULL::text AS objecttype,
		-1::bigint AS id,
		-1::bigint AS parentid,
		-1::bigint AS depth,
		-1::double precision AS position,
		-1::double precision AS cost,
		-1::double precision AS cardinality,
		-1::double precision AS bytes,
		-1::double precision AS cpucost,
		-1::double precision AS iocost,
		-1::double precision AS tempspace,
		NULL::text AS accesspredicates,
		NULL::text AS filterpredicates,
		NULL::text AS projection,
		NULL::text AS plantimestamp,
		NULL::text AS sqlhandle,
		-1::bigint AS serialno,
		-1::bigint AS timestamp"
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_waitstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_waitstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT c.waittype, 
         c.waittime, 
         c.maxwaittime, 
         s.globalid, 
         s.servername, 
         c.category, 
         c.waitingtimecount AS waitingtime_count, 
         c.signalwaittime, 
         c.waittimerate, 
         c.serialno, 
         c."timestamp" 
  FROM   parentwaitstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join mssqlwaitstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT NULL::text AS waittype,
			-1::bigint AS waittime,
			-1::bigint AS maxwaittime,
			-1::bigint AS globalid,
			NULL::text AS servername,
			NULL::text AS category,
			-1::bigint AS waitingtime_count,
			-1::bigint AS signalwaittime,
			-1::double precision AS waittimerate,
			-1::bigint AS serialno,
			-1::bigint AS timestamp"
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_sessionstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_sessionstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT c.dbname AS databasename,
		c.sessionid,
		c.status,
		c.command,
		c.memory,
		c.reads,
		c.writes,
		c.totalcpu,
		c.logintime,
		c.query as sqlquery,
		s.globalid,
		s.servername,
		c.sqluser,
		c.blockedby,
		c.logicalreads,
		c.totalio,
		c.totallogicalreads,
		c.totalreads,
		c.totalwrites,
		c.currentwaittime,
		c.lastwaittype,
		c.lastwaitresource,
		c.lastbatchtime,
		c.transcount AS opentranscount,
		c.programname,
		c.hostname,
		c.hostprocess,
		c.netaddress,
		c.netlibarary,
		c.requestid,
		c.totalelaspsedtime,
		c.windomain,
		c.winuser,
		c.planhandle,
		c.sqlhandle AS sqlhandler,
		c.startoffset,
		NULL::text AS applicationname,
		-1::bigint AS clientport,
		NULL::character varying AS xactstart,
		NULL::character varying AS querystarttime,
		NULL::character varying AS statechangetime,
		NULL::boolean AS waiting,
		-1::integer AS duration,
		NULL::character varying AS operationType,
        -1::bigint AS totalExecutionTime,
        -1::bigint AS transactionExecutionTime,
        -1::bigint AS transactionActiveTime,
        -1::bigint AS transactionInActiveTime,
        -1::bigint AS shardsParticipating,
        NULL::character varying AS shardsParticipants,
        -1::bigint AS  cursorDocumentsReturned,
		-1::bigint AS cursorBatchReturned,
		-1::bigint AS prepareReadConflicts,
		-1::bigint AS writeConflicts,
		-1::bigint AS numYields,
		NULL::character varying AS flowControl,
		p.serialno,
		p."timestamp"
	FROM parentsessionstat_$TRNUM p
	LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
	RIGHT JOIN mssqlsessionstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISPOSTGRES = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT ps.datname AS databasename,
		ps.pid AS sessionid,
		ps.state AS status,
		NULL::character varying AS command,
		-1::bigint AS memory,
		-1::bigint AS reads,
		-1::bigint AS writes,
		-1::bigint AS totalcpu,
		ps.backentstart AS logintime,
		ps.query AS sqlquery,
		s.globalid,
		s.servername,
		ps.username AS sqluser,
		-1::bigint AS blockedby,
		-1::bigint AS logicalreads,
		-1::bigint AS totalio,
		-1::bigint AS totallogicalreads,
		-1::bigint AS totalreads,
		-1::bigint AS totalwrites,
		-1::bigint AS currentwaittime,
		NULL::character varying AS lastwaittype,
		NULL::character varying AS lastwaitresource,
		NULL::character varying AS lastbatchtime,
		-1::bigint AS opentranscount,
		NULL::character varying AS programname,
		ps.clienthost AS hostname,
		-1::bigint AS hostprocess,
		ps.clientaddress AS netaddress,
		NULL::character varying AS netlibarary,
		-1::bigint AS requestid,
		-1::bigint AS totalelaspsedtime,
		NULL::character varying AS windomain,
		NULL::character varying AS winuser,
		NULL::character varying AS planhandle,
		ps.sqlhandle AS sqlhandler,
		-1::bigint AS startoffset,
		ps.applicationname,
		ps.clientport,
		ps.xactstart,
		ps.querystarttime,
		ps.statechangetime,
		ps.waiting,
		-1::integer AS duration,
		NULL::character varying AS operationType,
        -1::bigint AS totalExecutionTime,
        -1::bigint AS transactionExecutionTime,
        -1::bigint AS transactionActiveTime,
        -1::bigint AS transactionInActiveTime,
        -1::bigint AS shardsParticipating,
        NULL::character varying AS shardsParticipants,
        -1::bigint AS  cursorDocumentsReturned,
		-1::bigint AS cursorBatchReturned,
		-1::bigint AS prepareReadConflicts,
		-1::bigint AS writeConflicts,
		-1::bigint AS numYields,
		NULL::character varying AS flowControl,
		p.serialno,
		p."timestamp"
	FROM parentsessionstat_$TRNUM p
	LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
	RIGHT JOIN postgressessionstat_$TRNUM ps USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISMYSQL = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT my.dbname AS databasename,
		my.id AS sessionid,
		my.state AS status,
		my.command,
		-1::bigint AS memory,
		-1::bigint AS reads,
		-1::bigint AS writes,
		-1::bigint AS totalcpu,
		NULL::character varying AS logintime,
		my.query AS sqlquery,
		s.globalid,
		s.servername,
		my.username AS sqluser,
		-1::bigint AS blockedby,
		-1::bigint AS logicalreads,
		-1::bigint AS totalio,
		-1::bigint AS totallogicalreads,
		-1::bigint AS totalreads,
		-1::bigint AS totalwrites,
		-1::bigint AS currentwaittime,
		NULL::character varying AS lastwaittype,
		NULL::character varying AS lastwaitresource,
		NULL::character varying AS lastbatchtime,
		-1::bigint AS opentranscount,
		NULL::character varying AS programname,
		my.host AS hostname,
		-1::bigint AS hostprocess,
		NULL::character varying AS netaddress,
		NULL::character varying AS netlibarary,
		-1::bigint AS requestid,
		-1::bigint AS totalelaspsedtime,
		NULL::character varying AS windomain,
		NULL::character varying AS winuser,
		NULL::character varying AS planhandle,
		my.sqlhandle AS sqlhandler,
		-1::bigint AS startoffset,
		NULL::text AS applicationname,
		-1::bigint AS clientport,
		NULL::character varying AS xactstart,
		NULL::character varying AS querystarttime,
		NULL::character varying AS statechangetime,
		NULL::boolean AS waiting, 
		my.duration,
		NULL::character varying AS operationType,
        -1::bigint AS totalExecutionTime,
        -1::bigint AS transactionExecutionTime,
        -1::bigint AS transactionActiveTime,
        -1::bigint AS transactionInActiveTime,
        -1::bigint AS shardsParticipating,
        NULL::character varying AS shardsParticipants,
        -1::bigint AS  cursorDocumentsReturned,
		-1::bigint AS cursorBatchReturned,
		-1::bigint AS prepareReadConflicts,
		-1::bigint AS writeConflicts,
		-1::bigint AS numYields,
		NULL::character varying AS flowControl,
		p.serialno,
		p."timestamp"
	FROM parentsessionstat_$TRNUM p
	LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
	RIGHT JOIN mysqlsessionstat_$TRNUM my USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT orac.schemaname AS databasename,
		orac.sessionid,
		orac.status,
		NULL::character varying AS command,
		-1::bigint AS memory,
		-1::bigint AS reads,
		-1::bigint AS writes,
		CASE WHEN orac.cputime >0 THEN orac.cputime/(10^3) ELSE	orac.cputime END AS totalcpu,
		orac.logontime AS logintime,
		qmorac.query AS sqlquery,
		s.globalid,
		s.servername,
		orac.username AS sqluser,
		-1::bigint AS blockedby,
		-1::bigint AS logicalreads,
		-1::bigint AS totalio,
		-1::bigint AS totallogicalreads,
		orac.diskreads AS totalreads,
		orac.directwrites AS totalwrites,
		-1::bigint AS currentwaittime,
		orac.type AS lastwaittype,
		orac.pqstatus AS lastwaitresource,
		orac.prevexecstart AS lastbatchtime,
		-1::bigint AS opentranscount,
		orac.failovertype AS programname,
		orac.servicename AS hostname,
		orac.lastcallet AS hostprocess,
		orac.server AS netaddress,
		orac.objectstatus AS netlibarary,
		-1::bigint AS requestid,
		orac.elapsedtime AS totalelaspsedtime,
		orac.failedover AS windomain,
		orac.pddlstatus AS winuser,
		NULL::character varying AS planhandle,
		orac.sqlhandle AS sqlhandler,
		-1::bigint AS startoffset,
		orac.application AS applicationname,
		-1::bigint AS clientport,
		orac.failovermethod AS xactstart,
		NULL::character varying AS querystarttime,
		NULL::character varying AS statechangetime,
		CASE orac.pdmlenabled WHEN 'NO' THEN false WHEN 'YES' THEN true END AS waiting,
		orac.currentqueueduration AS duration,
		NULL::character varying AS operationType,
        -1::bigint AS totalExecutionTime,
        -1::bigint AS transactionExecutionTime,
        -1::bigint AS transactionActiveTime,
        -1::bigint AS transactionInActiveTime,
        -1::bigint AS shardsParticipating,
        NULL::character varying AS shardsParticipants,
        -1::bigint AS  cursorDocumentsReturned,
		-1::bigint AS cursorBatchReturned,
		-1::bigint AS prepareReadConflicts,
		-1::bigint AS writeConflicts,
		-1::bigint AS numYields,
		NULL::character varying AS flowControl,
		p.serialno,
		p."timestamp"
	FROM parentsessionstat_$TRNUM p
	LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
	RIGHT JOIN oraclesessionstat_$TRNUM orac USING (serialno, "timestamp")
	LEFT JOIN querymeta_$TRNUM qmorac on qmorac.sqlid = orac.sqlid"
	ISUNION=true
fi
if [ $ISMONGODB = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
		QUERY="$QUERY SELECT 
		mongo.databasename,
		mongo.sessionid,
		mongo.status,
		'sample'::text AS "command",
		-1::bigint AS memory,
		-1::bigint AS reads,
		-1::bigint AS writes,
		-1::bigint AS totalcpu,
		to_char(logintime :: timestamp, 'yyyy-mm-dd hh24:mi:ss') logintime,
		mongo.sqlquery,
		s.globalid,
		s.servername,
		mongo.sqluser,
		mongo.blockedby,
		-1::bigint AS logicalreads,
		-1::bigint AS totalio,
		-1::bigint AS totallogicalreads,
		-1::bigint AS totalreads,
		-1::bigint AS totalwrites,
		-1::bigint AS currentwaittime,
		mongo.lastwaittype,
		mongo.lastwaitresource,
		mongo.lastbatchtime,
		-1::bigint AS opentranscount,
		mongo.programname,
		mongo.hostname,
		mongo.hostprocess,
		mongo.netaddress,
		mongo.netlibarary,
		-1::bigint AS requestid,
		-1::bigint AS totalelaspsedtime,
		mongo.windomain,
		mongo.winuser,
		mongo.planhandle,
		NULL::character varying AS sqlhandler,
		mongo.startoffset,
		mongo.applicationname,
		mongo.clientport,
		mongo.xactstart ,
		mongo.querystarttime,
		mongo.statechangetime,
		mongo.waiting,
		-1::integer AS duration,
		mongo.type as "operationType",
		mongo.microsecs_running as "totalExecutionTime",
		mongo.timeOpenMicros as "transactionExecutionTime",
		mongo.timeActiveMicros as "transactionActiveTime",
		mongo.timeInactiveMicros as "transactionInActiveTime",
		mongo.numParticipants as "shardsParticipating",
		mongo.participants as "shardsParticipants",
		mongo.nDocsReturned as "cursorDocumentsReturned",
		mongo.nBatchesReturned as "cursorBatchReturned",
		mongo.prepareReadConflicts as "prepareReadConflicts",
		mongo.writeConflicts as "writeConflicts",
		mongo.numYields as "numYields",
		mongo.flowControlStats as "flowControl",
		p.serialno,
		p.timestamp
	FROM parentsessionstat_$TRNUM p
	LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
	RIGHT JOIN (SELECT 
	coalesce(all_data->> 'ns', null) as databasename,
	coalesce(all_data::json->>'opid','-123456789')::bigint as sessionid,
	coalesce(all_data::json#>>'{cursor,operationUsingCursorId,\$numberLong}','-123456789')::bigint as clientport,
	CASE WHEN (all_data::json->>'active') = 'true' THEN  'ACTIVE' ELSE 'INACTIVE' END AS status,
	coalesce(all_data::json#>>'{cursor,originatingCommand}', null) as command,
        coalesce(all_data::json->>'currentOpTime', null) as logintime,
        coalesce(all_data::json->>'command', null) as sqlquery,
        coalesce(all_data::json->>'runBy', null) as sqluser,
        coalesce(all_data::json->>'connectionId', '-123456789')::bigint as blockedby,
        coalesce(all_data::json->>'waitingForLatch', null) as lastwaittype,
        CASE WHEN (all_data::json->>'waitingForFlowControl') = 'true' THEN 'TRUE' ELSE 'FALSE' END as lastwaitresource,
        coalesce(all_data::json#>>'{cursor,createdDate}', null) as lastbatchtime,
        coalesce(all_data::json->>'desc', null) as programname,
        coalesce(all_data::json->>'appName', null) as hostname,
        coalesce(all_data::json->>'dataThroughputLastSecond', '-123456789')::bigint as hostprocess,
        coalesce(all_data::json->>'client', null) as netaddress,
        coalesce(all_data::json->>'lockStats', null) as netlibarary,
        coalesce(all_data::json->>'shard', null) as windomain,
        coalesce(all_data::json->>'effectiveUsers', null) as winuser,
        coalesce(all_data::json->>'planSummary', null) as planhandle,
        coalesce(all_data::json->>'dataThroughputAverage', '-123456789')::bigint as startoffset,
        coalesce(all_data::json->>'msg', null) as applicationname,
        coalesce(all_data::json#>>'{cursor,noCursorTimeout}', null) as  xactstart ,
        coalesce(all_data::json#>>'{transaction,startWallClockTime}', null) as querystarttime,
        coalesce(all_data::json#>>'{transaction,expiryTime}', null) as statechangetime,
        coalesce(all_data::json->>'waitingForLock', null)::boolean as waiting,
        coalesce(all_data::json->>'type', null) as type,
        coalesce(all_data::json#>>'{microsecs_running,\$numberLong}', '-123456789')::bigint as microsecs_running,
        coalesce(all_data::json#>>'{transaction,timeOpenMicros}', '-123456789')::bigint as timeOpenMicros,
        coalesce(all_data::json#>>'{transaction,timeActiveMicros}', '-123456789')::bigint as timeActiveMicros,
        coalesce(all_data::json#>>'{transaction,timeInactiveMicros}', '-123456789')::bigint as timeInactiveMicros,
        coalesce(all_data::json#>>'{transaction,numParticipants}', '-123456789')::bigint as numParticipants,
        coalesce(all_data::json#>>'{transaction,participants}', null) as participants,
        coalesce(all_data::json#>>'{cursor,nDocsReturned,\$numberLong}', '-123456789')::bigint as nDocsReturned,
        coalesce(all_data::json#>>'{cursor,nBatchesReturned,\$numberLong}', '-123456789')::bigint as nBatchesReturned,
        coalesce(all_data::json->>'prepareReadConflicts', '-123456789')::bigint as prepareReadConflicts,
        coalesce(all_data::json->>'writeConflicts', '-123456789')::bigint as writeConflicts,
        coalesce(all_data::json->>'numYields', '-123456789')::bigint as numYields,
        coalesce(all_data::json->>'flowControlStats', null) as flowControlStats,
	serialno,
	timestamp
	FROM (select replace(convert_from(decode(mainresult,'base64'),'UTF-8'),'<Binary Data>','0')::json as all_data, serialno, timestamp from mongodbsessionstat_$TRNUM) as mongodata) mongo USING (serialno, "timestamp")"
	ISUNION=true
	fi
if [ $ISUNION = false ]
then
        QUERY="$QUERY SELECT NULL::text AS databasename,
                -1::bigint AS sessionid,
                NULL::text AS status,
                NULL::character varying AS command,
                -1::bigint AS memory,
                -1::bigint AS reads,
                -1::bigint AS writes,
                -1::bigint AS totalcpu,
                NULL::character varying AS logintime,
                NULL::text AS sqlquery,
                -1::bigint AS globalid,
                NULL::text AS servername,
                NULL::text AS sqluser,
                -1::bigint AS blockedby,
                -1::bigint AS logicalreads,
                -1::bigint AS totalio,
                -1::bigint AS totallogicalreads,
                -1::bigint AS totalreads,
                -1::bigint AS totalwrites,
                -1::bigint AS currentwaittime,
                NULL::character varying AS lastwaittype,
                NULL::character varying AS lastwaitresource,
                NULL::character varying AS lastbatchtime,
                -1::bigint AS opentranscount,
                NULL::character varying AS programname,
                NULL::text AS hostname,
                -1::bigint AS hostprocess,
                NULL::text AS netaddress,
                NULL::character varying AS netlibarary,
                -1::bigint AS requestid,
                -1::bigint AS totalelaspsedtime,
                NULL::character varying AS windomain,
                NULL::character varying AS winuser,
                NULL::character varying AS planhandle,
                NULL::text AS sqlhandler,
                -1::bigint AS startoffset,
                NULL::text AS applicationname,
                -1::bigint AS clientport,
                NULL::character varying AS xactstart,
                NULL::character varying AS querystarttime,
                NULL::character varying AS statechangetime,
                NULL::boolean AS waiting,
                -1::integer AS duration,
                NULL::character varying AS operationType,
        -1::bigint AS totalExecutionTime,
        -1::bigint AS transactionExecutionTime,
        -1::bigint AS transactionActiveTime,
        -1::bigint AS transactionInActiveTime,
        -1::bigint AS shardsParticipating,
        NULL::character varying AS shardsParticipants,
        -1::bigint AS  cursorDocumentsReturned,
                -1::bigint AS cursorBatchReturned,
                -1::bigint AS prepareReadConflicts,
                -1::bigint AS writeConflicts,
                -1::bigint AS numYields,
                NULL::character varying AS flowControl,
                -1::bigint AS serialno,
                -1::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_blockingsessionstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_blockingsessionstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         c.sessionid, 
         c.waittime, 
         c.waittype, 
         c.waitresource, 
         c.command, 
         c.loginname,
         c.programname,
         c.cputime, 
         c.physicalio, 
         c.hostname, 
         c.hostprocess, 
         c.status,
	 NULL::text AS event,
	 c.blockingsessionid, 
         c.query, 
         c.dbname AS databasename, 
         0::double precision AS waitingthread, 
	 NULL::character varying AS backendstarttime,
	 NULL::character varying AS querystarttime,
	 NULL::character varying AS statechangetime,
	 NULL::text AS modetype,
         p.serialno, 
         p."timestamp" 
  FROM   parentblockingstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join mssqlblockingstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISPOSTGRES = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid,
		s.servername,
		pg.blockedpid AS sessionid,
		NULL::bigint AS waittime,
		pg.locktype AS waittype,
		NULL::character varying AS waitresource,
		NULL::character varying AS command,
		pg.username AS loginname,
		pg.applicationname AS programname,
		NULL::bigint AS cputime,
		NULL::bigint AS physicalio,
		NULL::character varying AS hostname,
		NULL::character varying AS hostprocess,
		NULL::character varying AS status,
		NULL::text AS event,
		pg.blockingpid AS blockingsessionid,
		qmpg.query,
		pg.dbname AS databasename,
		0::double precision AS waitingthread,
		pg.backendstarttime,
		pg.querystarttime,
		pg.statechangetime,
		pg.modetype,
		p.serialno,
		p."timestamp"
	   FROM parentblockingstat_$TRNUM p
		 LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
		 RIGHT JOIN postgresblockingstat_$TRNUM pg USING (serialno, "timestamp")
		 LEFT JOIN querymeta_$TRNUM qmpg ON qmpg.sqlid = pg.sqlid"
	ISUNION=true
fi
if [ $ISMYSQL = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid,
		s.servername,
		my.trxid AS sessionid,
		NULL::bigint AS waittime,
		NULL::character varying AS waittype,
		NULL::character varying AS waitresource,
		NULL::character varying AS command,
		NULL::text AS loginname,
		NULL::character varying AS programname,
		NULL::bigint AS cputime,
		NULL::bigint AS physicalio,
		NULL::character varying AS hostname,
		NULL::character varying AS hostprocess,
		NULL::character varying AS status,
		NULL::text AS event,
		my.blockingtrxid AS blockingsessionid,
		qmmy.query,
		NULL::text AS databasename,
		my.waitingthread,
		NULL::character varying AS backendstarttime,
		NULL::character varying AS querystarttime,
		NULL::character varying AS statechangetime,
		NULL::text AS modetype,
		p.serialno,
		p."timestamp"
	   FROM parentblockingstat_$TRNUM p
		 LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
		 RIGHT JOIN mysqlblockingstat_$TRNUM my USING (serialno, "timestamp")
		 LEFT JOIN querymeta_$TRNUM qmmy ON qmmy.sqlid = my.sqlid"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid,
		s.servername,
		orac.sid AS sessionid,
		NULL::bigint AS waittime,
		NULL::character varying AS waittype,
		NULL::character varying AS waitresource,
		NULL::character varying AS command,
		orac.username AS loginname,
		orac.application AS programname,
		NULL::bigint AS cputime,
		NULL::bigint AS physicalio,
		NULL::character varying AS hostname,
		NULL::character varying AS hostprocess,
		orac.status,
		orac.event,
		orac.blockingsid AS blockingsessionid,
		qmorac.query,
		orac.schemaname AS databasename,
		NULL::double precision AS waitingthread,
		NULL::character varying AS backendstarttime,
		NULL::character varying AS querystarttime,
		NULL::character varying AS statechangetime,
		NULL::text AS modetype,
		p.serialno,
		p."timestamp"
	   FROM parentblockingstat_$TRNUM p
		 LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
		 RIGHT JOIN oracleblockingstat_$TRNUM orac USING (serialno, "timestamp")
		 LEFT JOIN querymeta_$TRNUM qmorac ON qmorac.sqlid = orac.sqlid"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT -1::bigint AS globalid,
                NULL::text AS servername,
                -1::bigint AS sessionid,
                NULL::bigint AS waittime,
                NULL::character varying AS waittype,
                NULL::character varying AS waitresource,
                NULL::character varying AS command,
                NULL::text AS loginname,
                NULL::text AS programname,
                NULL::bigint AS cputime,
                NULL::bigint AS physicalio,
                NULL::character varying AS hostname,
                NULL::character varying AS hostprocess,
                NULL::text AS status,
                NULL::text AS event,
                -1::bigint AS blockingsessionid,
                NULL::text AS query,
                NULL::text AS databasename,
                NULL::double precision AS waitingthread,
                NULL::character varying AS backendstarttime,
                NULL::character varying AS querystarttime,
                NULL::character varying AS statechangetime,
                NULL::text AS modetype,
                -1::bigint AS serialno,
                -1::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_lockstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_lockstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT c.dbname AS databasename,
		c.locktype,
		c.requestmode,
		c.requeststatus,
		c.loginname,
		s.globalid,
		s.servername,
		c.sessionid,
		c.requestcount,
		NULL::text AS modename,
		NULL::character varying AS granted,
		NULL::bigint AS processid,
		NULL::character varying AS statechange,
		NULL::text AS ctime,
		NULL::text AS block,
		NULL::text AS objectname,
		NULL::text AS lockcategory,
		NULL::text AS description,
                -1::bigint AS replicationTimingAccMicrosCount ,
			   -1::bigint AS parallelAcquireCount,
			   -1::bigint AS parallelAcquireWaitCount,
			   NULL::text AS parallelAcciWaitCountDetails,
			   -1::bigint parallelTimingAccMicrosCount,
				NULL::text AS parallelTimingAccMicrosCountDetails,
			   -1::bigint AS parallelDeadLockCount,
			   -1::bigint AS globalAcquireCount,
			   -1::bigint AS globalAcquireWaitCount,
			   -1::bigint AS globalTimingAccMicrosCount,
			   -1::bigint AS globalDeadLockCount,
				NULL::text AS globalDeadLockCountDetails,
			   -1::bigint AS databaseAcquireCount,
				NULL::text AS databaseAcciCountDetails,
			   -1::bigint AS databaseAcquireWaitCount,
				NULL::text AS databaseAcciWaitCountDetails,
			   -1::bigint AS databaseTimingAccMicrosCount,
				NULL::text AS databaseTimingAccMicrosCountDetails,
			   -1::bigint AS databaseDeadLockCount,
				NULL::text AS databaseDeadLockCountDetails,
			   -1::bigint AS collectionAcquireCount,
				NULL::text AS collectionAcciCountDetails,
			   -1::bigint AS collectionAcquireWaitCount,
				NULL::text AS collectionAcciWaitCountDetails,
			   -1::bigint AS collectionTimingAccMicrosCount,
				NULL::text AS collectionTimingAccMicrosCountDetails,
			   -1::bigint AS collectionDeadLockCount,
				NULL::text AS collectionDeadLockCountDetails,
			   -1::bigint AS mutexAcquireCount,
				NULL::text AS mutexAcciCountDetails,
			   -1::bigint AS mutexAcquireWaitCount,
				-1::bigint AS mutexTimingAccMicrosCount,
			   -1::bigint AS mutexDeadLockCount,
				NULL::text AS mutexTimingAccMicrosCountDetails,
			   -1::bigint AS metadataAcquireCount,
			   -1::bigint AS metadataAcquireWaitCount,
			   -1::bigint AS metadataTimingAccMicrosCount,
				NULL::text AS metadataTimingAccMicrosCountDetails,
			   -1::bigint AS metadataDeadLockCount,
			   -1::bigint AS oplogAcciCount,
				NULL::text AS oplogAcciCountDetails,
			   -1::bigint AS oplogAcciWaitCount,
				NULL::text AS oplogAcciWaitCountDetails,
			   -1::bigint AS oplogTimingAccMicrosCount,
				NULL::text AS oplogTimingAccMicrosCountDetails,
			   -1::bigint AS oplogDeadLockCount,
				NULL::text AS oplogDeadLockCountDetails,
				NULL::text AS replicationDeadLockCountDetails,
                		NULL::text AS metadataDeadLockCountDetails,
                		-1::bigint AS replicationAcquireWaitCount,
              			  NULL::text AS replicationAcciWaitCountDetails,
				p.serialno,
				p."timestamp"
	   FROM parentlockstat_$TRNUM p
		 LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
		 RIGHT JOIN mssqllockstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISPOSTGRES = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT pl.dbname AS databasename,
		pl.locktype,
		NULL::character varying AS requestmode,
		NULL::character varying AS requeststatus,
		NULL::character varying AS loginname,
		s.globalid,
		s.servername,
		NULL::bigint AS sessionid,
		NULL::bigint AS requestcount,
		pl.modename,
		pl.granted,
		pl.processid,
		pl.statechange,
		NULL::text AS ctime,
		NULL::text AS block,
		NULL::text AS objectname,
		NULL::text AS lockcategory,
		NULL::text AS description,
			   -1::bigint AS replicationTimingAccMicrosCount ,
			   -1::bigint AS parallelAcquireCount,
			   -1::bigint AS parallelAcquireWaitCount,
			   NULL::text AS parallelAcciWaitCountDetails,
			   -1::bigint AS parallelTimingAccMicrosCount,
				NULL::text AS parallelTimingAccMicrosCountDetails,
			   -1::bigint AS parallelDeadLockCount,
			   -1::bigint AS globalAcquireCount,
			   -1::bigint AS globalAcquireWaitCount,
			   -1::bigint AS globalTimingAccMicrosCount,
			   -1::bigint AS globalDeadLockCount,
				NULL::text AS globalDeadLockCountDetails,
			   -1::bigint AS databaseAcquireCount,
				NULL::text AS databaseAcciCountDetails,
			   -1::bigint AS databaseAcquireWaitCount,
				NULL::text AS databaseAcciWaitCountDetails,
			   -1::bigint AS databaseTimingAccMicrosCount,
				NULL::text AS databaseTimingAccMicrosCountDetails,
			   -1::bigint AS databaseDeadLockCount,
				NULL::text AS databaseDeadLockCountDetails,
			   -1::bigint AS collectionAcquireCount,
				NULL::text AS collectionAcciCountDetails,
			   -1::bigint AS collectionAcquireWaitCount,
				NULL::text AS collectionAcciWaitCountDetails,
			   -1::bigint AS collectionTimingAccMicrosCount,
				NULL::text AS collectionTimingAccMicrosCountDetails,
			   -1::bigint AS collectionDeadLockCount,
				NULL::text AS collectionDeadLockCountDetails,
			   -1::bigint AS mutexAcquireCount,
				NULL::text AS mutexAcciCountDetails,
			   -1::bigint AS mutexAcquireWaitCount,
				-1::bigint AS mutexTimingAccMicrosCount,
			   -1::bigint AS mutexDeadLockCount,
				NULL::text AS mutexTimingAccMicrosCountDetails,
			   -1::bigint AS metadataAcquireCount,
			   -1::bigint AS metadataAcquireWaitCount,
			   -1::bigint AS metadataTimingAccMicrosCount,
				NULL::text AS metadataTimingAccMicrosCountDetails,
			   -1::bigint AS metadataDeadLockCount,
			   -1::bigint AS oplogAcciCount,
				NULL::text AS oplogAcciCountDetails,
			   -1::bigint AS oplogAcciWaitCount,
				NULL::text AS oplogAcciWaitCountDetails,
			   -1::bigint AS oplogTimingAccMicrosCount,
				NULL::text AS oplogTimingAccMicrosCountDetails,
			   -1::bigint AS oplogDeadLockCount,
				NULL::text AS oplogDeadLockCountDetails,
				NULL::text AS replicationDeadLockCountDetails,
           			 NULL::text AS metadataDeadLockCountDetails,
               			 -1::bigint AS replicationAcquireWaitCount,
               			  NULL::text AS replicationAcciWaitCountDetails,
				p.serialno,
				p."timestamp"
	   FROM parentlockstat_$TRNUM p
		 LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
		 RIGHT JOIN postgreslockstat_$TRNUM pl USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT NULL::character varying AS databasename,
        CASE orac.lockmode
            WHEN '0' THEN 'NONE' 
			WHEN '1' THEN '-' 
			WHEN '2' THEN 'row-S (SS)' 
			WHEN '3' THEN 'row-X (SX)'
			WHEN '4' THEN 'share (S)' 
			WHEN '5' THEN 'S/Row-X (SSX)'
			WHEN '6' THEN 'exclusive (X)'
        END AS locktype,
        CASE orac.lockrequest
            WHEN '0' THEN 'NONE' 
			WHEN '1' THEN '-' 
			WHEN '2' THEN 'row-S (SS)' 
			WHEN '3' THEN 'row-X (SX)'
			WHEN '4' THEN 'share (S)' 
			WHEN '5' THEN 'S/Row-X (SSX)'
			WHEN '6' THEN 'exclusive (X)'
        END AS requestmode,
    NULL::character varying AS requeststatus,
    orac.name AS loginname,
    s.globalid,
    s.servername,
    orac.sid AS sessionid,
    NULL::bigint AS requestcount,
    NULL::text AS modename,
    NULL::character varying AS granted,
    NULL::bigint AS processid,
    NULL::character varying AS statechange,
    orac.ctime,
        CASE orac.block
            WHEN '0' THEN 'The lock is not blocking any other processes' 
			WHEN '1' THEN 'The lock is blocking other processes' 
			WHEN '2' THEN 'The lock is not blocking any blocked processes on the local node, but it may or may not be blocking processes on remote nodes'
        END AS block,
    orac.objectname,
        CASE orac.lockcategory
            WHEN 'NO' THEN 'SYSTEM'
            WHEN 'YES' THEN 'USER'
        END AS lockcategory,
    orac.description,
			   -1::bigint AS replicationTimingAccMicrosCount ,
			   -1::bigint AS parallelAcquireCount,
			   -1::bigint AS parallelAcquireWaitCount,
			   NULL::text AS parallelAcciWaitCountDetails,
			   -1::bigint AS parallelTimingAccMicrosCount,
				NULL::text AS parallelTimingAccMicrosCountDetails,
			   -1::bigint AS parallelDeadLockCount,
			   -1::bigint AS globalAcquireCount,
			   -1::bigint AS globalAcquireWaitCount,
			   -1::bigint AS globalTimingAccMicrosCount,
			   -1::bigint AS globalDeadLockCount,
				NULL::text AS globalDeadLockCountDetails,
			   -1::bigint AS databaseAcquireCount,
				NULL::text AS databaseAcciCountDetails,
			   -1::bigint AS databaseAcquireWaitCount,
				NULL::text AS databaseAcciWaitCountDetails,
			   -1::bigint AS databaseTimingAccMicrosCount,
				NULL::text AS databaseTimingAccMicrosCountDetails,
			   -1::bigint AS databaseDeadLockCount,
				NULL::text AS databaseDeadLockCountDetails,
			   -1::bigint AS collectionAcquireCount,
				NULL::text AS collectionAcciCountDetails,
			   -1::bigint AS collectionAcquireWaitCount,
				NULL::text AS collectionAcciWaitCountDetails,
			   -1::bigint AS collectionTimingAccMicrosCount,
				NULL::text AS collectionTimingAccMicrosCountDetails,
			   -1::bigint AS collectionDeadLockCount,
				NULL::text AS collectionDeadLockCountDetails,
			   -1::bigint AS mutexAcquireCount,
				NULL::text AS mutexAcciCountDetails,
			   -1::bigint AS mutexAcquireWaitCount,
				-1::bigint AS mutexTimingAccMicrosCount,
			   -1::bigint AS mutexDeadLockCount,
				NULL::text AS mutexTimingAccMicrosCountDetails,
			   -1::bigint AS metadataAcquireCount,
			   -1::bigint AS metadataAcquireWaitCount,
			   -1::bigint AS metadataTimingAccMicrosCount,
				NULL::text AS metadataTimingAccMicrosCountDetails,
			   -1::bigint AS metadataDeadLockCount,
			   -1::bigint AS oplogAcciCount,
				NULL::text AS oplogAcciCountDetails,
			   -1::bigint AS oplogAcciWaitCount,
				NULL::text AS oplogAcciWaitCountDetails,
			   -1::bigint AS oplogTimingAccMicrosCount,
				NULL::text AS oplogTimingAccMicrosCountDetails,
			   -1::bigint AS oplogDeadLockCount,
				NULL::text AS oplogDeadLockCountDetails,
				NULL::text AS replicationDeadLockCountDetails,
				NULL::text AS metadataDeadLockCountDetails,
				-1::bigint AS replicationAcquireWaitCount,
				NULL::text AS replicationAcciWaitCountDetails,
   				 p.serialno,
    				p."timestamp"
   FROM parentlockstat_$TRNUM p
     LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
     RIGHT JOIN oraclelockstat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
 
if [ $ISMONGODB = t ]
then
        if [ $ISUNION = true ]
        then
                QUERY="$QUERY UNION"
        fi
        QUERY="$QUERY SELECT mongo.ns AS databasename, 
				mongo."parallelAcciCountDetails" AS locktype,
                mongo."replicationAcciCountDetails" AS requestmode,
                querymeta.query AS requeststatus,
                mongo."replicationTimingAccMicrosCountDetails" AS loginname,
				s.globalid,
                s.servername,
				mongo."replicationDeadLockCount" AS sessionid,
				mongo."replicationAcquireCount" AS requestCount,
				mongo."globalAcciWaitCountDetails" AS modename,
                mongo."parallelDeadLockCountDetails" AS granted,
                NULL::bigint AS processid,
                mongo."globalTimingAccMicrosCountDetails" AS statechange,
				mongo."mutexAcciWaitCountDetails" AS ctime,
				mongo."mutexDeadLockCountDetails" AS block,
				mongo."metadataAcciWaitCountDetails" AS objectname,
				mongo."globalAcciCountDetails" AS lockcategory,
				mongo."metadataAcciCountDetails" AS description,
                mongo."replicationTimingAccMicrosCount",
                                mongo."parallelAcquireCount",
                mongo."parallelAcquireWaitCount",
				mongo."parallelAcciWaitCountDetails",
				mongo."parallelTimingAccMicrosCount",
				mongo."parallelTimingAccMicrosCountDetails",
				mongo."parallelDeadLockCount",
				mongo."globalAcquireCount",
				mongo."globalAcquireWaitCount",
				mongo."globalTimingAccMicrosCount",
				mongo."globalDeadLockCount",
				mongo."globalDeadLockCountDetails",
				mongo."databaseAcquireCount",
				mongo."databaseAcciCountDetails",
				mongo."databaseAcquireWaitCount",
				mongo."databaseAcciWaitCountDetails",
				mongo."databaseTimingAccMicrosCount",
				mongo."databaseTimingAccMicrosCountDetails",
				mongo."databaseDeadLockCount",
				mongo."databaseDeadLockCountDetails",
				mongo."collectionAcquireCount",
				mongo."collectionAcciCountDetails",
				mongo."collectionAcquireWaitCount",
				mongo."collectionAcciWaitCountDetails",
				mongo."collectionTimingAccMicrosCount",
		        mongo."collectionTimingAccMicrosCountDetails",
				mongo."collectionDeadLockCount",
				mongo."collectionDeadLockCountDetails",
				mongo."mutexAcquireCount",
				mongo."mutexAcciCountDetails",
				mongo."mutexAcquireWaitCount",
				mongo."mutexTimingAccMicrosCount",
				mongo."mutexDeadLockCount",
				mongo."mutexTimingAccMicrosCountDetails",
				mongo."metadataAcquireCount",
				mongo."metadataAcquireWaitCount",
				mongo."metadataTimingAccMicrosCount",
				mongo."metadataTimingAccMicrosCountDetails",
				mongo."metadataDeadLockCount",
				mongo."oplogAcciCount",
				mongo."oplogAcciCountDetails",
				mongo."oplogAcciWaitCount",
				mongo."oplogAcciWaitCountDetails",
				mongo."oplogTimingAccMicrosCount",
				mongo."oplogTimingAccMicrosCountDetails",
				mongo."oplogDeadLockCount",
				mongo."oplogDeadLockCountDetails",
				mongo."replicationDeadLockCountDetails",
				mongo."metadataDeadLockCountDetails",
				mongo."replicationAcquireWaitCount",
				mongo."replicationAcciWaitCountDetails",
				p.serialno,
		                p."timestamp"
				FROM parentexecutionstat_$TRNUM p
				LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
				LEFT JOIN querymeta_$TRNUM AS querymeta USING (sqlid)
                RIGHT JOIN (select ns,repacshared + repacexclusive + repacintentexclusive + repacintentshared as "replicationAcquireCount", 'S=' || repacshared || ',X= '|| repacexclusive || ',IX= ' || repacintentexclusive ||',IS = '|| repacintentshared as "replicationAcciCountDetails",repawshared + repawexclusive + repawintentexclusive + repawintentshared as "replicationAcquireWaitCount", 'S=' || repawshared || ',X= ' || repawexclusive || ',IX= ' || repawintentexclusive ||',IS = '|| repawintentshared as "replicationAcciWaitCountDetails", 
reptshared + reptexclusive + reptintentexclusive + reptintentshared as "replicationTimingAccMicrosCount", 'S=' || reptshared || ',X= ' || reptexclusive || ',IX= ' || reptintentexclusive ||',IS = '|| reptintentshared as "replicationTimingAccMicrosCountDetails",
repdrshared + repdrexclusive + repdrintentexclusive + repdintentshared as "replicationDeadLockCount", 'S=' || repdrshared || ',X= ' || repdrexclusive || ',IX= ' || repdrintentexclusive ||',IS = '|| repdintentshared as "replicationDeadLockCountDetails",
paracshared + paracexclusive + paracintenteclusive + paracintentshared as "parallelAcquireCount", 'S=' || paracshared || ',X= '|| paracexclusive || ',IX= ' || paracintenteclusive ||',IS = '|| paracintentshared as "parallelAcciCountDetails",parawshared + parawexclusive + parawintenteclusive + parawintentshared as "parallelAcquireWaitCount", 'S=' || parawshared || ',X= ' || parawexclusive || ',IX= ' || parawintenteclusive ||',IS = '|| parawintentshared as "parallelAcciWaitCountDetails", 
partshared + partexclusive + partintentexclusive + partintentshared as "parallelTimingAccMicrosCount", 'S=' || partshared || ',X= ' || partexclusive || ',IX= ' || partintentexclusive ||',IS = '|| partintentshared as "parallelTimingAccMicrosCountDetails",
pardshared + pardexclusive + pardintentexclusive + pardintentshared as "parallelDeadLockCount", 'S=' || pardshared || ',X= ' || pardexclusive || ',IX= ' || pardintentexclusive ||',IS = '|| pardintentshared as "parallelDeadLockCountDetails",
gloarshared + gloarexclusive + gloarintentexclusive + gloarintentshared as "globalAcquireCount", 'S=' || gloarshared || ',X= '|| gloarexclusive || ',IX= ' || gloarintentexclusive ||',IS = '|| gloarintentshared as "globalAcciCountDetails",gloawshared + gloawexclusive + gloawintentexclusive + gloawintentshared as "globalAcquireWaitCount", 'S=' || gloawshared || ',X= ' || gloawexclusive || ',IX= ' || gloawintentexclusive ||',IS = '|| gloawintentshared as "globalAcciWaitCountDetails", 
glotrshared + glotexclusive + glotintentexclusive + glotintentshared as "globalTimingAccMicrosCount", 'S=' || glotrshared || ',X= ' || glotexclusive || ',IX= ' || glotintentexclusive ||',IS = '|| glotintentshared as "globalTimingAccMicrosCountDetails",
glodshared + glodexclusive + glodintentexclusive + glodintentshared as "globalDeadLockCount", 'S=' || glodshared || ',X= ' || glodexclusive || ',IX= ' || glodintentexclusive ||',IS = '|| glodintentshared as "globalDeadLockCountDetails",
dataacshared + dataacexclusive + dataacintentexclusive + dataacintentshared as "databaseAcquireCount", 'S=' || dataacshared || ',X= '|| dataacexclusive || ',IX= ' || dataacintentexclusive ||',IS = '|| dataacintentshared as "databaseAcciCountDetails",dataawshared + dataawexclusive + dataawintentexclusive + dataawintentshared as "databaseAcquireWaitCount", 'S=' || dataawshared || ',X= ' || dataawexclusive || ',IX= ' || dataawintentexclusive ||',IS = '|| dataawintentshared as "databaseAcciWaitCountDetails", 
datatshared + datatexclusive + datatintentexclusive + datatintentshared as "databaseTimingAccMicrosCount", 'S=' || datatshared || ',X= ' || datatexclusive || ',IX= ' || datatintentexclusive ||',IS = '|| datatintentshared as "databaseTimingAccMicrosCountDetails",
datadshared + datadexlusive + datadintentexlusive + datadintentshared as "databaseDeadLockCount", 'S=' || datadshared || ',X= ' || datadexlusive || ',IX= ' || datadintentexlusive ||',IS = '|| datadintentshared as "databaseDeadLockCountDetails",
colacshared + colacexclusive + colacintentexclusive + colarintentshared as "collectionAcquireCount", 'S=' || colacshared || ',X= '|| colacexclusive || ',IX= ' || colacintentexclusive ||',IS = '|| colarintentshared as "collectionAcciCountDetails",colawshared + colawexclusive + colawintentexclusive + colawintentshared as "collectionAcquireWaitCount", 'S=' || colawshared || ',X= ' || colawexclusive || ',IX= ' || colawintentexclusive ||',IS = '|| colawintentshared as "collectionAcciWaitCountDetails", 
coltshared + coltexclusive + coltintentexclusive + coltintentshared as "collectionTimingAccMicrosCount", 'S=' || coltshared || ',X= ' || coltexclusive || ',IX= ' || coltintentexclusive ||',IS = '|| coltintentshared as "collectionTimingAccMicrosCountDetails",
coldshared + coldexclusive + coldintentexclusive + coldintentshared as "collectionDeadLockCount", 'S=' || coldshared || ',X= ' || coldexclusive || ',IX= ' || coldintentexclusive ||',IS = '|| coldintentshared as "collectionDeadLockCountDetails",
colmuacshared + colmuacexclusive + colmuacintentexclusive + colmuacintentshared as "mutexAcquireCount", 'S=' || colmuacshared || ',X= '|| colmuacexclusive || ',IX= ' || colmuacintentexclusive ||',IS = '|| colmuacintentshared as "mutexAcciCountDetails",colmuawshared + colmuawexclusive + colmuawintentexclusive + colmuawintentshared as "mutexAcquireWaitCount", 'S=' || colmuawshared || ',X= ' || colmuawexclusive || ',IX= ' || colmuawintentexclusive ||',IS = '|| colmuawintentshared as "mutexAcciWaitCountDetails", 
colmutshared + colmutexclusive + colmutintentexclusive + colmutintentshared as "mutexTimingAccMicrosCount", 'S=' || colmutshared || ',X= ' || colmutexclusive || ',IX= ' || colmutintentexclusive ||',IS = '|| colmutintentshared as "mutexTimingAccMicrosCountDetails",
colmudshared + colmudexclusive + colmudintentexclusive + colmudintentshared as "mutexDeadLockCount", 'S=' || colmudshared || ',X= ' || colmudexclusive || ',IX= ' || colmudintentexclusive ||',IS = '|| colmudintentshared as "mutexDeadLockCountDetails",
colmeacshared + colmeacexclusive + colmeacintentexclusive + colmeacintentshared as "metadataAcquireCount", 'S=' || colmeacshared || ',X= '|| colmeacexclusive || ',IX= ' || colmeacintentexclusive ||',IS = '|| colmeacintentshared as "metadataAcciCountDetails",colmeawshared + colmeawexclusive + colmeawintentexclusive + colmeawintentshared as "metadataAcquireWaitCount", 'S=' || colmeawshared || ',X= ' || colmeawexclusive || ',IX= ' || colmeawintentexclusive ||',IS = '|| colmeawintentshared as "metadataAcciWaitCountDetails", 
colmetshared + colmetexclusive + colmetintentexclusive + colmetintentshared as "metadataTimingAccMicrosCount", 'S=' || colmetshared || ',X= ' || colmetexclusive || ',IX= ' || colmetintentexclusive ||',IS = '|| colmetintentshared as "metadataTimingAccMicrosCountDetails",
colmedshared + colmedexclusive + colmedintentexclusive + colmedintentshared as "metadataDeadLockCount", 'S=' || colmedshared || ',X= ' || colmedexclusive || ',IX= ' || colmedintentexclusive ||',IS = '|| colmedintentshared as "metadataDeadLockCountDetails",
opacshared + opacexclusive + opacintentexclusive + opacintentshared as "oplogAcciCount", 'S=' || opacshared || ',X= '|| opacexclusive || ',IX= ' || opacintentexclusive ||',IS = '|| opacintentshared as "oplogAcciCountDetails",opawshared + opawexclusive + opawintentexclusive + opawintentshared as "oplogAcciWaitCount", 'S=' || opawshared || ',X= ' || opawexclusive || ',IX= ' || opawintentexclusive ||',IS = '|| opawintentshared as "oplogAcciWaitCountDetails", 
opatshared + opatexclusive + opatintentexclusive + opatintentshared as "oplogTimingAccMicrosCount", 'S=' || opatshared || ',X= ' || opatexclusive || ',IX= ' || opatintentexclusive ||',IS = '|| opatintentshared as "oplogTimingAccMicrosCountDetails",
opdshared + opdexlusive + opdintentexlusive + opdintentshared as "oplogDeadLockCount", 'S=' || opdshared || ',X= ' || opdexlusive || ',IX= ' || opdintentexlusive ||',IS = '|| opdintentshared as "oplogDeadLockCountDetails"  ,serialno, timestamp from
(select coalesce((alldata->> 'ns'),'NaN') as "ns",
coalesce(allData#>> '{locks,ReplicationStateTransition,acquireCount,R,\$numberLong}','0')::bigint as "repacshared",
coalesce(allData#>>'{locks,ReplicationStateTransition,acquireCount,W,\$numberLong}','0')::bigint as "repacexclusive", 
coalesce(allData#>>'{locks,ReplicationStateTransition,acquireCount,w,\$numberLong}','0')::bigint as "repacintentexclusive",
coalesce(allData#>>'{locks,ReplicationStateTransition,acquireCount,r,\$numberLong}','0')::bigint as "repacintentshared",
coalesce(allData#>> '{locks,ReplicationStateTransition,acquireWaitCount,R,\$numberLong}','0')::bigint as "repawshared",
coalesce(allData#>> '{locks,ReplicationStateTransition,acquireWaitCount,W,\$numberLong}','0')::bigint as "repawexclusive",
coalesce(allData#>>'{locks,ReplicationStateTransition,acquireWaitCount,w,\$numberLong}','0')::bigint as "repawintentexclusive",
coalesce(allData#>>'{locks,ReplicationStateTransition,acquireWaitCount,r,\$numberLong}','0')::bigint as "repawintentshared",
coalesce(allData#>> '{locks,ReplicationStateTransition,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "reptshared", 
coalesce(allData#>>'{locks,ReplicationStateTransition,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "reptexclusive",
coalesce(allData#>>  '{locks,ReplicationStateTransition,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "reptintentexclusive", 
coalesce(allData#>> '{locks,ReplicationStateTransition,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "reptintentshared",
coalesce(allData#>> '{locks,ReplicationStateTransition,deadlockCount,R,\$numberLong}','0')::bigint as "repdrshared",
coalesce(allData#>>'{locks,ReplicationStateTransition,deadlockCount,W,\$numberLong}','0')::bigint as "repdrexclusive",
coalesce(allData#>>'{locks,ReplicationStateTransition,deadlockCount,w,\$numberLong}','0')::bigint as "repdrintentexclusive",
coalesce(allData#>>'{locks,ReplicationStateTransition,deadlockCount,r,\$numberLong}','0')::bigint as "repdintentshared",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,acquireCount,R,\$numberLong}','0')::bigint as "paracshared",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,acquireCount,W,\$numberLong}','0')::bigint as "paracexclusive",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,acquireCount,w,\$numberLong}','0')::bigint as "paracintenteclusive",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,acquireCount,r,\$numberLong}','0')::bigint as "paracintentshared",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,acquireWaitCount,R,\$numberLong}','0')::bigint as "parawshared",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,acquireWaitCount,W,\$numberLong}','0')::bigint as "parawexclusive",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,acquireWaitCount,w,\$numberLong}','0')::bigint as "parawintenteclusive",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,acquireWaitCount,r,\$numberLong}','0')::bigint as "parawintentshared",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "partshared",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "partexclusive",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "partintentexclusive",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "partintentshared",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,deadlockCount,R,\$numberLong}','0')::bigint as "pardshared",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,deadlockCount,W,\$numberLong}','0')::bigint as "pardexclusive",
coalesce(allData#>>'{locks,ParallelBatchWriterMode,deadlockCount,w,\$numberLong}','0')::bigint as "pardintentexclusive",
coalesce(allData#>> '{locks,ParallelBatchWriterMode,deadlockCount,r,\$numberLong}','0')::bigint as "pardintentshared",
coalesce(allData#>> '{locks,Global,acquireCount,R,\$numberLong}','0')::bigint as "gloarshared", 
coalesce(allData#>>'{locks,Global,acquireCount,W,\$numberLong}','0')::bigint as "gloarexclusive",
coalesce(allData#>>'{locks,Global,acquireCount,w,\$numberLong}','0')::bigint as "gloarintentexclusive",
coalesce(allData#>>'{locks,Global,acquireCount,r,\$numberLong}','0')::bigint as "gloarintentshared",
coalesce(allData#>> '{locks,Global,acquireWaitCount,R,\$numberLong}','0')::bigint as "gloawshared",
coalesce(allData#>>'{locks,Global,acquireWaitCount,W,\$numberLong}','0')::bigint as "gloawexclusive",
coalesce(allData#>>'{locks,Global,acquireWaitCount,w,\$numberLong}','0')::bigint as "gloawintentexclusive",
coalesce(allData#>>'{locks,Global,acquireWaitCount,r,\$numberLong}','0')::bigint as "gloawintentshared",
coalesce(allData#>> '{locks,Global,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "glotrshared",
coalesce(allData#>>'{locks,Global,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "glotexclusive",
coalesce(allData#>>'{locks,Global,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "glotintentexclusive",
coalesce(allData#>>'{locks,Global,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "glotintentshared",
coalesce(allData#>> '{locks,Global,deadlockCount,R,\$numberLong}','0')::bigint as "glodshared",
coalesce(allData#>>'{locks,Global,deadlockCount,W,\$numberLong}','0')::bigint as "glodexclusive", 
coalesce(allData#>>'{locks,Global,deadlockCount,w,\$numberLong}','0')::bigint as "glodintentexclusive",
coalesce(allData#>>'{locks,Global,deadlockCount,r,\$numberLong}','0')::bigint as "glodintentshared",
coalesce(allData#>> '{locks,Database,acquireCount,R,\$numberLong}','0')::bigint as "dataacshared",
coalesce(allData#>>'{locks,Database,acquireCount,W,\$numberLong}','0')::bigint as "dataacexclusive", 
coalesce(allData#>>'{locks,Database,acquireCount,w,\$numberLong}','0')::bigint as "dataacintentexclusive",
coalesce(allData#>>'{locks,Database,acquireCount,r,\$numberLong}','0')::bigint as "dataacintentshared",
coalesce(allData#>> '{locks,Database,acquireWaitCount,R,\$numberLong}','0')::bigint as "dataawshared", 
coalesce(allData#>>'{locks,Database,acquireWaitCount,W,\$numberLong}','0')::bigint as "dataawexclusive",
coalesce(allData#>>'{locks,Database,acquireWaitCount,w,\$numberLong}','0')::bigint as "dataawintentexclusive",
coalesce(allData#>>'{locks,Database,acquireWaitCount,r,\$numberLong}','0')::bigint as "dataawintentshared",
coalesce(allData#>> '{locks,Database,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "datatshared",
coalesce(allData#>>'{locks,Database,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "datatexclusive",
coalesce(allData#>>'{locks,Database,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "datatintentexclusive",
coalesce(allData#>>'{locks,Database,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "datatintentshared",
coalesce(allData#>> '{locks,Database,deadlockCount,R,\$numberLong}','0')::bigint as "datadshared", 
coalesce(allData#>>'{locks,Database,deadlockCount,W,\$numberLong}','0')::bigint as "datadexlusive", 
coalesce(allData#>>'{locks,Database,deadlockCount,w,\$numberLong}','0')::bigint as "datadintentexlusive", 
coalesce(allData#>>'{locks,Database,deadlockCount,r,\$numberLong}','0')::bigint as "datadintentshared",
coalesce(allData#>> '{locks,Collection,acquireCount,R,\$numberLong}','0')::bigint as "colacshared", 
coalesce(allData#>>'{locks,Collection,acquireCount,W,\$numberLong}','0')::bigint as "colacexclusive",
coalesce(allData#>>'{locks,Collection,acquireCount,w,\$numberLong}','0')::bigint as "colacintentexclusive",
coalesce(allData#>>'{locks,Collection,acquireCount,r,\$numberLong}','0')::bigint as "colarintentshared",
coalesce(allData#>> '{locks,Collection,acquireWaitCount,R,\$numberLong}','0')::bigint as "colawshared",
coalesce(allData#>>'{locks,Collection,acquireWaitCount,W,\$numberLong}','0')::bigint as "colawexclusive",
coalesce(allData#>>'{locks,Collection,acquireWaitCount,w,\$numberLong}','0')::bigint as "colawintentexclusive", 
coalesce(allData#>>'{locks,Collection,acquireWaitCount,r,\$numberLong}','0')::bigint as "colawintentshared",
coalesce(allData#>> '{locks,Collection,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "coltshared",
coalesce(allData#>>'{locks,Collection,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "coltexclusive",
coalesce(allData#>>'{locks,Collection,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "coltintentexclusive",
coalesce(allData#>>'{locks,Collection,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "coltintentshared",
coalesce(allData#>> '{locks,Collection,deadlockCount,R,\$numberLong}','0')::bigint as "coldshared",
coalesce(allData#>>'{locks,Collection,deadlockCount,W,\$numberLong}','0')::bigint as "coldexclusive",
coalesce(allData#>>'{locks,Collection,deadlockCount,w,\$numberLong}','0')::bigint as "coldintentexclusive",
coalesce(allData#>>'{locks,Collection,deadlockCount,r,\$numberLong}','0')::bigint as "coldintentshared",
coalesce(allData#>> '{locks,Mutex,acquireCount,R,\$numberLong}','0')::bigint as "colmuacshared",
coalesce(allData#>>'{locks,Mutex,acquireCount,W,\$numberLong}','0')::bigint as "colmuacexclusive",
coalesce(allData#>>'{locks,Mutex,acquireCount,w,\$numberLong}','0')::bigint as "colmuacintentexclusive",
coalesce(allData#>>'{locks,Mutex,acquireCount,r,\$numberLong}','0')::bigint as "colmuacintentshared",
coalesce(allData#>> '{locks,Mutex,acquireWaitCount,R,\$numberLong}','0')::bigint as "colmuawshared",
coalesce(allData#>>'{locks,Mutex,acquireWaitCount,W,\$numberLong}','0')::bigint as "colmuawexclusive",
coalesce(allData#>>'{locks,Mutex,acquireWaitCount,w,\$numberLong}','0')::bigint as "colmuawintentexclusive",
coalesce(allData#>>'{locks,Mutex,acquireWaitCount,r,\$numberLong}','0')::bigint as "colmuawintentshared",
coalesce(allData#>> '{locks,Mutex,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "colmutshared", 
coalesce(allData#>>'{locks,Mutex,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "colmutexclusive",
coalesce(allData#>>'{locks,Mutex,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "colmutintentexclusive",
coalesce(allData#>>'{locks,Mutex,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "colmutintentshared",
coalesce(allData#>> '{locks,Mutex,deadlockCount,R,\$numberLong}','0')::bigint as "colmudshared",
coalesce(allData#>>'{locks,Mutex,deadlockCount,W,\$numberLong}','0')::bigint as "colmudexclusive",
coalesce(allData#>>'{locks,Mutex,deadlockCount,w,\$numberLong}','0')::bigint as "colmudintentexclusive",
coalesce(allData#>>'{locks,Mutex,deadlockCount,r,\$numberLong}','0')::bigint as "colmudintentshared",
coalesce(allData#>> '{locks,Metadata,acquireCount,R,\$numberLong}','0')::bigint as "colmeacshared",
coalesce(allData#>>'{locks,Metadata,acquireCount,W,\$numberLong}','0')::bigint as "colmeacexclusive", 
coalesce(allData#>>'{locks,Metadata,acquireCount,w,\$numberLong}','0')::bigint as "colmeacintentexclusive",
coalesce(allData#>>'{locks,Metadata,acquireCount,r,\$numberLong}','0')::bigint as "colmeacintentshared",
coalesce(allData#>> '{locks,Metadata,acquireWaitCount,R,\$numberLong}','0')::bigint as "colmeawshared", 
coalesce(allData#>>'{locks,Metadata,acquireWaitCount,W,\$numberLong}','0')::bigint as "colmeawexclusive",
coalesce(allData#>>'{locks,Metadata,acquireWaitCount,w,\$numberLong}','0')::bigint as "colmeawintentexclusive",
coalesce(allData#>>'{locks,Metadata,acquireWaitCount,r,\$numberLong}','0')::bigint as "colmeawintentshared",
coalesce(allData#>> '{locks,Metadata,timeAcquiringMicros,R,\$numberLong}','0')::bigint as "colmetshared",
coalesce(allData#>>'{locks,Metadata,timeAcquiringMicros,W,\$numberLong}','0')::bigint as "colmetexclusive",
coalesce(allData#>>'{locks,Metadata,timeAcquiringMicros,w,\$numberLong}','0')::bigint as "colmetintentexclusive",
coalesce(allData#>>'{locks,Metadata,timeAcquiringMicros,r,\$numberLong}','0')::bigint as "colmetintentshared",
coalesce(allData#>> '{locks,Metadata,deadlockCount,R,\$numberLong}','0')::bigint as "colmedshared",
coalesce(allData#>>'{locks,Metadata,deadlockCount,W,\$numberLong}','0')::bigint as "colmedexclusive",
coalesce(allData#>>'{locks,Metadata,deadlockCount,w,\$numberLong}','0')::bigint as "colmedintentexclusive", 
coalesce(allData#>>'{locks,Metadata,deadlockCount,r,\$numberLong}','0')::bigint as "colmedintentshared",
coalesce(allData#>> '{locks,oplog,acquireCount,R,\$numberLong}','0')::bigint as "opacshared",
coalesce(allData#>>'{locks,oplog,acquireCount,W,\$numberLong}','0')::bigint  as "opacexclusive",
coalesce(allData#>>'{locks,oplog,acquireCount,w,\$numberLong}','0')::bigint  as "opacintentexclusive",
coalesce(allData#>>'{locks,oplog,acquireCount,r,\$numberLong}','0')::bigint as "opacintentshared",
coalesce(allData#>> '{locks,oplog,acquireWaitCount,R,\$numberLong}','0')::bigint  as "opawshared",
coalesce(allData#>>'{locks,oplog,acquireWaitCount,W,\$numberLong}','0')::bigint  as "opawexclusive", 
coalesce(allData#>>'{locks,oplog,acquireWaitCount,w,\$numberLong}','0')::bigint as "opawintentexclusive",
coalesce(allData#>>'{locks,oplog,acquireWaitCount,r,\$numberLong}','0')::bigint as "opawintentshared",
coalesce(allData#>> '{locks,oplog,timeAcquiringMicros,R,\$numberLong}','0')::bigint  as "opatshared",
coalesce(allData#>>'{locks,oplog,timeAcquiringMicros,W,\$numberLong}','0')::bigint  as "opatexclusive",
coalesce(allData#>>'{locks,oplog,timeAcquiringMicros,w,\$numberLong}','0')::bigint  as "opatintentexclusive", 
coalesce(allData#>>'{locks,oplog,timeAcquiringMicros,r,\$numberLong}','0')::bigint  as "opatintentshared", 
coalesce(allData#>> '{locks,oplog,deadlockCount,R,\$numberLong}','0')::bigint as "opdshared",
coalesce(allData#>>'{locks,oplog,deadlockCount,W,\$numberLong}','0')::bigint as "opdexlusive", 
coalesce(allData#>>'{locks,oplog,deadlockCount,w,\$numberLong}','0')::bigint  as "opdintentexlusive",
coalesce(allData#>>'{locks,oplog,deadlockCount,r,\$numberLong}','0')::bigint  as "opdintentshared" ,serialno, timestamp from (select  replace(convert_from(decode(mainresult,'base64'),'UTF-8'),'<Binary Data>','0')::json as "alldata",serialno, timestamp from mongodbexecutionstat_$TRNUM)  as "data") as "mongoColumns") mongo USING (serialno, "timestamp")"


        ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT NULL::character varying AS databasename,
		NULL::character varying AS locktype,
		NULL::character varying AS requestmode,
		NULL::character varying AS requeststatus,
		NULL::character varying AS loginname,
		'-1'::bigint AS globalid,
		NULL::character varying AS servername,
		'-1'::bigint AS sessionid,
		'-1'::bigint AS requestcount,
		NULL::text AS modename,
		NULL::character varying AS granted,
		'-1'::bigint AS processid,
		NULL::character varying AS statechange,
		NULL::text AS ctime,
		NULL::text AS block,
		NULL::text AS objectname,
		NULL::text AS lockcategory,
		NULL::text AS description,
                -1::bigint AS replicationTimingAccMicrosCount,
                -1::bigint AS parallelAcquireCount,
                -1::bigint AS parallelAcquireWaitCount,
                NULL::text AS parallelAcciWaitCountDetails,
                -1::bigint AS parallelTimingAccMicrosCount,
                NULL::text AS parallelTimingAccMicrosCountDetails,
                -1::bigint AS parallelDeadLockCount,
                -1::bigint AS globalAcquireCount,
                -1::bigint AS globalAcquireWaitCount,
                -1::bigint AS globalTimingAccMicrosCount,
                -1::bigint AS globalDeadLockCount,
                NULL::text AS globalDeadLockCountDetails,
                -1::bigint AS databaseAcquireCount,
                NULL::text AS databaseAcciCountDetails,
                -1::bigint AS databaseAcquireWaitCount,
                NULL::text AS databaseAcciWaitCountDetails,
                -1::bigint AS databaseTimingAccMicrosCount,
                NULL::text AS databaseTimingAccMicrosCountDetails,
                -1::bigint AS databaseDeadLockCount,
                NULL::text AS databaseDeadLockCountDetails,
                -1::bigint AS collectionAcquireCount,
                NULL::text AS collectionAcciCountDetails,
                -1::bigint AS collectionAcquireWaitCount,
                NULL::text AS collectionAcciWaitCountDetails,
                -1::bigint AS collectionTimingAccMicrosCount,
                NULL::text AS collectionTimingAccMicrosCountDetails,
                -1::bigint AS collectionDeadLockCount,
                NULL::text AS collectionDeadLockCountDetails,
                -1::bigint AS mutexAcquireCount,
                NULL::text AS mutexAcciCountDetails,
                -1::bigint AS mutexAcquireWaitCount,
                -1::bigint AS mutexTimingAccMicrosCount,
                -1::bigint AS mutexDeadLockCount,
                NULL::text AS mutexTimingAccMicrosCountDetails,
                -1::bigint AS metadataAcquireCount,
                -1::bigint AS metadataAcquireWaitCount,
                -1::bigint AS metadataTimingAccMicrosCount,
                NULL::text AS metadataTimingAccMicrosCountDetails,
                -1::bigint AS metadataDeadLockCount,
                -1::bigint AS oplogAcciCount,
                NULL::text AS oplogAcciCountDetails,
                -1::bigint AS oplogAcciWaitCount,
                NULL::text AS oplogAcciWaitCountDetails,
                -1::bigint AS oplogTimingAccMicrosCount,
                NULL::text AS oplogTimingAccMicrosCountDetails,
                -1::bigint AS oplogDeadLockCount,
                NULL::text AS oplogDeadLockCountDetails,
		NULL::text AS replicationDeadLockCountDetails,
                NULL::text AS metadataDeadLockCountDetails,
                -1::bigint AS replicationAcquireWaitCount,
                NULL::text AS replicationAcciWaitCountDetails,
		'-1'::bigint AS serialno,
		'-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_jobsstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_jobsstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT c.lastrundate,
		c.jobname,
		c.nextruntime,
		c.description,
		s.globalid,
		s.servername,
		c.jobid,
		c.enabled::character varying AS enabled,
		c.jobcategory,
		c.lastrunoutcome,
		c.currentstatus,
		NULL::character varying AS status,
		c.sessionid,
		c.lastrunfinish,
		c.currentduration,
		c.lastrunduration,
		NULL::character varying AS schemaname,
		NULL::character varying AS definer,
		NULL::character varying AS timezone,
		NULL::character varying AS executeat,
		NULL::text AS "interval",
		NULL::character varying AS sqlmode,
		NULL::character varying AS starts,
		NULL::character varying AS oncompletion,
		NULL::character varying AS created,
		NULL::character varying AS lastaltered,
		'-1'::double precision AS originator,
		NULL::character varying AS eventcomment,
		NULL::text AS autodrop,
		NULL::text AS restartable,
		'-1'::bigint AS jobpriority,
		'-1'::bigint AS runcount,
		'-1'::bigint AS failurecount,
		'-1'::bigint AS maxfailures,
		'-1'::bigint AS retrycount,
		NULL::text AS logginglevel,
		NULL::text AS system,
		NULL::text AS jobcreater,
		NULL::text AS comments,
		NULL::text AS jobaction,
		p.serialno,
		p."timestamp"
   FROM parentjobstat_$TRNUM p
     LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
     RIGHT JOIN mssqljobstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISMYSQL = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT my.lastexecuted AS lastrundate,
		my.eventname AS jobname,
		NULL::character varying AS nextruntime,
		my.eventdefination AS description,
		s.globalid,
		s.servername,
		NULL::character varying AS jobid,
		NULL::character varying AS enabled,
		my.eventtype AS jobcategory,
		'-1'::smallint AS lastrunoutcome,
		'-1'::smallint AS currentstatus,
		my.status,
		'-1'::bigint AS sessionid,
		my.ends AS lastrunfinish,
		'-1'::bigint AS currentduration,
		'-1'::bigint AS lastrunduration,
		my.eventschema AS schemaname,
		my.definer,
		my.timezone,
		my.executeat,
		(my.intervalval::text || ' '::text) || my.intervalfield::text AS "interval",
		my.sqlmode,
		my.starts,
		my.oncompletion,
		my.created,
		my.lastaltered,
		my.originator,
		my.eventcomment,
		NULL::text AS autodrop,
		NULL::text AS restartable,
		'-1'::bigint AS jobpriority,
		'-1'::bigint AS runcount,
		'-1'::bigint AS failurecount,
		'-1'::bigint AS maxfailures,
		'-1'::bigint AS retrycount,
		NULL::text AS logginglevel,
		NULL::text AS system,
		NULL::text AS jobcreater,
		NULL::text AS comments,
		NULL::text AS jobaction,
		p.serialno,
		p."timestamp"
   FROM parentjobstat_$TRNUM p
     LEFT JOIN dbsourcemeta_$TRNUM s USING (globalid)
     RIGHT JOIN mysqleventstat_$TRNUM my USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT orac.laststartdate AS lastrundate,
		NULL::character varying AS jobname,
		NULL::character varying AS nextruntime,
		orac.jobclass AS description,
		s.globalid,
		s.servername,
		orac.jobname AS jobid,
		orac.enabled,
		orac.jobtype AS jobcategory,
		'-1'::smallint AS lastrunoutcome,
		'-1'::smallint AS currentstatus,
		orac.state AS status,
		'-1'::bigint AS sessionid,
		orac.enddate AS lastrunfinish,
		'-1'::bigint AS currentduration,
		'-1'::bigint AS lastrunduration,
		NULL::character varying AS schemaname,
		NULL::character varying AS definer,
		NULL::character varying AS timezone,
		NULL::character varying AS executeat,
		orac.repeatinterval AS "interval",
		NULL::character varying AS sqlmode,
		orac.startdate AS starts,
		NULL::character varying AS oncompletion,
		NULL::character varying AS created,
		NULL::character varying AS lastaltered,
		'-1'::double precision AS originator,
		orac.comments AS eventcomment,
		orac.autodrop,
		orac.restartable,
		orac.jobpriority,
		orac.runcount,
		orac.failurecount,
		orac.maxfailures,
		orac.retrycount,
		orac.logginglevel,
		orac.system,
		orac.jobcreater,
		orac.comments,
		orac.jobaction,
         p.serialno, 
         p."timestamp"         
  FROM   parentjobstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
		RIGHT join oraclejobstat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT NULL::character varying AS lastrundate,
		NULL::character varying AS jobname,
		NULL::character varying AS nextruntime,
		NULL::character varying AS description,
		-1::bigint AS globalid,
		NULL::character varying AS servername,
		NULL::character varying AS jobid,
		NULL::character varying AS enabled,
		NULL::character varying AS jobcategory,
		'-1'::smallint AS lastrunoutcome,
		'-1'::smallint AS currentstatus,
		NULL::character varying AS status,
		'-1'::bigint AS sessionid,
		NULL::character varying AS lastrunfinish,
		'-1'::bigint AS currentduration,
		'-1'::bigint AS lastrunduration,
		NULL::character varying AS schemaname,
		NULL::character varying AS definer,
		NULL::character varying AS timezone,
		NULL::character varying AS executeat,
		NULL::text AS "interval",
		NULL::character varying AS sqlmode,
		NULL::character varying AS starts,
		NULL::character varying AS oncompletion,
		NULL::character varying AS created,
		NULL::character varying AS lastaltered,
		'-1'::double precision AS originator,
		NULL::character varying AS eventcomment,
		NULL::character varying AS autodrop,
		NULL::character varying AS restartable,
		'-1'::bigint AS jobpriority,
		'-1'::bigint AS runcount,
		'-1'::bigint AS failurecount,
		'-1'::bigint AS maxfailures,
		'-1'::bigint AS retrycount,
		NULL::character varying AS logginglevel,
		NULL::character varying AS system,
		NULL::character varying AS jobcreater,
		NULL::character varying AS comments,
		NULL::text AS jobaction,
         '-1'::bigint AS serialno, 
         '-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_iobyfilestats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_iobyfilestats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT c.dbname   AS databasename, 
         c.filename, 
         c.filetype, 
         c.kbondisk, 
         s.globalid, 
         s.servername, 
         c.totalio, 
         c.kbread/(1024) kbread, 
         c.kbwritten/(1024) kbwritten, 
         c.totalwaittime, 
         c.readwaittime, 
         c.writewaittime, 
         c.currentreadwaittime, 
         c.currentwritewaittime, 
         c.currentwaittime, 
         c.totaliorate, 
         c.readrate readsrate, 
         c.writerate,
         '-1'::bigint AS largereadmb,
         '-1'::bigint AS largewritemb,
         '-1'::bigint AS smallreadreqs,
         '-1'::bigint AS smallwritereqs,
         '-1'::bigint AS smallsyncreadreqs,
         '-1'::bigint AS largereadreqs,
         '-1'::bigint AS largewritereqs,
         NULL::text AS smallreadservicetime,
         NULL::text AS smallwriteservicetime,
         '-1'::bigint AS smallsyncreadlatency,
         NULL::text AS largereadservicetime,
         NULL::text AS largewriteservicetime,
         '-1'::bigint AS retriesonrrror,
         NULL::text AS tablespacename,
         '-1'::bigint AS bytes,
         '-1'::bigint AS blocks,
         NULL::text AS status,
         NULL::text AS autoextensible,
         '-1'::bigint AS maxbytes,
         '-1'::bigint AS maxblocks,
         '-1'::bigint AS incrementby,
         '-1'::bigint AS userbytes,
         '-1'::bigint AS userblocks,
         NULL::text AS onlinestatus,
         '-1'::bigint AS phyrds,
         '-1'::bigint AS phywrts,
         '-1'::bigint AS phyblkrd,
         '-1'::bigint AS phyblkwrt,
         '-1'::bigint AS singleblkrds,
         '-1'::bigint AS singleblkrdtim,
         '-1'::bigint AS avgiotim,
         '-1'::bigint AS lstiotim,
         '-1'::bigint AS miniotim,
         NULL::text AS asynchio,
         p.serialno, 
         p."timestamp" 
  FROM   parentiobyfilestat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join mssqliobyfilestat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISPOSTGRES = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT pg.dbname AS databasename,
         pg.relname AS filename,
         NULL::text AS filetype,
         '-1'::numeric AS kbondisk,
         s.globalid,
         s.servername,
         '-1'::numeric AS totalio,
         cast(pg.heapblksread as numeric) AS kbread,
         cast(pg.heapblkshit as numeric) AS kbwritten,
         '-1'::bigint AS totalwaittime,
         '-1'::bigint AS readwaittime,
         '-1'::bigint AS writewaittime,
         '-1'::bigint AS currentreadwaittime,
         '-1'::bigint AS currentwritewaittime,
         '-1'::bigint AS currentwaittime,
         '-1'::double precision AS totaliorate,
         pg.tidxblksread AS readsrate,
         pg.tidxblkshit AS writerate,
         '-1'::bigint AS largereadmb,
         '-1'::bigint AS largewritemb,
         '-1'::bigint AS smallreadreqs,
         '-1'::bigint AS smallwritereqs,
         '-1'::bigint AS smallsyncreadreqs,
         '-1'::bigint AS largereadreqs,
         '-1'::bigint AS largewritereqs,
         NULL::text AS smallreadservicetime,
         NULL::text AS smallwriteservicetime,
         '-1'::bigint AS smallsyncreadlatency,
         NULL::text AS largereadservicetime,
         NULL::text AS largewriteservicetime,
         '-1'::bigint AS retriesonrrror,
         pg.schemaname AS tablespacename,
         '-1'::bigint AS bytes,
         '-1'::bigint AS blocks,
         NULL::text AS status,
         NULL::text AS autoextensible,
         '-1'::bigint AS maxbytes,
         '-1'::bigint AS maxblocks,
         '-1'::bigint AS incrementby,
         '-1'::bigint AS userbytes,
         '-1'::bigint AS userblocks,
         NULL::text AS onlinestatus,
         pg.idxblksread::bigint AS phyrds,
         pg.idxblkshit::bigint AS phywrts,
         pg.toastblksread::bigint AS phyblkrd,
         pg.toastblkshit::bigint AS phyblkwrt,
         '-1'::bigint AS singleblkrds,
         '-1'::bigint AS singleblkrdtim,
         '-1'::bigint AS avgiotim,
         '-1'::bigint AS lstiotim,
         '-1'::bigint AS miniotim,
         NULL::text AS asynchio,
         p.serialno,
         p."timestamp"
  FROM   parentiobyfilestat_$TRNUM p
         left join dbsourcemeta_$TRNUM s USING (globalid)
         RIGHT join postgresioactivitystat_$TRNUM pg USING (serialNo,"timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT NULL::text AS databasename, 
         orac.filename, 
         orac.filetype, 
         '-1'::numeric AS kbondisk, 
         s.globalid, 
         s.servername, 
         '-1'::numeric AS totalio, 
         orac.smallreadmb::numeric AS kbread, 
         orac.smallwritemb::numeric AS kbwritten, 
         '-1'::bigint AS totalwaittime, 
         orac.readtim AS readwaittime, 
         orac.writetim AS writewaittime, 
         '-1'::bigint AS currentreadwaittime, 
         '-1'::bigint AS currentwritewaittime, 
         '-1'::bigint AS currentwaittime, 
         '-1'::double precision AS totaliorate, 
         orac.maxiortm::double precision AS readsrate, 
         orac.maxiowtm::double precision AS writerate,
         orac.largereadmb,
         orac.largewritemb,
         orac.smallreadreqs,
         orac.smallwritereqs,
         orac.smallsyncreadreqs,
         orac.largereadreqs,
         orac.largewritereqs,
         cast (orac.smallreadservicetime as varchar),
         cast (orac.smallwriteservicetime as varchar),
         orac.smallsyncreadlatency,
         cast (orac.largereadservicetime as varchar),
         cast (orac.largewriteservicetime as varchar),
         orac.retriesonrrror,
         orac.tablespacename,
         orac.bytes,
         orac.blocks,
         orac.status,
         orac.autoextensible,
         orac.maxbytes,
         orac.maxblocks,
         orac.incrementby,
         orac.userbytes,
         orac.userblocks,
         orac.onlinestatus,
         orac.phyrds,
         orac.phywrts,
         orac.phyblkrd,
         orac.phyblkwrt,
         orac.singleblkrds,
         orac.singleblkrdtim,
         orac.avgiotim,
         orac.lstiotim,
         orac.miniotim,
         orac.asynchio,
         p.serialno, 
         p."timestamp" 
  FROM   parentiobyfilestat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join oracleiobyfilestat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT NULL::text AS databasename, 
         NULL::text AS filename, 
         NULL::text AS filetype, 
         '-1'::numeric AS kbondisk, 
         '-1'::bigint AS globalid, 
         NULL::text AS servername, 
         '-1'::numeric AS totalio,
         '-1'::numeric AS kbread, 
         '-1'::numeric AS kbwritten,
         '-1'::bigint AS totalwaittime,
         '-1'::bigint AS readwaittime,
         '-1'::bigint AS writewaittime,
         '-1'::bigint AS currentreadwaittime,
         '-1'::bigint AS currentwritewaittime,
         '-1'::bigint AS currentwaittime,
         '-1'::double precision AS totaliorate,
         '-1'::double precision AS readsrate, 
         '-1'::double precision AS writerate,
         '-1'::bigint AS largereadmb,
         '-1'::bigint AS largewritemb,
         '-1'::bigint AS smallreadreqs,
         '-1'::bigint AS smallwritereqs,
         '-1'::bigint AS smallsyncreadreqs,
         '-1'::bigint AS largereadreqs,
         '-1'::bigint AS largewritereqs,
         NULL::text AS smallreadservicetime,
         NULL::text AS smallwriteservicetime,
         '-1'::bigint AS smallsyncreadlatency,
         NULL::text AS largereadservicetime,
         NULL::text AS largewriteservicetime,
         '-1'::bigint AS retriesonrrror,
         NULL::text AS tablespacename,
         '-1'::bigint AS bytes,
         '-1'::bigint AS blocks,
         NULL::text AS status,
         NULL::text AS autoextensible,
         '-1'::bigint AS maxbytes,
         '-1'::bigint AS maxblocks,
         '-1'::bigint AS incrementby,
         '-1'::bigint AS userbytes,
         '-1'::bigint AS userblocks,
         NULL::text AS onlinestatus,
         '-1'::bigint AS phyrds,
         '-1'::bigint AS phywrts,
         '-1'::bigint AS phyblkrd,
         '-1'::bigint AS phyblkwrt,
         '-1'::bigint AS singleblkrds,
         '-1'::bigint AS singleblkrdtim,
         '-1'::bigint AS avgiotim,
         '-1'::bigint AS lstiotim,
         '-1'::bigint AS miniotim,
         NULL::text AS asynchio,
         '-1'::bigint AS serialno, 
         '-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_sessionwaitstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_sessionwaitstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         c.sessionid, 
         c.waittype, 
         c.waiting_task_count, 
         c.waittime_ms, 
         c.maxwaittime_ms, 
         c.signalwaittime_ms,
	 NULL::text as parameters,
         NULL::text as state,
	 NULL::text as waitcategory,
		'-1'::bigint AS remainingtimemicro,
         '-1'::bigint AS timesincelastwaitmicro,
		p.serialno,
         p."timestamp" 
  FROM   parentsessionwaitstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         RIGHT join mssqlsessionwaitstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         orac.sessionid, 
         orac.event AS waittype, 
         0::bigint AS waiting_task_count, 
         orac.waittimemicro AS waittime_ms, 
         '-1'::bigint AS maxwaittime_ms, 
         '-1'::bigint AS signalwaittime_ms,
		CASE WHEN orac.p1text != 'NaN' AND  orac.p2text != 'NaN' AND orac.p3text != 'NaN' THEN
	   orac.p1text || ' = ' || orac.p1value || ', ' || orac.p2text || ' = ' || orac.p2value || ', ' || orac.p3text || ' = ' || orac.p3value
		WHEN orac.p1text != 'NaN' AND orac.p2text != 'NaN' THEN
       	   orac.p1text || ' = ' || orac.p1value || ', ' || orac.p2text || ' = ' || orac.p2value
		WHEN orac.p1text != 'NaN' THEN
	   orac.p1text || ' = ' || orac.p1value ELSE 'NaN' END as parameters,
         orac.state,
		orac.waitclass as waitcategory,
		CASE WHEN orac.remainingtimemicro < 0 THEN -123456789 ELSE orac.remainingtimemicro END remainingtimemicro,
         orac.timesincelastwaitmicro,
	 p.serialno,
         p."timestamp" 
  FROM   parentsessionwaitstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
		RIGHT join oraclesessionwaitstat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT '-1'::bigint AS globalid, 
         NULL::text AS servername, 
         '-1'::bigint AS sessionid, 
         NULL::text AS waittype, 
         '-1'::bigint AS waiting_task_count, 
         '-1'::bigint AS waittime_ms, 
         '-1'::bigint AS maxwaittime_ms, 
         '-1'::bigint AS signalwaittime_ms,
	 NULL::text as parameters,
         NULL::text as state,
	 NULL::text as waitcategory,
	 '-1'::bigint AS remainingtimemicro,
         '-1'::bigint AS timesincelastwaitmicro,
	 '-1'::bigint AS serialno,
         '-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_connectionstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_connectionstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         c.lastwaittype, 
        c.dbname, 
         c.waittime, 
         c.cpu, 
         c.physicalio,
        c.logintime,
        c.lastbatch,
        c.status,
        c.hostname,
        c.loginname, 
        c.sqlhandle, 
        c.query AS sqlquery,
        '-1'::bigint AS rowcount,
	'-1'::double precision AS currconnection,
        '-1'::double precision AS totalconnection,
         p.serialno,
         p."timestamp" 
  FROM   parentconnectionstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         RIGHT join mssqlconnectionstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISPOSTGRES = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         NULL::text AS lastwaittype, 
        pl.dbname, 
         '-1'::bigint AS waittime, 
         '-1'::bigint AS cpu, 
         '-1'::bigint AS physicalio,
        pl.logintime,
        pl.lastbatchtime AS lastbatch,
        pl.status,
        pl.clienthostname AS hostname,
        pl.loginname, 
         NULL::text AS sqlhandle, 
         NULL::text AS sqlquery,
         pl.rowcount,
	'-1'::double precision AS currconnection,
         '-1'::double precision AS totalconnection,
         p.serialno,
         p."timestamp" 
  FROM   parentconnectionstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         RIGHT JOIN postgresconnectionstat_$TRNUM pl USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISMYSQL = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         NULL::text AS lastwaittype, 
        NULL::text AS  dbname, 
         '-1'::bigint AS waittime, 
         '-1'::bigint AS cpu, 
         '-1'::bigint AS physicalio,
        NULL::text AS logintime,
        NULL::text AS lastbatch,
        NULL::text AS status,
        my.host AS hostname,
        my.username AS loginname, 
         NULL::text AS sqlhandle, 
         NULL::text AS sqlquery,
         '-1'::bigint AS rowcount,
	my.currconnection,
         my.totalconnection,
         p.serialno,
         p."timestamp" 
  FROM   parentconnectionstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         RIGHT JOIN mysqlconnectionstat_$TRNUM my USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT '-1'::bigint AS globalid, 
         NULL::text AS servername, 
         NULL::text AS lastwaittype, 
        NULL::text AS  dbname, 
         '-1'::bigint AS waittime, 
         '-1'::bigint AS cpu, 
         '-1'::bigint AS physicalio,
        NULL::text AS logintime,
        NULL::text AS lastbatch,
        NULL::text AS status,
        NULL::text AS hostname,
        NULL::text AS loginname, 
         NULL::text AS sqlhandle, 
         NULL::text AS sqlquery,
         '-1'::bigint AS rowcount,
	'-1'::double precision AS currconnection,
         '-1'::double precision AS totalconnection,
         '-1'::bigint AS serialno,
         '-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_jobhistorystats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_jobhistorystats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT c.rundate,
         c.jobname,
         CASE c.runstatus WHEN 0 THEN 'Failed'
		   WHEN 1 THEN 'Succeeded'
		   WHEN 2 THEN 'Retry' 
		   WHEN 3 THEN 'Canceled'
		   WHEN 4 THEN 'In Progress'
		  ELSE '' END strrunstatus,
		 c.runstatus AS numrunstatus,
		 s.globalid, 
         s.servername, 
         c.jobid,
         c.stepid, 
         c.stepname, 
         c.message, 
         cast(c.runduration as varchar) AS runduration, 
         c.retryattempt,
         NULL::text AS logdate,
         NULL::text AS reqstartdate,
         NULL::text AS cpu,
         NULL::text AS sessionid, 
	NULL::text AS jobsubname,
         p.serialno, 
         p."timestamp" 
  FROM   parentjobhistorystat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         RIGHT join mssqljobhistorystat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT orac.actualstartdate AS rundate,
         NULL::text AS jobname,
         orac.status AS strrunstatus,
		CASE orac.status WHEN 'FAILED' THEN 0
	    WHEN 'COMPLETED' THEN 1
	    WHEN 'SUCCEEDED' THEN 1
	    WHEN 'RETRY SCHEDULED' THEN 2
	    WHEN 'SCHEDULED' THEN 2
	    WHEN 'REMOTE' THEN 2
	    WHEN 'CHAIN_STALLED' THEN 2
	    WHEN 'DISABLED' THEN 3
	    WHEN 'BROKEN' THEN 3
	    WHEN 'RUNNING' THEN 4
	    END numrunstatus,
	 s.globalid, 
         s.servername, 
         orac.jobname AS jobid,
         '-1'::bigint AS stepid, 
         NULL::text AS stepname, 
         orac.additionalinfo AS message, 
         orac.runduration AS runduration, 
         '-1'::integer AS retryattempt,
         orac.logdate,
         orac.reqstartdate,
         orac.cpu,
         orac.sessionid, 
	 orac.jobsubname,
         p.serialno, 
         p."timestamp" 
  FROM   parentjobhistorystat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
	RIGHT join oraclejobhistorystat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT NULL::text AS rundate,
         NULL::text AS jobname,
         NULL::text AS strrunstatus,
	 '-1'::integer AS numrunstatus,
	 '-1'::bigint AS globalid, 
         NULL::text AS servername, 
         NULL::text AS jobid,
         '-1'::bigint AS stepid, 
         NULL::text AS stepname, 
         NULL::text AS message, 
         NULL::text AS runduration, 
         '-1'::integer AS retryattempt,
         NULL::text AS logdate,
         NULL::text AS reqstartdate,
         NULL::text AS cpu,
         NULL::text AS sessionid, 
	 NULL::text AS jobsubname,
         '-1'::bigint AS serialno, 
         '-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_servicesstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_servicesstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         c.servicename, 
         c.starttype, 
         c.starttypedesc, 
         c.status, 
         c.statusdesc, 
         c.processid, 
         c.laststartuptime, 
         c.serviceaccount,
	 NULL::text AS goal,
         NULL::text AS dtp,
         NULL::text AS block,
         NULL::text AS aqhanotification,
         NULL::text AS clbgoal,
         '-1'::bigint AS executions,
         '-1'::bigint AS buffergets,
         '-1'::bigint AS directwrites,
         '-1'::bigint AS diskreads,
         '-1'::bigint AS rowsprocessed,
         '-1'::bigint AS sorts,
         '-1'::bigint AS fetches,
	 NULL::text AS cputime,
         NULL::text AS elapsedtime,
	 p.serialno,
         p."timestamp" 
  FROM   parentservicestat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         RIGHT join mssqlservicestat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         orac.name AS servicename, 
         '-1'::integer AS starttype, 
         NULL::text AS starttypedesc, 
         '-1'::integer AS status, 
         CASE WHEN orac.block = 'NO' THEN 'Running' ELSE 'Paused' END statusdesc, 
         '-1'::bigint AS processid, 
         orac.creationdate AS laststartuptime, 
         NULL::text AS serviceaccount,
	 orac.goal,
         orac.dtp,
         orac.block,
         orac.aqhanotification,
         orac.clbgoal,
         orac.executions,
         orac.buffergets,
         orac.directwrites,
         orac.diskreads,
         orac.rowsprocessed,
         orac.sorts,
         orac.fetches,
	 cast (orac.cputime as varchar),
         cast (orac.elapsedtime as varchar),
	 p.serialno,
         p."timestamp" 
  FROM   parentservicestat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
		RIGHT join oracleservicestat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT '-1'::bigint AS globalid, 
         NULL::text AS servername, 
         NULL::text AS servicename, 
         '-1'::integer AS starttype, 
         NULL::text AS starttypedesc, 
         '-1'::integer AS status, 
         NULL::text AS statusdesc, 
         '-1'::bigint AS processid, 
         NULL::text AS laststartuptime, 
         NULL::text AS serviceaccount,
	 NULL::text AS goal,
         NULL::text AS dtp,
         NULL::text AS block,
         NULL::text AS aqhanotification,
         NULL::text AS clbgoal,
         '-1'::bigint AS executions,
         '-1'::bigint AS buffergets,
         '-1'::bigint AS directwrites,
         '-1'::bigint AS diskreads,
         '-1'::bigint AS rowsprocessed,
         '-1'::bigint AS sorts,
         '-1'::bigint AS fetches,
	 NULL::text AS cputime,
         NULL::text AS elapsedtime,
	 '-1'::bigint AS serialno,
         '-1'::bigint AS "timestamp""
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_tempdbstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_tempdbstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         c.sessionid, 
         c.userobjectspace, 
         c.internalobjectspace, 
         c.totalspacemb, 
         c.hostname, 
         c.programname, 
         c.loginname, 
         c.status, 
         c.waittype, 
         c.waittimems,
	 NULL::text AS tablespacename,
         '-1'::bigint AS tempfileblock,
         NULL::text AS autoextensible,
         '-1'::bigint AS maxtempfilesize,
         '-1'::bigint AS maxtempfileblock,
         '-1'::bigint AS incrementby,
         '-1'::bigint AS usertempfileblock,
         p.serialno, 
         p."timestamp", 
         querymeta.sqlid AS normmssqlid, 
         querymeta.query AS sqlquery 
  FROM   parenttempdbstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join querymeta_$TRNUM querymeta USING (sqlid) 
         RIGHT join mssqltempdbstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISORACLE = t ]
then
	if [ $ISUNION = true ]
	then
		QUERY="$QUERY UNION"
	fi
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         '-1'::bigint AS sessionid, 
         orac.usertempfilesize/(1024*1024) ::numeric AS userobjectspace, 
         '-1'::numeric AS internalobjectspace, 
         orac.tempfilesize/(1024*1024) ::numeric AS totalspacemb, 
         NULL::text AS hostname, 
         orac.filename AS programname, 
         NULL::text AS loginname, 
         NULL::text AS status, 
         NULL::text AS waittype, 
         '-1'::bigint AS waittimems,
	 orac.tablespacename,
         orac.tempfileblock,
         orac.autoextensible,
         orac.maxtempfilesize/(1024*1024) as maxtempfilesize,
         orac.maxtempfileblock,
         orac.incrementby,
         orac.usertempfileblock,
         p.serialno, 
         p."timestamp", 
         querymeta.sqlid AS normmssqlid, 
         querymeta.query AS sqlquery 
  FROM   parenttempdbstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join querymeta_$TRNUM querymeta USING (sqlid) 
		RIGHT join oracletempfilestat_$TRNUM orac USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT '-1'::bigint AS globalid, 
         'NULL'::text AS servername, 
         '-1'::bigint AS sessionid, 
         '-1'::numeric AS userobjectspace, 
         '-1'::numeric AS internalobjectspace, 
         '-1'::numeric AS totalspacemb, 
         'NULL'::text AS hostname, 
         'NULL'::text AS programname, 
         'NULL'::text AS loginname, 
         'NULL'::text AS status, 
         'NULL'::text AS waittype, 
         '-1'::bigint AS waittimems,
	 'NULL'::text AS tablespacename,
         '-1'::bigint AS tempfileblock,
         'NULL'::text AS autoextensible,
         '-1'::bigint AS maxtempfilesize,
         '-1'::bigint AS maxtempfileblock,
         '-1'::bigint AS incrementby,
         '-1'::bigint AS usertempfileblock,
         '-1'::bigint AS serialno, 
         '-1'::bigint AS "timestamp", 
         '-1'::bigint AS normmssqlid, 
         'NULL'::text AS sqlquery"
fi

ISUNION=false
QUERY="$QUERY; DROP VIEW dbmonitoring_deadlockstats_$TRNUM;
CREATE OR replace VIEW dbmonitoring_deadlockstats_$TRNUM 
AS"
if [ $ISMSSQL = t ]
then
	QUERY="$QUERY SELECT s.globalid, 
         s.servername, 
         c.PLAN, 
         c.serialno, 
         c."timestamp", 
         c.eventtime 
  FROM   parentdeadlockstat_$TRNUM p 
         left join dbsourcemeta_$TRNUM s USING (globalid) 
         left join mssqldeadlockstat_$TRNUM c USING (serialno, "timestamp")"
	ISUNION=true
fi
if [ $ISUNION = false ]
then			
	QUERY="$QUERY SELECT '-1'::bigint AS globalid, 
         'NULL'::text AS servername, 
         'NULL'::text AS PLAN, 
         '-1'::bigint AS serialno, 
         '-1'::bigint AS "timestamp", 
         'NULL'::text AS eventtime"
fi
QUERY="$QUERY;"
OUTPUT=`psql test cavisson 2>&1<<+
$QUERY
+`

echo "$OUTPUT"|grep -i ERROR 2>&1 >/dev/null 

if [ $? -eq 0 ];then
  echo "$OUTPUT" >$NS_WDIR/logs/TR$TRNUM/.genericDBMonitorViewsLogs
  exit 1
else
  echo "$OUTPUT" >$NS_WDIR/logs/TR$TRNUM/.genericDBMonitorViewsLogs
  exit "0"
fi
