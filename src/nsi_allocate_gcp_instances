#!/bin/bash
. $NS_WDIR/etc/.netcloud/GCP.cfg
GCP_DATA_FILE=$NS_WDIR/etc/.netcloud/GCP.dat

#Taking input from c program
ALLOCATION_ID=$1
REGION=$2
GENERATOR=$3
GEN_CAPACITY=$4
VERSION=$5
WHITELIST_IP_LIST=$6

export SUB_REGION=""
ZONE=""
DEBUG_LEVEL=1
SEARCH_REGION=""
GEN_REQ=0

DATE=`date "+%Y-%m-%d"`
DEBUG_LOG_FILENAME="$NS_WDIR/webapps/netstorm/logs/gen_inst.netstorm-${DATE}.log"
D_IFS="$IFS"
EXIT_STATUS=0

error_log()
{
  echo "`date "+%D %H:%M:%S"`|[$ALLOCATION_ID|GCP|$REGION]$*" >> $DEBUG_LOG_FILENAME
}

debug_log()
{
  if [ "X$DEBUG_LEVEL" == "X0" ]; then
    return
  fi
  error_log "$*"
}

msg_out()
{
  MESSAGE=`echo $*`
  echo "CavError:${MESSAGE//\\}"
  error_log "$MESSAGE"
  exit 1
}

cav_gcloud()
{
  CMD="gcloud $* --verbosity=\"error\""
  debug_log "Command: $CMD"

  RESULT=`eval $CMD 2>&1`
  EXIT_STATUS=$?

  if [ $EXIT_STATUS -eq 0 ]; then
    debug_log "Result: $RESULT"
    if [ "X$RESULT" == "X" ]; then   
      echo -n "$RESULT"
    else
      echo "$RESULT"
    fi
  else
    error_log "Error: $RESULT"
  fi
  return $EXIT_STATUS
}

create_instance()
{
  NAME="$1"
  ZONE="$2"
  TAG="$3"
  ADDR="$4"
  if [ "X$ADDR" == "X" ]; then    
    cav_gcloud compute instances create ${NAME} --source-instance-template=${TEMPLATE} --zone=${ZONE} --tags=${TAG} > /dev/null 2>&1
  else
    cav_gcloud compute instances create ${NAME} --source-instance-template=${TEMPLATE} --zone=${ZONE} --tags=${TAG} --address=${ADDR} > /dev/null 2>&1
  fi
  if [ $? -ne 0 ]; then
    msg_out "Failed to start generator $NAME in $ZONE. $RESULT"
  fi
}

#Create instances for all region
create_instances()
{
  TAG=$1
  NAME_PREFIX=$2
  ZONES=$3
  INST_SIZE=$4
  START_IDX=$5

  debug_log "INFO: Create Instances:: $TAG, Name Prefix:: $NAME_PREFIX, Zone:: $ZONES and Size:: $INST_SIZE"

  IFS=',' ZONES=($ZONES) IFS="$D_IFS"
  NUM_ZONE=${#ZONES[@]}

  for ((n = 0, z=0; n < $INST_SIZE; n++, z++))
  do
    if [ $z -eq $NUM_ZONE ]; then
      z=0
    fi

    I_ID=`cat /dev/urandom | tr -dc 'a-z' | fold -w 4 | head -n 1`
    NAME="${NAME_PREFIX}-${I_ID}"

    if [ "X$WHITELIST_IP_LIST" != "X" ]; then
      IDX=`expr $START_IDX + $n`
      IP_ADDR=${GEN_IP_LIST[$IDX]}
      create_instance "${NAME}" "${ZONES[$z]}" "${TAG}" "${IP_ADDR}" &
    else
      create_instance "${NAME}" "${ZONES[$z]}" "${TAG}" &
    fi
  done

}

#Retry 30 times to check all instances are up. otherwise exited
check_instance_up_or_not()
{
  debug_log "INFO: Checking if all instances are up or not. Interval is 10 sec and retry count is 30"

  for i in {1..30}
  do
    sleep 10
    debug_log "INFO: Checking if all instances are up or not, retry count = $i"
    UP_INST=`cav_gcloud compute instances list --filter="\"tags:${ALLOCATION_ID} AND status:RUNNING AND name~${SEARCH_REGION}\"" --format='"csv[no-heading](name)"' | wc -l` 
  
    debug_log "INFO: $UP_INST instances are started out of $GEN_REQ."
    if [ $UP_INST -eq $GEN_REQ ];then
      break
    fi
  done

  if [ $UP_INST -ne $GEN_REQ ];then
    msg_out "Failed to start $GEN_REQ requested generators. Only $UP_INST instances are started."
  fi
  debug_log "SUCCESS: All instances are up."
}

function version { echo "$@" | awk -F'_' '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; } #Match with a.b.c.d (Exact version match)
function minorversion { echo "$@" | awk -F'_' '{ printf("%d%03d%03d\n", $1,$2,$3); }'; }   #Match with a.b.c (Minor version match)
function majorversion { echo "$@" | awk -F'_' '{ printf("%d%03d\n", $1,$2); }'; }          #Match with a.b (Major version match)

get_version()
{
  LOC_VERSION=""

  VER_LIST=`grep TEMPLATE_v $NS_WDIR/etc/.netcloud/GCP.cfg | awk -F"="  '{print $1}' | awk -F"TEMPLATE_v" '{print $2}' | sort -Vu`
  for ver in $VER_LIST
  do
    if [ "X$VERSION" != "X" ]; then
      if [ $(version $ver) -eq $(version $VERSION) ];then
         LOC_VERSION="_v$ver"
         break;
      fi
      if [ "X$LOC_VERSION" == "X" ];then
         if [ $(minorversion $ver) -eq $(minorversion $VERSION) ];then
           LOC_VERSION="_v$ver"
         elif [ $(majorversion $ver) -eq $(majorversion $VERSION) ];then
           LOC_VERSION="_v$ver"
         fi
      fi
    else
      LOC_VERSION="_v$ver"
    fi
  done
}

validate_and_set_args()
{
  if [ "X$ALLOCATION_ID" == "X" -o "X$REGION" == "X" -o "X$GENERATOR" == "X" -o "X$GEN_CAPACITY" == "X" -o "X$VERSION" == "X" ];then
    msg_out "Required arguments are missing."
  fi

  if [ "X$VERSION" != "XNA" ];then
    VERSION=${VERSION//./_}
  else
    VERSION=""
  fi

  get_version

  LOC_TEMPLATE="TEMPLATE"
  if [ "X$GEN_CAPACITY" == "XHigh" ]; then
    LOC_TEMPLATE="HC_TEMPLATE${LOC_VERSION}"
  elif [ "X$GEN_CAPACITY" == "XMedium" ]; then
    LOC_TEMPLATE="MC_TEMPLATE${LOC_VERSION}"
  elif [ "X$GEN_CAPACITY" == "XLow" ]; then
    LOC_TEMPLATE="LC_TEMPLATE${LOC_VERSION}"
  fi
  LOC_TEMPLATE=${!LOC_TEMPLATE}
 
  if [ "X$LOC_TEMPLATE" != "X" ]; then
     TEMPLATE=$LOC_TEMPLATE
  fi

  if [ "X$TEMPLATE" == "X" ]; then
    msg_out "TEMPLATE is not defined."
  fi

  U_ID=`cat /dev/urandom | tr -dc 'a-z' | fold -w 4 | head -n 1`
  SEARCH_REGION="$U_ID-$ALLOCATION_ID"
}

#################################################################################################################################
#EXECUTION BEGINS HERE

debug_log "nsi_allocate_gcp_instances $@"
#VALIDATE ARGS
validate_and_set_args

#STEP 1: set your project
cav_gcloud "config set project $PROJECT" >/dev/null 2>&1

if [ $? -ne 0 ]; then
  msg_out "Failed to add project $PROJECT."
fi

#STEP 2: Check region and create instance
IFS=',' sub_region=($REGION) IFS="$D_IFS"
IFS=',' num_gen=($GENERATOR) IFS="$D_IFS"

for ((i = 0; i < ${#num_gen[@]}; i++))
do 
  GEN_REQ=`expr $GEN_REQ + ${num_gen[$i]}` 
done

if [ $GEN_REQ -eq 0 ];then
  msg_out "Total number of generator required are zero."
fi

if [ "X$WHITELIST_IP_LIST" != "X" ];then
  IFS=',' GEN_IP_LIST=($WHITELIST_IP_LIST) IFS="$D_IFS"
  if [ ${#GEN_IP_LIST[@]} -lt $GEN_REQ ]; then
    msg_out "Total number of IPs are less than generators."
  fi
fi

IP_IDX=0
for ((i = 0; i < ${#sub_region[@]}; i++))
do
  SUB_REGION=${sub_region[$i]}
  NUM_GEN_REQ=(${num_gen[$i]})
  ZONE=`awk -F'|' '{if($1 == ENVIRON["SUB_REGION"]) print $3}' $GCP_DATA_FILE`
  if [ "X$ZONE" == "X" ];then
    msg_out "Zone is not configured for region $SUB_REGION."
  fi 
  create_instances "$ALLOCATION_ID" "vm-gcp-$SUB_REGION-$SEARCH_REGION-gc" "$ZONE" $NUM_GEN_REQ $IP_IDX 
  IP_IDX=`expr $IP_IDX + $NUM_GEN_REQ`
done


#STEP 3: Check Instances are up or not
check_instance_up_or_not

#Wait for CMON to start
sleep 60
debug_log "INFO: Fetching the instance name and external ip of instances"

cav_gcloud compute instances list --filter="\"tags:${ALLOCATION_ID} AND status:RUNNING AND name~${SEARCH_REGION}\"" --flatten='"networkInterfaces[].accessConfigs[]"' --format='"csv[no-heading,separator=|](name,networkInterfaces.accessConfigs.natIP)"'

if [ $? -ne 0 ]; then
  msg_out "Failed to get name and ip of generator(s)."
fi
debug_log "Name and ip of instances are fetched successfully."

exit 0
