/*This script is changed for supporting new changes in jenkins. Now no need to add Netstorm result publisher script in post build. These changes will be done in 4.6.1#68. This script will work for 4.6.1#68 and above builds*/

pipeline {

agent any

/*Intializing Netstorm test configuration*/
environment {
def url = "http://10.10.50.23:8001/"
def username = "cavisson"
def password = "@dmin"
def project = "default"
def subProject = "default"
def scenario = "richa" //testsuite name will be given
def baselineTR = "-1" //Base line test run will be given as 1386
def testMode = "T"    // If running testsuite then give "T" and if scenario then "N"
def pollInterval = "60"
def profile = "system"
def generateReport = true
}

stages {
stage('Execute Netstorm Test') {
steps {
script {
echo 'Executing Netstorm test'

def report = " "
def automateScripts = ""

def nsConnection = new com.cavisson.jenkins.NetStormConnectionManager(url, username, hudson.util.Secret.fromString(password), project, subProject, scenario, testMode, baselineTR, pollInterval,profile,"", java.lang.Boolean.parseBoolean(generateReport))

def parameter = env.getEnvironment()

parameter.each{ k, v ->

if("${k}".startsWith("Testsuite Name")) {
    def testsuiteName = "${v}";
    def testsuite = testsuiteName.split("/");
    if(testsuite.length == 3) {
       nsConnection.setProject(testsuite[0]);
       nsConnection.setSubProject(testsuite[1]);
       nsConnection.setScenario(testsuite[2]);
       project = testsuite[0]
       subProject = testsuite[1]
       scenario = testsuite[2]
     } else {
       nsConnection.setScenario(testsuiteName);
       scenario = testsuiteName
     }
}
if("${v}".startsWith("NS_SESSION")){
def temp = "${v}".split("_")
if(temp.length > 2)
{
nsConnection.setDuration(temp[2]);
}
} else if("${v}".startsWith("NS_NUM_USERS")) {
def temp = "${v}".split("_")
if(temp.length > 3)
{
nsConnection.setvUsers(temp[3]);
}
} else if("${v}".startsWith("NS_SERVER_HOST")) {
def temp = "${v}".split("_")
if(temp.length > 3)
{
nsConnection.setServerHost(temp[3])
}
} else if("${v}".startsWith("NS_SLA_CHANGE")) {
def temp = "${v}".split("_");
if(temp.length > 3)
{
nsConnection.addSLAValue(key.toString() , temp [3] )
}
} else if("${v}".startsWith("NS_RAMP_UP_SEC") || "${v}".startsWith("NS_RAMP_UP_MIN") || "${v}".startsWith("NS_RAMP_UP_HR")) {
def temp = "${v}".split("_");
if(temp.length > 4)
{
nsConnection.setRampUp(temp[4] + "_" + temp[3])
}
} else if("${v}".startsWith("EMAIL_IDS_TO")) {
  def temp = "${v}".split("_");
  if(temp.length > 3)
     nsConnection.setEmailIdTo(temp[3]);
} else if("${v}".startsWith("EMAIL_IDS_CC")) {
   def temp = "${v}".split("_");
  if(temp.length > 3)
    nsConnection.setEmailIdCc(temp[3]);
} else if("${v}".startsWith("EMAIL_IDS_BCC")) {
   def temp = "${v}".split("_");
  if(temp.length > 3)
     nsConnection.setEmailIdBcc(temp[3]);
} 
else if("${v}".startsWith("NS_AUTOSCRIPT")) {
def temp = "${v}".split("_", 3);
if(temp.length > 2)
{

if(automateScripts.equals(""))
automateScripts = temp[2];
else
automateScripts = automateScripts + "," +temp[2];
}
}
}

nsConnection.setAutoScript(automateScripts)

/*
* Refrece variable for netstorm builder
*/
 def nsBuild = new com.cavisson.jenkins.NetStormBuilder(url, username, password,
 project, subProject, scenario, testMode, baselineTR, pollInterval,"","","","","","",profile,"","","","","","", java.lang.Boolean.parseBoolean(generateReport))


/*
* Starting a Netstorm test
*/
report = nsBuild.startTest(nsConnection)

echo report

def status = report.toString().split(",")

/*If test is not executed then it will mark build as failed and do not call for report generation*/
def reportstatus = status[0].split("=")[1].split("}")[0]
if(reportstatus.toString().equals("false")){
    currentBuild.result = "FAILURE"
}

/*Setting build number as test run number*/
def testRun = -1
if(status.length > 2) {
testRun = status[2].split("=")[1].split("}")[0]
currentBuild.displayName = testRun
}

/*Checking if report generation check is true or not and testrun number should not be -1*/
if(java.lang.Boolean.parseBoolean(generateReport) == true && testRun != -1) {
    def path = "${env.WORKSPACE}"
    def listener = Jenkins.get().getItemByFullName(env.JOB_NAME).getBuildByNumber(Integer.parseInt(env.BUILD_NUMBER)).getListener()

    def logger = listener.getLogger() as PrintStream
    hudson.FilePath filePath = new hudson.FilePath(new java.io.File(path))
    
    nsConnection.checkTestSuiteStatus(logger, filePath, currentBuild.rawBuild) 
    
}
}
}
}
}

post {
always {

// publish html
publishHTML target: [
allowMissing: false,
alwaysLinkToLastBuild: true,
keepAll: true,
reportDir: 'TestSuiteReport',
reportFiles: 'TestSuiteReportNS.html',
reportName: 'HTML Report'
]

}
}


}