#!/bin/bash
#
# Name: nsu_post_proc
#
# Author: Anil
#
# Purpsose: This command is called when netstorm going to stopped, for processing table records in database and update report files such as summary.top for particular test run.
#
# Usage: nsu_post_proc <test number> [RM_LOG] [test duration(HH:MM:SS)]
#
# Example:
# nsu_post_proc 1109 0 00:40:00 
#
# Exit Values:
#    0 - Success
#    1 - Validation errors
#
# Modification History:
#   20/12/06: Abhishek - Add code to handle one more argument from command input as test duration
#   11/11/11: Ajeet Singh- Add two more argument from command input
#   28/06/12: Prachi Kumari - Add code to handle one more argument from command input as Dynamic Table Size

export RM_LOG=0
export TEST_DURATION=""
export TRACE_LOG_READER=0


# if enhance number of argument from calling shell then please do not forget to change condition here
if [ $# -lt 1 -o $# -gt 30 ]; then
  echo "usage:  nsu_post_proc <test number> <TRACE_LOG_READER> [RM_LOG] [test duration(HH:MM:SS)]"
  exit 1
fi

RM_SLOG_AND_DLOG=0;
READER_RUN_MODE=0
GENERATOR_IDX=-1
#CSV_OK is 0 if partition mode is off and there are CSV files less than equal to 12
#CSV_OK is 1 if partition mode is on and there are CSV files greater than 12
CSV_OK=0
LOG_SHR_BUFFER_SIZE=8192
TOTAL_NUM_NVMS=0
TOTAL_GENERATOR_ENTRIES=0
PCT_MODE=0
PCT_BUF_SIZE=0
NIFA_TRACE_LEVEL=1
DYNAMIC_TX_TB_SIZE=4096

#At least Test Run is required
while getopts t:T:r:d:m:Z:L:g:S:n:G:p:B:F:X:? c
do
  case $c in
    t) TEST_RUN=$OPTARG;;
    T) TRACE_LOG_READER=$OPTARG;;
    r) RM_LOG=$OPTARG;;
    d) TEST_DURATION=$OPTARG;;
    m) READER_RUN_MODE=$OPTARG;;
    Z) DYNAMIC_TABLE_SIZE=$OPTARG;;
    L) RM_SLOG_AND_DLOG=$OPTARG;;
    g) GENERATOR_IDX=$OPTARG;;
    S) LOG_SHR_BUFFER_SIZE=$OPTARG;;
    p) PCT_MODE=$OPTARG;;
    B) PCT_BUF_SIZE=$OPTARG;;
    F) NIFA_TRACE_LEVEL=$OPTARG;;
    n) TOTAL_NUM_NVMS=$OPTARG;;
    G) TOTAL_GENERATOR_ENTRIES=$OPTARG;;
    X) DYNAMIC_TX_TB_SIZE=$OPTARG;;
    ?) Usage "Invalid arguments";;
    *) Usage "Invalid arguments";;
  esac
done


#If NUM_GEN > 0 then we need to call nia_file_aggregator because it is netcloud test.

NSU_LOGGING_READER_LOG_FILE=$NS_WDIR/logs/TR$TEST_RUN/nsu_logging_reader.log
if [ $TOTAL_GENERATOR_ENTRIES -eq 0 ];then
  #Reader Modes:
  # Mode 0 - Every thing will be done in post processing
  # Mode 1 - CSV will be created at run time but data will go in post processing
  # Mode 2 - Every thing will be done online

  NSU_LOGGING_READER_RETURN_VALUE=0 #Default value should be always positive
  if [ $READER_RUN_MODE -eq 0 ];then
    nsu_logging_reader -T $TRACE_LOG_READER -W "$NS_WDIR" -l $TEST_RUN -m $READER_RUN_MODE -Z $DYNAMIC_TABLE_SIZE -g $GENERATOR_IDX -S $LOG_SHR_BUFFER_SIZE -n $TOTAL_NUM_NVMS -G $TOTAL_GENERATOR_ENTRIES -X $DYNAMIC_TX_TB_SIZE > $NSU_LOGGING_READER_LOG_FILE 2>&1
    NSU_LOGGING_READER_RETURN_VALUE=$?
  fi
else
  NSU_LOGGING_READER_RETURN_VALUE=0
  if [ $READER_RUN_MODE -eq 0 ];then
    NIFA_LOG_FILE=$NS_WDIR/logs/TR$TEST_RUN/nia_file_aggregator.log    
    nia_file_aggregator -t $TEST_RUN -k "-1" -m $READER_RUN_MODE -p $PCT_MODE -B $PCT_BUF_SIZE -b $LOG_SHR_BUFFER_SIZE -l $NIFA_TRACE_LEVEL -L $TRACE_LOG_READER -D $DYNAMIC_TABLE_SIZE -g $GENERATOR_IDX -n $TOTAL_NUM_NVMS -G $TOTAL_GENERATOR_ENTRIES -X $DYNAMIC_TX_TB_SIZE
    #This will internally call nsu_logging_reader.
    NSU_LOGGING_READER_RETURN_VALUE=$?
  fi
fi


#if REPORT_MASK is not set, set it all all reports
#REPORT_MASK=""
if [ "XX$REPORT_MASK" = "XX" ];then
  export REPORT_MASK=15
fi

if [ "XX$PAGE_SNAPSHOTS" = "XX" ];then
  export PAGE_SNAPSHOTS=1;
fi

#check for cvs files creation
TOTAL_CSV=`ls -1 $NS_WDIR/logs/TR$TEST_RUN/reports/csv/*.csv 2>/dev/null | wc -l` 
IS_PARTIITON=`ls -1 $NS_WDIR/logs/TR$TEST_RUN/.curPartition 2>/dev/null | wc -l` 
echo "$TOTAL_CSV csv file found" >>$NSU_LOGGING_READER_LOG_FILE


#Partition Mode
if [ "X$IS_PARTIITON" == "X1" ]; then
  CSV_OK=1;
  RM_SLOG_AND_DLOG=0;
else
  if [ "$TOTAL_CSV" -gt "12" ]; then
    CSV_OK=1;
  fi
fi    


echo "NSU_LOGGING_READER_RETURN_VALUE  $NSU_LOGGING_READER_RETURN_VALUE" >>$NSU_LOGGING_READER_LOG_FILE

echo "REPORT_MASK  ${REPORT_MASK} READER_RUN_MODE  $READER_RUN_MODE" >>$NSU_LOGGING_READER_LOG_FILE

if [ $REPORT_MASK -ne 0 ];then
  if [ "X$NSU_LOGGING_READER_RETURN_VALUE" == "X0" -a "X$CSV_OK" == "X1" ]; then
    if [ $READER_RUN_MODE -eq 0 ];then
      nsu_import $TEST_RUN >$NS_WDIR/logs/TR$TEST_RUN/ns_logs/nsu_import.log 2>&1
      nsu_cache_db_data $TEST_RUN $NSU_LOGGING_READER_LOG_FILE
    fi
    nsu_gen_rep $TEST_RUN >$NS_WDIR/logs/TR$TEST_RUN/ns_logs/nsu_gen_rep.log 2>&1
    if [ $RM_SLOG_AND_DLOG -eq 1 ];then
      rm -f logs/TR$TEST_RUN/reports/raw_data/dlog logs/TR$TEST_RUN/reports/raw_data/slog 
    fi
  else
    echo "Either nsu_logging_reader failed or total csv files are not 14, NSU_LOGGING_READER_RETURN_VALUE=$NSU_LOGGING_READER_RETURN_VALUE" >>$NSU_LOGGING_READER_LOG_FILE
  fi
else
    rm -f logs/TR$TEST_RUN/reports/csv/*.csv
fi
# In release 3.9.7, page dump feature redesign now NVMs directly write into memory and LR creates csv for page dump hence need to
# comment the code  
#if [ $PAGE_SNAPSHOTS -eq 1 -a $CALL_NSU_IMPORT -eq 0 ];then
#  nsi_page_log -t $TEST_RUN -m 0 >>$NS_WDIR/logs/TR$TEST_RUN/ns_logs/nsi_page_log.log 2>&1
#  nsu_page_dump_post_proc -t $TEST_RUN >>$NS_WDIR/logs/TR$TEST_RUN/ns_logs/nsi_page_log.log 2>&1
#fi
#
#if [ $RM_LOG -eq 1 -a $CALL_NSU_IMPORT -eq 0 ];then
#	rm -f logs/TR$TEST_RUN/log
#fi

exit 0
