#!/bin/sh

############################################################################################################
# Name   	: nsi_db_get_page_extended_report
#
# Author 	: Rupinder Singh Sidhu 
#
# WORKING 	: 
#
#We have two inner QUERIES:

#1 URLRECORD QUERY :
#We have inner Query in which we use group by urlindex,pageindex --> URLRecord_InnerQuery
#Then we join inner query(URLRecord_InnerQuery) with urltable to get urlnames --> URLTable_InnerQuery
#Then we use that inner Query(URLTable_InnerQuery) to group by pageindex --> urlpagegroup_innerquery

#2 PAGERECORD QUERY:
#We have inner Query in which we use group by pageindex --> pagegroup_innerquery

#Then we use both above inner queries to join with pagetable to get pagename
# Usage 	: 
#############################################################################################################

########################################Variables and init settings############################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils
. $NS_WDIR/bin/ndi_db_utils

# Set default values of variables
TRNUM=""
LIMIT=""

ARRAY_SPACE=" "

DEBUG=0 # 0 --> off
        # 1 --> on

########################################Functions's Definitions#################################################################

debug_logs()
{
  if [ "X$DEBUG" != "X0" ];then
    echo "$*"
  fi
}

usage()
{
  echo "$*"
  echo
  echo "USAGE:"
  echo "====="
  echo
  echo "$0 --testrun <value> --starttime <value> --endtime <value> --abs_starttime <value> --abs_endtime <value> --limit <value>        --offset <value>"
  echo ""
  
  tput sgr0
  tput bold
  
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --starttime and -endtime is for selecting result that comes under the given range, which is mandatory argument."
  echo "  --abs_starttime is for selecting result based on absolute start time in flowpath table. Please note that if this is             provided, --starttime and --endtime should not be present."
  echo "  --limit is for limit (This is the number of results returned by query statment (e.g. 10 it will show first 10 records)          ), which is optional argument"
  echo " --offset is for offset (This is used to skip rows as specified by offset (e.g suppose you wanted to show results 11-20          then you can use offset 10)), which is optional argument"
  
  tput sgr0
  exit 1
}

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    echo "Option $1 required a value."
    usage
    exit -1
  fi
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
  fi
}


  #********************************************** Adding various functions **********************************************#
#inner most
add_inner_most_select()
{
  if [ "X$INNER_MOST_SELECT" != "X" ]; then
    INNER_MOST_SELECT="$INNER_MOST_SELECT, $NEWLINE "
  else
    INNER_MOST_SELECT="SELECT $NEWLINE "
  fi
}

add_inner_most_from()
{
  if [ "X$INNER_MOST_FROM" != "X" ]; then
    INNER_MOST_FROM="$INNER_MOST_FROM, $NEWLINE "
  else
    INNER_MOST_FROM="FROM $NEWLINE "
  fi
}

add_inner_most_where()
{
  if [ "X$INNER_MOST_WHERE" != "X" ]; then
    INNER_MOST_WHERE="$INNER_MOST_WHERE $NEWLINE AND"
  else
    INNER_MOST_WHERE="WHERE $NEWLINE "
  fi
}


add_inner_most_groupBy()
{
  if [ "X$INNER_MOST_GRPBY" != "X" ]; then
    INNER_MOST_GRPBY="$INNER_MOST_GRPBY, $NEWLINE "
  else
    INNER_MOST_GRPBY="GROUP BY $NEWLINE "
  fi
}

add_inner_most_orderBy()
{
  if [ "X$INNER_MOST_ORDERBY" != "X" ]; then
    INNER_MOST_ORDERBY="$INNER_MOST_ORDERBY, $NEWLINE "
  else
    INNER_MOST_ORDERBY="ORDER BY $NEWLINE "
  fi
}

#inner select
add_inner_select()
{
  if [ "X$INNER_SELECT" != "X" ]; then
    INNER_SELECT="$INNER_SELECT, $NEWLINE "
  else
    INNER_SELECT="SELECT $NEWLINE "
  fi
}

add_inner_from()
{
  if [ "X$INNER_FROM" != "X" ]; then
    INNER_FROM="$INNER_FROM, $NEWLINE "
  else
    INNER_FROM="FROM $NEWLINE "
  fi
}

add_inner_where()
{
  if [ "X$INNER_WHERE" != "X" ]; then
    INNER_WHERE="$INNER_WHERE $NEWLINE AND"
  else
    INNER_WHERE="WHERE $NEWLINE "
  fi
}

add_inner_groupBy()
{
  if [ "X$INNER_GRPBY" != "X" ]; then
    INNER_GRPBY="$INNER_GRPBY, $NEWLINE "
  else
    INNER_GRPBY="GROUP BY $NEWLINE "
  fi
}

add_inner_OrderBy()
{
  if [ "X$INNER_ORDERBY" != "X" ]; then
    INNER_ORDERBY="$INNER_ORDERBY, $NEWLINE "
  else
    INNER_ORDERBY="ORDER BY $NEWLINE "
  fi
}

#inn select
add_inn_select()
{
  if [ "X$INN_SELECT" != "X" ]; then
    INN_SELECT="$INN_SELECT, $NEWLINE "
  else
    INN_SELECT="SELECT $NEWLINE "
  fi
}

add_inn_from()
{
  if [ "X$INN_FROM" != "X" ]; then
    INN_FROM="$INN_FROM, $NEWLINE "
  else
    INN_FROM="FROM $NEWLINE "
  fi
}


add_inn_where()
{
  if [ "X$INN_WHERE" != "X" ]; then
    INN_WHERE="$INN_WHERE $NEWLINE  AND "
  else
    INN_WHERE="WHERE $NEWLINE "
  fi
}

add_inn_groupBy()
{
  if [ "X$INN_GRPBY" != "X" ]; then
    INN_GRPBY="$INN_GRPBY, $NEWLINE "
  else
    INN_GRPBY="GROUP BY $NEWLINE "
  fi
}

add_inn_OrderBy()
{
  if [ "X$INN_ORDERBY" != "X" ]; then
    INN_ORDERBY="$INN_ORDERBY, $NEWLINE "
  else
    INN_ORDERBY="ORDER BY $NEWLINE "
  fi
}

#inn_page_record select
add_inn_page_select()
{
  if [ "X$INN_PAGE_SELECT" != "X" ]; then
    INN_PAGE_SELECT="$INN_PAGE_SELECT, $NEWLINE "
  else
    INN_PAGE_SELECT="SELECT $NEWLINE "
  fi
}

add_inn_page_from()
{
  if [ "X$INN_PAGE_FROM" != "X" ]; then
    INN_PAGE_FROM="$INN_PAGE_FROM, $NEWLINE "
  else
    INN_PAGE_FROM="FROM $NEWLINE "
  fi
}


add_inn_page_where()
{
  if [ "X$INN_PAGE_WHERE" != "X" ]; then
    INN_PAGE_WHERE="$INN_PAGE_WHERE $NEWLINE  AND "
  else
    INN_PAGE_WHERE="WHERE $NEWLINE "
  fi
}

add_inn_page_groupBy()
{
  if [ "X$INN_PAGE_GRPBY" != "X" ]; then
    INN_PAGE_GRPBY="$INN_PAGE_GRPBY, $NEWLINE "
  else
    INN_PAGE_GRPBY="GROUP BY $NEWLINE "
  fi
}

add_inn_page_OrderBy()
{
  if [ "X$INN_PAGE_ORDERBY" != "X" ]; then
    INN_PAGE_ORDERBY="$INN_PAGE_ORDERBY, $NEWLINE "
  else
    INN_PAGE_ORDERBY="ORDER BY $NEWLINE "
  fi
}

#outer select
add_select()
{
  if [ "X$SELECT" != "X" ]; then
    SELECT="$SELECT, $NEWLINE "
  else
    SELECT="SELECT $NEWLINE "
  fi
}

add_from()
{
  if [ "X$FROM" != "X" ]; then
    FROM="$FROM, $NEWLINE "
  else
    FROM="FROM $NEWLINE "
  fi
}

add_where()
{
  if [ "X$WHERE" != "X" ]; then
    WHERE="$WHERE $NEWLINE  AND "
  else
    WHERE="WHERE $NEWLINE "
  fi
}

add_groupBy()
{
  if [ "X$GRPBY" != "X" ]; then
    GRPBY="$GRPBY, $NEWLINE "
  else
    GRPBY="GROUP BY $NEWLINE "
  fi
}

add_OrderBy()
{
  if [ "X$ORDER" != "X" ]; then
    ORDER="$ORDER, $NEWLINE "
  else
    ORDER="ORDER BY $NEWLINE "
  fi
}

################################################### ARGUMENTS CHECK ###############################

while [ "$1" != "" ];do
  debug_logs "ARGS=$1"
  case $1 in
    "--testrun")
      shift
      chk_args_of_option "--testrun" "$1"
      TRNUM=$1;;
    "--starttime")
      shift
      chk_args_of_option "--starttime" "$1"
      STARTTIME=$1;;
    "--percentiles")
      shift
      chk_args_of_option "--percentiles" "$1"
      PERCENTILES=$1;;
    "--endtime")
      shift
      chk_args_of_option "--endtime" "$1"
      ENDTIME=$1;;
    "--abs_starttime")
      shift
      chk_args_of_option "--abs_starttime" "$1"
      ABS_STARTTIME=$1;;
    "--abs_endtime")
      shift
      chk_args_of_option "--abs_endtime" "$1"
      ABS_ENDTIME=$1;;
    "--limit")
      shift
      chk_args_of_option "--limit" "$1"
      LIMIT=$1;;
    "--offset")
      shift
      chk_args_of_option "--offset" "$1"
      OFFSET=$1;;
    --*) usage "Invalid options";;
    *) usage ;;
 esac
 shift
done

PERCEN_ARRAY=(`echo $PERCENTILES|tr ',' ' '`)

#checking for mandatory Testrun number argument
chk_args

debug_logs "TRNUM = $TRNUM, LIMIT=$LIMIT"

#this will handle time passed by user which is in ms
handle_time_filters_in_ms $TRNUM

set_query_files $TRNUM

# Check if limit argument is given or not. It will limit number of rows to max this number
if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

# Check if Offset argument is given or not. This is used to skip rows as specified by offset.
# For example, if offset is 1, then first row is skipped. If offset is 100, then first 100 rows are skipped
if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi

#making inner query for urlrecord
add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT pageindex"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT urlindex"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT count(*)"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT count(nullif(Status, 0)) as fail"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(AppBytesSent) as TOT_BYTES_SENT"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(AppBytesSent) as AVG_BYTES_SENT"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(AppBytesSent) as MIN_BYTES_SENT"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(AppBytesSent) as MAX_BYTES_SENT"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(AppBytesRcd) as TOT_BYTES_RCD"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(AppBytesRcd) as AVG_BYTES_RCD"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(AppBytesRcd) as MIN_BYTES_RCD"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(AppBytesRcd) as MAX_BYTES_RCD"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(case when DnsDuration >= 0 then DnsDuration else 0 end) as TOT_DNS_DUR"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(case when DnsDuration >= 0 then DnsDuration else 0 end) as AVG_DNS_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(case when DnsDuration >= 0 then DnsDuration else 0 end) as MIN_DNS_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(case when DnsDuration >= 0 then DnsDuration else 0 end) as MAX_DNS_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(case when ConnectDuration >= 0 then ConnectDuration else 0 end) as TOT_CONN_DUR"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(case when ConnectDuration >= 0 then ConnectDuration else 0 end) as AVG_CONN_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(case when ConnectDuration >= 0 then ConnectDuration else 0 end) as MIN_CONN_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(case when ConnectDuration >= 0 then ConnectDuration else 0 end) as MAX_CONN_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(case when SSLHandshakeDuration >= 0 then SSLHandshakeDuration else 0 end) as TOT_SSL_DUR"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(case when SSLHandshakeDuration >= 0 then SSLHandshakeDuration else 0 end) as AVG_SSL_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(case when SSLHandshakeDuration >= 0 then SSLHandshakeDuration else 0 end) as MIN_SSL_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(case when SSLHandshakeDuration >= 0 then SSLHandshakeDuration else 0 end) as MAX_SSL_DUR"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(WriteCompleteDuration) as TOT_SEND_TIME"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(WriteCompleteDuration) as AVG_SEND_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(WriteCompleteDuration) as MIN_SEND_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(WriteCompleteDuration) as MAX_SEND_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(FirstByteRcdDuration) as TOT_SERVER_BUSY_TIME"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(FirstByteRcdDuration) as AVG_SERVER_BUSY_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(FirstByteRcdDuration) as MIN_SERVER_BUSY_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(FirstByteRcdDuration) as MAX_SERVER_BUSY_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(RequestCompleteDuration) as TOT_RCV_TIME"

#add_inner_most_select
#INNER_MOST_SELECT="$INNER_MOST_SELECT AVG(RequestCompleteDuration) as AVG_RCV_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MIN(RequestCompleteDuration) as MIN_RCV_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT MAX(RequestCompleteDuration) as MAX_RCV_TIME"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT SUM(DnsDuration + ConnectDuration + SSLHandshakeDuration + WriteCompleteDuration + FirstByteRcdDuration) as TOTAL_TIME_TO_FIRST_BYTES"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT  MIN(DnsDuration + ConnectDuration + SSLHandshakeDuration + WriteCompleteDuration + FirstByteRcdDuration) as MIN_TIME_TO_FIRST_BYTES" 

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT  MAX(DnsDuration + ConnectDuration + SSLHandshakeDuration + WriteCompleteDuration + FirstByteRcdDuration) as MAX_TIME_TO_FIRST_BYTES" 

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT  SUM(DnsDuration + ConnectDuration + SSLHandshakeDuration + WriteCompleteDuration + FirstByteRcdDuration + RequestCompleteDuration) as TOTAL_TIME_TO_LAST_BYTES"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT  MIN(DnsDuration + ConnectDuration + SSLHandshakeDuration + WriteCompleteDuration + FirstByteRcdDuration + RequestCompleteDuration) as MIN_TIME_TO_LAST_BYTES"

add_inner_most_select
INNER_MOST_SELECT="$INNER_MOST_SELECT  MAX(DnsDuration + ConnectDuration + SSLHandshakeDuration + WriteCompleteDuration + FirstByteRcdDuration + RequestCompleteDuration) as MAX_TIME_TO_LAST_BYTES" 

add_inner_most_from
INNER_MOST_FROM="$INNER_MOST_FROM urlrecord_${TRNUM}"

#2 is for inline url
add_inner_most_where
INNER_MOST_WHERE="$INNER_MOST_WHERE urltype <> 2"

if [ "X$ABS_STARTTIME" != "X" ]; then
  add_inner_most_where
  INNER_MOST_WHERE="$INNER_MOST_WHERE urlrecord_${TRNUM}.endtime >= $ABS_STARTTIME"
fi

if [ "X$ABS_ENDTIME" != "X" ]; then
  add_inner_most_where
  INNER_MOST_WHERE="$INNER_MOST_WHERE urlrecord_${TRNUM}.endtime <= $ABS_ENDTIME"
fi

if [ "X$STARTTIME" != "X" ]; then
  add_inner_most_where
  INNER_MOST_WHERE="$INNER_MOST_WHERE urlrecord_${TRNUM}.endtime >= $STARTTIME"
fi

if [ "X$ENDTIME" != "X" ]; then
  add_inner_most_where
  INNER_MOST_WHERE="$INNER_MOST_WHERE urlrecord_${TRNUM}.endtime <= $ENDTIME"
fi

add_inner_most_groupBy
INNER_MOST_GRPBY="$INNER_MOST_GRPBY pageindex" 

add_inner_most_groupBy
INNER_MOST_GRPBY="$INNER_MOST_GRPBY urlindex" 

add_inner_most_orderBy
INNER_MOST_ORDERBY="$INNER_MOST_ORDERBY count desc"

#getting urlname by joing inner_most query with this query
add_inner_select
INNER_SELECT="$INNER_SELECT  URLRecord_InnerQuery.*"

add_inner_select
INNER_SELECT="$INNER_SELECT urlname"

add_inner_from
INNER_FROM="$NEWLINE $INNER_FROM urltable_${TRNUM}, $NEWLINE ($INNER_MOST_SELECT $NEWLINE $INNER_MOST_FROM $NEWLINE $INNER_MOST_WHERE $NEWLINE $INNER_MOST_GRPBY $NEWLINE $INNER_MOST_ORDERBY) as URLRecord_InnerQuery"

add_inner_where 
INNER_WHERE="$INNER_WHERE URLRecord_InnerQuery.urlindex = urltable_${TRNUM}.urlindex"

#getting info by grouping pageindex
add_inn_select
INN_SELECT="$INN_SELECT URLTable_InnerQuery.pageindex"

add_inn_select
INN_SELECT="$INN_SELECT sum(count) as URLHits"

add_inn_select
INN_SELECT="$INN_SELECT sum(fail) as ErrorCounts"

add_inn_select
INN_SELECT="$INN_SELECT array_to_string((array_agg(urlname))[1:10],'$ARRAY_SPACE') as Top_Url_Lists"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_BYTES_SENT) as TOT_BYTES_SENT"

add_inn_select
INN_SELECT="$INN_SELECT ROUND((SUM(TOT_BYTES_SENT)/sum(count)), 2) as AVG_BYTES_SENT"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_BYTES_SENT) as MIN_BYTES_SENT"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_BYTES_SENT) as MAX_BYTES_SENT"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_BYTES_RCD) as TOT_BYTES_RCD"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_BYTES_RCD))/sum(count)), 2) as AVG_BYTES_RCD"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_BYTES_RCD) as MIN_BYTES_RCD"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_BYTES_RCD) as MAX_BYTES_RCD"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_DNS_DUR) as TOT_DNS_DUR"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_DNS_DUR))/sum(count)), 2) as AVG_DNS_DUR"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_DNS_DUR) as MIN_DNS_DUR"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_DNS_DUR) as MAX_DNS_DUR"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_CONN_DUR) as TOT_CONN_DUR"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_CONN_DUR))/sum(count)), 2) as AVG_CONN_DUR"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_CONN_DUR) as MIN_CONN_DUR"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_CONN_DUR) as MAX_CONN_DUR"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_SSL_DUR) as TOT_SSL_DUR"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_SSL_DUR))/sum(count)), 2) as AVG_SSL_DUR"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_SSL_DUR) as MIN_SSL_DUR"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_SSL_DUR) as MAX_SSL_DUR"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_SEND_TIME) as TOT_SEND_TIME"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_SEND_TIME))/sum(count)), 2) as AVG_SEND_TIME"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_SEND_TIME) as MIN_SEND_TIME"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_SEND_TIME) as MAX_SEND_TIME"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_SERVER_BUSY_TIME) as TOT_SERVER_BUSY_TIME"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_SERVER_BUSY_TIME) )/sum(count)), 2) as AVG_SERVER_BUSY_TIME"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_SERVER_BUSY_TIME) as MIN_SERVER_BUSY_TIME"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_SERVER_BUSY_TIME) as MAX_SERVER_BUSY_TIME"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOT_RCV_TIME) as TOT_RCV_TIME"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOT_RCV_TIME) )/sum(count)), 2) as AVG_RCV_TIME"

add_inn_select
INN_SELECT="$INN_SELECT MIN(MIN_RCV_TIME) as MIN_RCV_TIME"

add_inn_select
INN_SELECT="$INN_SELECT MAX(MAX_RCV_TIME) as MAX_RCV_TIME"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOTAL_TIME_TO_FIRST_BYTES) as TOTAL_TIME_TO_FIRST_BYTES"

add_inn_select
INN_SELECT="$INN_SELECT ROUND(((SUM(TOTAL_TIME_TO_FIRST_BYTES))/sum(count)), 2) as AVG_TIME_TO_FIRST_BYTES"

add_inn_select
INN_SELECT="$INN_SELECT   MIN(MIN_TIME_TO_FIRST_BYTES) as MIN_TIME_TO_FIRST_BYTES" 

add_inn_select
INN_SELECT="$INN_SELECT   MAX(MAX_TIME_TO_FIRST_BYTES) as MAX_TIME_TO_FIRST_BYTES"

add_inn_select
INN_SELECT="$INN_SELECT SUM(TOTAL_TIME_TO_LAST_BYTES) as TOTAL_TIME_TO_LAST_BYTES"

add_inn_select
INN_SELECT="$INN_SELECT   ROUND(((SUM(TOTAL_TIME_TO_LAST_BYTES))/sum(count)), 2) as AVG_TIME_TO_LAST_BYTES"

add_inn_select
INN_SELECT="$INN_SELECT   MIN(MIN_TIME_TO_LAST_BYTES) as MIN_TIME_TO_LAST_BYTES" 

add_inn_select
INN_SELECT="$INN_SELECT   MAX(MAX_TIME_TO_LAST_BYTES) as MAX_TIME_TO_LAST_BYTES"

add_inn_from
INN_FROM="$INN_FROM ($INNER_SELECT $INNER_FROM $NEWLINE $INNER_WHERE) as URLTable_InnerQuery"

add_inn_groupBy
INN_GRPBY="$INN_GRPBY URLTable_InnerQuery.pageindex"

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT pageindex"

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT ROUND(avg(resptime),2) as RUN_TIME_MEAN"

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT ROUND(min(resptime),2) as RUN_TIME_MIN"

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT ROUND(max(resptime),2) as RUN_TIME_MAX"

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT ROUND(stddev_pop(resptime),2) as RUN_TIME_STDDEV"

i=0

if [ "X${#PERCEN_ARRAY[@]}" != "X0" ];then
  while [ $i -lt ${#PERCEN_ARRAY[@]} ]
  do
    add_inn_page_select
    INN_PAGE_SELECT="$INN_PAGE_SELECT round((percentile_cont(${PERCEN_ARRAY[$i]}) WITHIN GROUP (ORDER BY resptime)::numeric), 2) as \"RUNTIME_PERCENTILES_P${PERCEN_ARRAY[$i]}\""
    i=`expr $i + 1`
  done
fi

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT round( (CASE WHEN count(resptime) > 0 THEN  (100.0 * (sum(CASE WHEN resptime <= 1000 THEN 1 ELSE 0 END)) / count(resptime)) ELSE 0 END ), 2) as \"RUNTIME_SEGMENTATION<=1000\""

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT round( (CASE WHEN count(resptime) > 0 THEN  (100.0 * (sum(CASE WHEN resptime <= 3000 THEN 1 ELSE 0 END)) / count(resptime)) ELSE 0 END ), 2) as \"RUNTIME_SEGMENTATION<=3000\""

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT round( (CASE WHEN count(resptime) > 0 THEN  (100.0 * (sum(CASE WHEN resptime <= 5000 THEN 1 ELSE 0 END)) / count(resptime)) ELSE 0 END ), 2) as \"RUNTIME_SEGMENTATION<=5000\""

add_inn_page_select
INN_PAGE_SELECT="$INN_PAGE_SELECT round( (CASE WHEN count(resptime) > 0 THEN  (100.0 * (sum(CASE WHEN resptime > 5000 THEN 1 ELSE 0 END)) / count(resptime)) ELSE 0 END ), 2) as \"RUNTIME_SEGMENTATION>=5000\""

add_inn_page_from
INN_PAGE_FROM="$INN_PAGE_FROM pagerecord_${TRNUM}"

if [ "X$ABS_STARTTIME" != "X" ]; then
  add_inn_page_where
  INN_PAGE_WHERE="$INN_PAGE_WHERE pagerecord_${TRNUM}.endtime >= $ABS_STARTTIME"
fi

if [ "X$ABS_ENDTIME" != "X" ]; then
  add_inn_page_where
  INN_PAGE_WHERE="$INN_PAGE_WHERE pagerecord_${TRNUM}.endtime <= $ABS_ENDTIME"
fi

if [ "X$STARTTIME" != "X" ]; then
  add_inn_page_where
  INN_PAGE_WHERE="$INN_PAGE_WHERE pagerecord_${TRNUM}.endtime >= $STARTTIME"
fi

if [ "X$ENDTIME" != "X" ]; then
  add_inn_page_where
  INN_PAGE_WHERE="$INN_PAGE_WHERE pagerecord_${TRNUM}.endtime <= $ENDTIME"
fi

add_inn_page_groupBy
INN_PAGE_GRPBY="$INN_PAGE_GRPBY pageindex"

add_select
SELECT="$SELECT pagename"

#add_select
#SELECT="$SELECT urlpagegroup_innerquery.pageindex"

add_select
SELECT="$SELECT urlpagegroup_innerquery.URLHits"

add_select
SELECT="$SELECT urlpagegroup_innerquery.Top_Url_Lists"

add_select
SELECT="$SELECT urlpagegroup_innerquery.ErrorCounts" 

add_select
SELECT="$SELECT round((CASE WHEN URLHits > 0 THEN (ErrorCounts*100/URLHits) ELSE 0 END),2) AS ERROR_PERCENTAGE"

add_select
SELECT="$SELECT pagegroup_innerquery.RUN_TIME_MEAN"

add_select
SELECT="$SELECT pagegroup_innerquery.RUN_TIME_MIN"

add_select
SELECT="$SELECT pagegroup_innerquery.RUN_TIME_MAX"

add_select
SELECT="$SELECT pagegroup_innerquery.RUN_TIME_STDDEV"

i=0

if [ "X${#PERCEN_ARRAY[@]}" != "X0" ];then
while [ $i -lt ${#PERCEN_ARRAY[@]} ]
do
  add_select
  SELECT="$SELECT pagegroup_innerquery.\"RUNTIME_PERCENTILES_P${PERCEN_ARRAY[$i]}\""
  i=`expr $i + 1`
done
fi

add_select
SELECT="$SELECT pagegroup_innerquery.\"RUNTIME_SEGMENTATION<=1000\""

add_select
SELECT="$SELECT pagegroup_innerquery.\"RUNTIME_SEGMENTATION<=3000\""

add_select
SELECT="$SELECT pagegroup_innerquery.\"RUNTIME_SEGMENTATION<=5000\""

add_select
SELECT="$SELECT pagegroup_innerquery.\"RUNTIME_SEGMENTATION>=5000\""

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_BYTES_SENT"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_BYTES_SENT"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_BYTES_SENT"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_BYTES_SENT"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_BYTES_RCD"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_BYTES_RCD"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_BYTES_RCD"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_BYTES_RCD"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_DNS_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_DNS_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_DNS_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_DNS_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_CONN_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_CONN_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_CONN_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_CONN_DUR"

#add_select
#SELECT="$SELECT urlpagegroup_innerquery.TOT_SSL_DUR"

#add_select
#SELECT="$SELECT urlpagegroup_innerquery.AVG_SSL_DUR"

#add_select
#SELECT="$SELECT urlpagegroup_innerquery.MIN_SSL_DUR"

#add_select
#SELECT="$SELECT urlpagegroup_innerquery.MAX_SSL_DUR"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_SEND_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_SEND_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_SEND_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_SEND_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_SERVER_BUSY_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_SERVER_BUSY_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_SERVER_BUSY_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_SERVER_BUSY_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOT_RCV_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_RCV_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_RCV_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_RCV_TIME"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOTAL_TIME_TO_FIRST_BYTES" 

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_TIME_TO_FIRST_BYTES" 

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_TIME_TO_FIRST_BYTES" 

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_TIME_TO_FIRST_BYTES"

add_select
SELECT="$SELECT urlpagegroup_innerquery.TOTAL_TIME_TO_LAST_BYTES"

add_select
SELECT="$SELECT urlpagegroup_innerquery.AVG_TIME_TO_LAST_BYTES"

add_select
SELECT="$SELECT urlpagegroup_innerquery.MIN_TIME_TO_LAST_BYTES" 

add_select
SELECT="$SELECT urlpagegroup_innerquery.MAX_TIME_TO_LAST_BYTES"

#outer query
add_from
FROM="$FROM pagetable_${TRNUM}"

add_from
FROM="$FROM ($INN_SELECT $NEWLINE $INN_FROM $NEWLINE $INN_GRPBY) as urlpagegroup_innerquery,"

FROM="$FROM $NEWLINE ($INN_PAGE_SELECT $NEWLINE $INN_PAGE_FROM $NEWLINE $INN_PAGE_WHERE $NEWLINE $INN_PAGE_GRPBY) as pagegroup_innerquery"

add_where
WHERE="$WHERE urlpagegroup_innerquery.pageindex = pagegroup_innerquery.pageindex"

add_where
WHERE="$WHERE pagetable_${TRNUM}.pageindex = urlpagegroup_innerquery.pageindex"

add_OrderBy
ORDER="$ORDER pagename"

ns_run_query

show_query_result_comma_sep

#exit 0

