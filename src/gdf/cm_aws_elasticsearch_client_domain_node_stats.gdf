# --- GDF Version History ---

# -- 1.0 -- Initial version ---

Info|3.1|1|-|-|-1|-1|-

Group|AWS Elasticsearch Client DomainNode Stats|14057|vector|39|0|AWS Metrics|AccountName>Region>ClientId>DomainName>NodeId|Amazon ElasticSearch Service (Amazon ES) is a managed service that makes it easy to deploy, operate, and scale ElasticSearch clusters in the AWS Cloud.

Graph|AWS Elasticsearch Indexing Latency (ms)|1|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The average time in milliseconds that it takes a shard to complete an indexing operation.

Graph|AWS Elasticsearch Indexing Ops/Min|2|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The number of indexing operations per minute.

Graph|AWS Elasticsearch Search Latency (ms)|3|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The average time in milliseconds that it takes a shared on a data node to complete a search operation.

Graph|AWS Elasticsearch Search Ops/Min|4|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The total number of search requests per minute for all shards on a data node.

Graph|AWS Elasticsearch AD Execute Requests|5|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of requests to detect anomalies.

Graph|AWS Elasticsearch AD Execute Failures|6|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of failed requests to detect anomalies.

Graph|AWS Elasticsearch LTR Total Requests|7|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Total count of ranking requests.

Graph|AWS Elasticsearch LTR Error Requests|8|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Total count of unsuccessful requests.

Graph|AWS Elasticsearch LTR Feature Memory Usage (Bytes)|9|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Total count of ranking feature MemoryUsageInBytes.

Graph|AWS Elasticsearch LTR Featureset Memory Usage (Bytes)|10|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Total count of ranking feature set MemoryUsageInBytes.

Graph|AWS Elasticsearch LTR Model Memory Usage (Bytes)|11|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Total count of ranking model MemoryUsageInBytes.

Graph|AWS Elasticsearch KNN Graph Memory Usage (KB)|12|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Current cache size (total size of all graphs in memory) in kilobytes.

Graph|AWS Elasticsearch KNN Cache Capacity Reached|13|scalar|sample|-|-|0|NA|-1|-1|NA|NA|Whether knn.memory.circuit_breaker.limit has been reached.

Graph|AWS Elasticsearch KNN Cache Hit|14|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of cache hits. A cache hit occurs when a user queries a graph and it is already loaded into memory.

Graph|AWS Elasticsearch KNN Cache Miss|15|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of cache misses. A cache miss occurs when a user queries a graph and it has not yet been loaded into memory.

Graph|AWS Elasticsearch KNN Load Success|16|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of times KNN successfully loaded a graph into the cache.

Graph|AWS Elasticsearch KNN Load Exception|17|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of times an exception occurred when trying to load a graph into the cache

Graph|AWS Elasticsearch KNN Total Load Time (ms)|18|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The time in nanoseconds that KNN has taken to load graphs into the cache

Graph|AWS Elasticsearch KNN Eviction Count|19|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of graphs that have been evicted from the cache due to memory constraints or idle time

Graph|AWS Elasticsearch CPU Utilization (%)|20|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The percentage of CPU usage for data nodes in the cluster

Graph|AWS Elasticsearch Free Storage Space (MiB)|21|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The free space for data nodes in the cluster. The Amazon CloudWatch console displays it in MiB.

Graph|AWS Elasticsearch JVM Memory Pressure (%)|22|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The maximum percentage of the Java heap used for all data nodes in the cluster

Graph|AWS Elasticsearch Sys Memory Utilization (%)|23|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The percentage of the instance's memory that is in use

Graph|AWS Elasticsearch Threadpool Write Threads|24|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The size of the write thread pool

Graph|AWS Elasticsearch Threadpool Write Rejected|25|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of rejected tasks in the write thread pool

Graph|AWS Elasticsearch Threadpool Write Queue|26|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of queued tasks in the write thread pool

Graph|AWS Elasticsearch Threadpool sql-worker Threads|27|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The size of the sql worker thread pool

Graph|AWS Elasticsearch Threadpool sql-worker Rejected|28|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of rejected tasks in the sql worker thread pool If this number continually grows consider scaling your cluster

Graph|AWS Elasticsearch Threadpool sql-worker Queue|29|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of queued tasks in the sql worker thread pool If the queue size is consistently high consider scaling your cluster

Graph|AWS Elasticsearch Threadpool Force Merge Threads|30|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The size of the force merge thread pool

Graph|AWS Elasticsearch Threadpool Force Merge Rejected|31|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of rejected tasks in the force merge thread pool If this number continually grows consider scaling your cluster

Graph|AWS Elasticsearch Threadpool Force Merge Queue|32|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of queued tasks in the force merge thread pool If the queue size is consistently high consider scaling your cluster

Graph|AWS Elasticsearch Threadpool Search Threads|33|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The size of the search thread pool

Graph|AWS Elasticsearch Threadpool Search Rejected|34|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of rejected tasks in the search thread pool. If this number continually grows, consider scaling your cluster

Graph|AWS Elasticsearch Threadpool Search Queue|35|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of queued tasks in the search thread pool If the queue size is consistently high consider scaling your cluster The maximum search queue size is 1,000

Graph|AWS Elasticsearch JVM GC Young Collection Count|36|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of times that young generation garbage collection has run A large ever-growing number of runs is a normal part of cluster operations

Graph|AWS Elasticsearch JVM GC Young Collection Time (ms)|37|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The amount of time in milliseconds that the cluster has spent performing young generation garbage collection

Graph|AWS Elasticsearch JVM GC Old Collection Count|38|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of times that old generation garbage collection has run In a cluster with sufficient resources this number should remain small and grow infrequently

Graph|AWS Elasticsearch JVM GC Old Collection Time (ms)|39|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The amount of time in milliseconds that the cluster has spent performing old generation garbage collection

