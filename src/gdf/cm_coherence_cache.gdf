# --- GDF Version History ---
#  1.0 - Initial version
#  2.0 - Change done for match Long_data and Long_long_data to double
#  3.0 - Changes done for Dynamic data in Execution GUI
#  3.1 - Use future1 field of group line for Metric group name
#
Info|3.1|1|-|-|-1|-1|-

Group|Coherence Mbean Data|10030|vector|2|0|Application Metrics|Tier>Server>Instance>CacheName|Information related to Coherence Data

#Graph|AverageGetMillis|1|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average number of milliseconds per get() invocation since the last time statistics were reset.
#Graph|AverageHitMillis|2|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average number of milliseconds per get() invocation that is a hit.
#Graph|AverageMissMillis|3|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average number of milliseconds per get() invocation that is a miss.
#Graph|AveragePutMillis|4|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average number of milliseconds per put() invocation since the cache statistics were last reset.
#Graph|BatchFactor|5|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The BatchFactor attribute is used to calculate the `soft-ripe` time for write-behind queue entries. A queue entry is considered to be `ripe` for a write operation if it has been in the write-behind queue for no less than the QueueDelay interval. The `soft-ripe` time is the point in time prior to the actual `ripe` time after which an entry will be included in a batched asynchronous write operation to the CacheStore (along with all other `ripe` and `soft-ripe` entries). This attribute is only applicable if asynchronous writes are enabled (i.e. the value of the QueueDelay attribute is greater than zero) and the CacheStore implements the storeAll() method. The value of the element is expressed as a percentage of the QueueDelay interval. Valid values are doubles in the interval [0.0, 1.0].
#Graph|CacheHits|6|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The rough number of cache hits since the last time statistics were reset. A cache hit is a read operation invocation (i.e. get()) for which an entry exists in this map.
#Graph|CacheHitsMillis|7|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of milliseconds (since the last time statistics were reset) for the get() operations for which an entry existed in this map.
#Graph|CacheMisses|8|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The rough number of cache misses since the last time statistics were reset.
#Graph|CacheMissesMillis|9|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of milliseconds ( since the last time statistics were reset) for the get() operations for which no entry existed in this map.
#Graph|CachePrunes|10|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The number of `prune` operations since the last time statistics were reset. A prune operation occurs every time the cache reaches its high watermark.
#Graph|CachePrunesMillis|11|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of milliseconds for the prune operations since the last time statistics were reset.
#Graph|ExpiryDelay|12|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The time-to-live for cache entries in milliseconds. Value of zero indicates that the automatic expiry is disabled. Change of this attribute will not affect already-scheduled expiry of existing entries.
#Graph|FlushDelay|13|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of milliseconds between cache flushes. Value of zero indicates that the cache will never flush.
#Graph|HighUnits|14|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The limit of the cache size measured in units. The cache will prune itself automatically once it reaches its maximum unit level. This is often referred to as the `high water mark` of the cache.
#Graph|HitProbability|15|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The rough probability (0 <= p <= 1) that the next invocation will be a hit, based on the statistics collected since the last time statistics were reset.
#Graph|LowUnits|16|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of units to which the cache will shrink when it prunes. This is often referred to as a `low water mark` of the cache.
#Graph|QueueDelay|17|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of seconds that an entry added to a write-behind queue will sit in the queue before being stored via a CacheStore. Applicable only for WRITE-BEHIND persistence type.
#Graph|QueueSize|18|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The size of the write-behind queue size. Applicable only for WRITE-BEHIND persistence type.
#Graph|RefreshFactor|19|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The RefreshFactor attribute is used to calculate the `soft-expiration` time for cache entries. Soft-expiration is the point in time prior to the actual expiration after which any access request for an entry will schedule an asynchronous load request for the entry. This attribute is only applicable for a ReadWriteBackingMap which has an internal LocalCache with scheduled automatic expiration. The value of this element is expressed as a percentage of the internal LocalCache expiration interval. Valid values are doubles in the interval[0.0, 1.0]. If zero, refresh-ahead scheduling will be disabled.
#Graph|RequeueThreshold|20|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The maximum size of the write-behind queue for which failed CacheStore write operations are requeued. If zero, the write-behind requeueing will be disabled. Applicable only for WRITE-BEHIND persistence type.
Graph|Size|21|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The number of entries in the cache.
#Graph|StoreAverageBatchSize|22|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average number of entries stored per CacheStore write operation. A call to the store() method is counted as a batch of one, whereas a call to the storeAll() method is counted as a batch of the passed Map size. The value of this attribute is -1 if the persistence type is NONE.
#Graph|StoreAverageReadMillis|23|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average time (in millis) spent per read operation; -1 if persistence type is NONE.
#Graph|StoreAverageWriteMillis|24|scalar|rate|-|-|0|NA|-1|-1|NA|NA|The average time (in millis) spent per write operation; -1 if persistence type is NONE.
#Graph|StoreFailures|25|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of CacheStore failures (load, store and erase operations); -1 if persistence type is NONE.
#Graph|StoreReadMillis|26|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The cummulative time (in millis) spent on load operations; -1 if persistence type is NONE.
#Graph|StoreReads|27|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of load operations; -1 if persistence type is NONE.
#Graph|StoreWriteMillis|28|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The cummulative time (in milliseconds) spent on store and erase operations; -1 if persistence type is NONE or READ-ONLY.
#Graph|StoreWrites|29|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of store and erase operations; -1 if persistence type is NONE or READ-ONLY.
#Graph|TotalGets|30|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of get() operations since the last time statistics were reset.
#Graph|TotalGetsMillis|31|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of milliseconds spent on get() operations since the last time statistics were reset.
#Graph|TotalPuts|32|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of put() operations since the last time statistics were reset.
#Graph|TotalPutsMillis|33|scalar|cumulative|-|-|0|NA|-1|-1|NA|NA|The total number of milliseconds spent on put() operations since the last time statistics were reset.
Graph|Units|34|scalar|sample|-|-|0|NA|-1|-1|NA|NA|The size of the cache measured in units.
