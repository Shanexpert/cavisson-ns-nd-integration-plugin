#!/bin/sh
# Name  : nsi_on_upgrade_and_reboot
# Author: Neeraj
# Usage : nsi_on_upgrade_and_reboot
# This script is used to set system parameters and other stuff which need to be done
# during upgrade to avoid rebooting of the machine when new change is done in a build
# which needs these kind of changes. 
# This will also be used from nsi_on_reboot


export HOME_DIR=/home/cavisson
CAV=$HOME_DIR/etc/cav.conf
CONFIG=`cat $CAV | grep "CONFIG" | awk '{print $2}'`
REDHAT_FC_RELEASE=`$NS_WDIR/tools/nsi_get_linux_release_ex 2>/dev/null`
RELEASE=`$NS_WDIR/tools/nsi_get_linux_release_ex 2>/dev/null`
DISTRO=`$NS_WDIR/tools/nsi_get_linux_release_ex -d 2>/dev/null`
BASENAME=`basename $NS_WDIR`
NCH_ROOT=$NS_WDIR/netchannel

setcap cap_net_raw=eip /usr/sbin/tcpdump
chmod 444 /etc/shadow

. $NS_WDIR/bin/nsi_install_utils
#for handling ddl and local conn for postgres
tune_postgres_for_localconn_ddl

grep "fs.inotify.max_user_instances=1024" /etc/sysctl.conf >/dev/null
if [ $? -ne 0 ];then
  echo "changing inotify max instances to 1024"
  echo  "fs.inotify.max_user_instances=1024" >> /etc/sysctl.conf 
  sysctl --system
fi

NODE_PID=`ps -U root -f|awk  '{ if($8=="PM2") print $2}'`
if [ "XX$NODE_PID" != "XX" ];then
  echo "going to kill PM2 process $NODE_PID running with root user"
  kill -9 $NODE_PID
fi

#copy node service for first time
if [ ! -f /etc/init.d/node ];then
  cp $NS_WDIR/etc/node /etc/init.d/
  update-rc.d node defaults >/dev/null 2>&1
fi

if [ ! -f /etc/init.d/nch ];then
  cp -f $NCH_ROOT/bin/nch /etc/init.d/
  chmod 775 /etc/init.d/nch
  update-rc.d nch defaults >/dev/null 2>&1
else
  grep "Provides" /etc/init.d/nch > /dev/null 2>&1
  if [ $? != 0 ];then
    cp -f $NCH_ROOT/bin/nch /etc/init.d/
    chmod 775 /etc/init.d/nch
    update-rc.d nch defaults >/dev/null 2>&1
  fi
fi

if [ ! -f /etc/init.d/apiGateway ];then
  cp -f $NS_WDIR/api_gateway/bin/apiGateway /etc/init.d/
  chmod 775 /etc/init.d/apiGateway
  update-rc.d apiGateway defaults >/dev/null 2>&1
fi

if [ -d $NS_WDIR/AlertManager -a ! -f /etc/init.d/alert_manager ];then
  cp -f $NS_WDIR/AlertManager/alert_manager /etc/init.d/
  chmod 775 /etc/init.d/alert_manager
  update-rc.d alert_manager defaults >/dev/null 2>&1
fi

#In case of RBU we are copying cavisson_service.native_host.json file as root in /etc/chromium/native-messaging-hosts/
NATIVE_MSG_HOST_MANIFEST_DIR="/etc/chromium/native-messaging-hosts"
echo "Copying 'cavisson_service.native_host.json' to path '$NATIVE_MSG_HOST_MANIFEST_DIR'"
mkdir -p $NATIVE_MSG_HOST_MANIFEST_DIR
if [ -f $HOME_DIR/etc/cavisson_service.native_host.json ];then
  cp $HOME_DIR/etc/cavisson_service.native_host.json $NATIVE_MSG_HOST_MANIFEST_DIR/
  chmod 777 $NATIVE_MSG_HOST_MANIFEST_DIR/cavisson_service.native_host.json
  echo "copy done of native_host"
fi

if [ ${DISTRO} == "Redhat" ];then
  if [ -f $HOME_DIR/thirdparty/chrome/chrome_60/chrome-sandbox ];then
    chown root:root $HOME_DIR/thirdparty/chrome/chrome_60/chrome-sandbox
    chmod 4755 $HOME_DIR/thirdparty/chrome/chrome_60/chrome-sandbox
  fi 
  if [ -f $HOME_DIR/thirdparty/chrome/chrome_68/chrome-sandbox ];then
    chown root:root $HOME_DIR/thirdparty/chrome/chrome_68/chrome-sandbox
    chmod 4755 $HOME_DIR/thirdparty/chrome/chrome_68/chrome-sandbox
  fi 
fi

# Now remove old changes and set default value of enabled=1
sed -i "s/enabled=.*/enabled=1/g" /etc/default/apport >/dev/null

#Make path for core files and set core pattern.
mkdir -p -m 777 /home/cavisson/core_files
chown  cavisson. $HOME_DIR/core_files

# Remove old changes in /etc/sysctl.conf, Because now we set core pattern in apport shell
# So there in no need to change /etc/sysctl.conf
sed -i "/kernel.core_pattern*/d" /etc/sysctl.conf  >/dev/null
sed -i "/kernel.shmmax*/d" /etc/sysctl.conf  >/dev/null

# Set kernel core pattern in apport shell, So that we can't worried about no of argument pass to core pattern
# As U-12 have /etc/init/apport.conf file and U-16 have both /etc/init/apport.conf & /etc/init.d/apport file
# Therefore set core pattern in both file
sed  -i 's#|$AGENT %p#|/home/cavisson/bin/nsi_core_pattern %p#g' /etc/init.d/apport >/dev/null
sed  -i 's#|/usr/share/apport/apport %p#|/home/cavisson/bin/nsi_core_pattern %p#g' /etc/init/apport.conf >/dev/null

#Issue:/proc/sys/fs/suid_dumpable = 2: In which apport do not dump core for binary/file which are run by setcap.
#Solution:Set /proc/sys/fs/suid_dumpable = 1:
sed  -i 's#echo 2 > /proc/sys/fs/suid_dumpable#echo 1 > /proc/sys/fs/suid_dumpable#g' /etc/init.d/apport >/dev/null
sed  -i 's#echo 2 > /proc/sys/fs/suid_dumpable#echo 1 > /proc/sys/fs/suid_dumpable#g' /etc/init/apport.conf >/dev/null

#The value in this file determines whether core dump files are produced for
#set-user-ID or otherwise protected/tainted binaries. Three different integer
#values can be specified:

#    * 0 (default) - This provides the traditional behaviour. A core dump will
#not be produced for a process which has changed credentials (by calling
#seteuid(2), setgid(2), or similar, or by executing a set-user-ID or
#set-group-ID program) or whose binary does not have read permission enabled.

#    * 1 ("debug") - All processes dump core when possible. The core dump is
#owned by the file system user ID of the dumping process and no security is
#applied. This is intended for system debugging situations only. Ptrace is
#unchecked.

#    * 2 ("suidsafe") - Any binary which normally would not be dumped (see "0"
#above) is dumped readable by root only. This allows the user to remove the core
#dump file but not to read it. For security reasons core dumps in this mode will
#not overwrite one another or other files. This mode is appropriate when
#administrators are attempting to debug problems in a normal environment.

if [ -f /bin/systemctl ];then
  systemctl daemon-reload
fi
service apport restart

grep "cavisson" /etc/iproute2/rt_tables > /dev/null
if [ $? != 0 ];then
  echo "1000 cavisson" >> /etc/iproute2/rt_tables
fi

#changes for nsi_clean_files in cron
grep "/usr/bin" /var/spool/cron/crontabs/root > /dev/null
if [ $? != 0 ];then
  echo "PATH=$NS_WDIR/bin:$HOME_DIR/bin:/usr/bin:/bin" >> /var/spool/cron/crontabs/root
fi

#bug 86678 - delete work path is present on root cron job
grep "work/bin/nsi_clean_files" /var/spool/cron/crontabs/root >/dev/null 2>&1
[ $? -eq 0 ] && sed -i '/work\/bin\/nsi_clean_files/d' /var/spool/cron/crontabs/root
 
grep "nsi_clean_files" /var/spool/cron/crontabs/root >/dev/null
if [ $? != 0 ];then 
  echo "00 21 * * * $HOME_DIR/bin/nsi_clean_files" >> /var/spool/cron/crontabs/root
fi

#Creating cgroups and changing the permissons
CGROUP_DIR="/sys/fs/cgroup/cpu/LimitCPU"
if [ ! -d $CGROUP_DIR ];then 
  echo "cgroups for NDP was not available in the system. Going to create one cgroup cpu resource controller as LimitCPU"
  mkdir $CGROUP_DIR
  chown -R 'cavisson:cavisson' $CGROUP_DIR
  echo "Permissons changed successfully"
fi
#Set the NDP CPU share as 40 percent  
echo "409" > $CGROUP_DIR/cpu.shares


grep "nsu_check_health" /var/spool/cron/crontabs/cavisson >/dev/null
if [ $? == 0 ];then 
  sed -i "/nsu_check_health*/d" /var/spool/cron/crontabs/cavisson
fi
  echo "* * * * * $HOME_DIR/bin/nsu_check_health" >> /var/spool/cron/crontabs/cavisson

if [ $BASENAME != "work" ];then
    rsync_daemon_CMD=rsync_daemon_$BASENAME
    SCHEDULER_CMD=scheduler_$BASENAME
  else
    rsync_daemon_CMD=rsync_daemon
    SCHEDULER_CMD=scheduler
fi
grep "$rsync_daemon_CMD" /var/spool/cron/crontabs/root > /dev/null
if [ $? != 0 ];then
  echo "5  *  * * * /etc/init.d/$rsync_daemon_CMD start" >> /var/spool/cron/crontabs/root
fi
grep "$SCHEDULER_CMD" /var/spool/cron/crontabs/root > /dev/null
if [ $? != 0 ];then
  echo "5  *  * * * /etc/init.d/$SCHEDULER_CMD start" >> /var/spool/cron/crontabs/root
fi

#Mount tmpfs of 10 GB size if machine is ubuntu and RAM size is greater than 96 GB
if [ "X$DISTRO" == "XUbuntu" ]; then
  MEM_IN_KB=`grep -i "MemTotal" /proc/meminfo | awk '{print $2}'`
  if [ "X$MEM_IN_KB" != "X" ]; then
    if [ $MEM_IN_KB -gt 96000000 ]; then
      TMPFS_CHECK=`df -h | grep -w tmpfs | grep -w /mnt/tmp 1>/dev/null 2>/dev/null; echo $?`
      if [ $TMPFS_CHECK -ne 0 ]; then
        mkdir -p /mnt/tmp 2>/dev/null
        chmod 777 "/mnt/tmp"
        mount -t tmpfs -o size=10G tmpfs /mnt/tmp
      fi
    fi
  fi
fi

#Start process to check postgres core dump
if [ -f $NS_WDIR/bin/nsu_check_pg ]; then
  $NS_WDIR/bin/nsu_check_pg start
fi

if [ "X$DISTRO" == "XRedhat" ]; then
  if [ ! -f "/etc/init.d/postgresql" ]; then
    echo "#!/bin/bash" > /etc/init.d/postgresql
    echo "systemctl \$1 postgresql-9.5" >> /etc/init.d/postgresql
    chmod +x /etc/init.d/postgresql
  fi
fi

#commenting this parameter BUGID: 102334
#Entering TOMCAT_OPTS in site.env if not present in NS_WDIR/sys dir.
#if [ ! -f $NS_WDIR/sys/site.env ]; then
#  MEM_IN_KB=`grep -i "MemTotal" /proc/meminfo | awk '{print $2}'`
#  MEM_IN_GB=`expr $MEM_IN_KB / 1024 / 1024`
#  if [ "X$MEM_IN_GB" != "X" ]; then
#    if [ $MEM_IN_GB -ge 96 ]; then
#      echo 'export TOMCAT_OPTS="-XX:NewSize=2g -XX:MaxNewSize=2g -Xms12g -Xmx12g -XX:PermSize=512m -XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=80 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps"' > $NS_WDIR/sys/site.env
#    fi
#  fi
#fi

env_count=`grep -w "env_keep" /etc/sudoers 2>/dev/null | grep -cw "NS_WDIR" 2>/dev/null`
if [ $env_count == 0 ];then
  echo 'Defaults  env_keep += "NS_WDIR"' >> /etc/sudoers
fi


#Make pg_bulkload link
if [ "$DISTRO" == "Ubuntu" -a "$RELEASE" == "1604" ]; then
  PG_BULKLOAD="/usr/lib/postgresql/9.5/bin/pg_bulkload"
else
  PG_BULKLOAD="/usr/lib/postgresql/9.1/bin/pg_bulkload"
fi

if [ ! -f /usr/bin/pg_bulkload -a -f $PG_BULKLOAD ]; then
  ln -s $PG_BULKLOAD /usr/bin/pg_bulkload
fi

#disable mlocate process
chmod -x /etc/cron.daily/mlocate

#remove old api_gateway configuration file, update new conf files and restart rsyslog service for logging.
if [ -f /etc/rsyslog.d/api_gateway.conf ]; then
  mv /etc/rsyslog.d/api_gateway.conf /etc/rsyslog.d/api_gateway_bkp
fi
sed -i 's/startswith/isequal/' /etc/rsyslog.d/api_gateway_*

service rsyslog restart 

#disable tinyproxy service
/etc/init.d/tinyproxy stop
systemctl disable tinyproxy >/dev/null 2>&1

resolvconf --disable-updates >/dev/null 2>&1

#This is done for syncing local environment with central netstorm repository Bug 100479
nohup $NS_WDIR/bin/nsi_repo_sync 1>/dev/null 2>&1 &

if [ "$BASENAME" != "work" ]; then
  exit 0
fi

#Abhay : changes for ulimit on reboot of machine
limits_not_commented=`grep -v "^[[:space:]]*#[[:space:]]*session[[:space:]]*required[[:space:]]*pam_limits.so" /etc/pam.d/su | grep "pam_limits.so" | wc -l`
if [ "X$limits_not_commented" == "X0" ];then
  echo "session    required   pam_limits.so" >> /etc/pam.d/su
fi


#Following changes need to be done only when work is upgraded as no need to do for other works
#for N0 Machine only
#For deafult value of SO_SNDBUF and SO_RCVBUF - Added on 3/18/08
if [ "X$CONFIG" == "XNO" ];then 
  echo "4096    131072   4194304" >  /proc/sys/net/ipv4/tcp_rmem
  echo "4096    131072   4194304" >  /proc/sys/net/ipv4/tcp_wmem
fi

$NS_WDIR/bin/nsu_reserve_port -a -f -p "4430-4450,8000-8020"

echo "4000000" >> /proc/sys/fs/file-max
echo "100000" >> /proc/sys/net/ipv4/tcp_max_syn_backlog
echo "1024 65535" >> /proc/sys/net/ipv4/ip_local_port_range
echo "100000" >> /proc/sys/net/core/somaxconn
echo "100000" >> /proc/sys/net/core/netdev_max_backlog

echo "1" > /proc/sys/fs/suid_dumpable
echo "1" > /proc/sys/kernel/core_uses_pid
echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle
echo "2000000" > /proc/sys/net/ipv4/tcp_max_tw_buckets
echo "5000" >/proc/sys/net/ipv4/neigh/default/gc_thresh3
echo "4500" >/proc/sys/net/ipv4/neigh/default/gc_thresh2
echo "4000" >/proc/sys/net/ipv4/neigh/default/gc_thresh1
echo "20000000000" > /proc/sys/kernel/shmmax
echo "8388608" > /proc/sys/kernel/shmall
echo "0" > /proc/sys/kernel/yama/ptrace_scope


#BugID 29306: For dotnet ND Agent
echo "0" > /proc/sys/net/ipv4/tcp_tw_recycle
echo "0" > /proc/sys/net/ipv4/tcp_window_scaling
echo "0" > /proc/sys/net/ipv4/tcp_timestamps



#work for tc command
if [ "$BASENAME" == "work" ]; then
  grep "cavisson ALL=(ALL) NOPASSWD:" /etc/sudoers 2>/dev/null 1>&2
 
  if [ $? -eq 0 ];then
    grep -w "\/sbin\/tc" /etc/sudoers 2>/dev/null 1>&2

    if [ $? -ne 0 ]; then
     sed -i '/cavisson ALL/s/$/, \/sbin\/tc/' /etc/sudoers
    fi

    grep -w "\/usr\/bin\/lsof" /etc/sudoers 2>/dev/null 1>&2
    if [ $? -ne 0 ]; then
     sed -i '/cavisson ALL/s/$/, \/usr\/bin\/lsof/' /etc/sudoers
    fi

    grep -w "\/usr\/bin\/timeout" /etc/sudoers 2>/dev/null 1>&2
    if [ $? -ne 0 ]; then
     sed -i '/cavisson ALL/s/$/, \/usr\/bin\/timeout/' /etc/sudoers
    fi

    grep -w "\/usr\/bin\/strace" /etc/sudoers 2>/dev/null 1>&2
    if [ $? -ne 0 ]; then
     sed -i '/cavisson ALL/s/$/, \/usr\/bin\/strace/' /etc/sudoers
    fi
  fi
if [ -f $NCH_ROOT/conf/nc_interfaces.conf ];then
  while read line
  do
     echo $line | egrep "^#" > /dev/null
     
     #Ignore commented lines
     if [ $? == 0 ]
     then
       continue
     fi
     INTERFACE=`echo $line | cut -d "|" -f1`
     
     echo 0 > /proc/sys/net/ipv4/conf/$INTERFACE/send_redirects  
     echo 1 > /proc/sys/net/ipv4/conf/$INTERFACE/proxy_arp 
     
     /sbin/tc qdisc add dev $INTERFACE root handle 1: htb default 999
     /sbin/tc class add dev $INTERFACE parent 1: classid 1:999 htb rate 1000mbit
     found=1
  done < $NCH_ROOT/conf/nc_interfaces.conf
fi
  #Configuration for NetChannel
  echo 1 > /proc/sys/net/ipv4/ip_forward 
  echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects 
  echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects 
  echo 1 > /proc/sys/net/ipv4/conf/default/proxy_arp 
  echo 1 > /proc/sys/net/ipv4/conf/all/proxy_arp 
fi

#This variable can be set by exporting NS_MAX_SHM in sys/site.env file
if [ "XX$NS_MAX_SHM" != "XX" ];then
  echo $NS_MAX_SHM >/proc/sys/kernel/shmmax
elif [ "XX$MEM_IN_KB" != "XX" -a $MEM_IN_KB -gt 96000000 ]; then
  echo "25000000000" >/proc/sys/kernel/shmmax
  echo "13107200" > /proc/sys/kernel/shmall
fi

#This variable can be set by exporting NS_ALL_SHM in sys/site.env file
if [ "XX$NS_ALL_SHM" != "XX" ];then
  echo $NS_ALL_SHM >/proc/sys/kernel/shmall
fi

#Added in 3.8.3 as Macys was getting error due to limit execeed
#Need to optimize NS code to use less number of shared memory segments.
#BugID: 74766 - increasing number of shared memory limit 50K
echo "32768" > /proc/sys/kernel/shmmni

#list all user who have some cron jobs on machine
USER=(`ls /var/spool/cron/crontabs/`)

#loop for all users who have cron jobs
for (( i=0; i < ${#USER[@]}; i++ ))
do
  #check cronjob configuarion file for each user
  if [ -f /var/spool/cron/crontabs/${USER[i]} ]; then
    EXISTS=`grep -w "^MAILTO" /var/spool/cron/crontabs/${USER[i]} 2>/dev/null`

    #if MAILTO keyword does not exists in file then add this keyword in file
    if [ "X$EXISTS" == "X" ];then
      sed -i '1i\'"MAILTO=\"\"" /var/spool/cron/crontabs/${USER[i]}
    fi
  fi
done

if [ -f $HOME_DIR/bin/cav_service ];then
  chattr -i $HOME_DIR/bin/cav_service
fi
cp -f $NS_WDIR/bin/cav_service $HOME_DIR/bin/cav_service
chattr +i $HOME_DIR/bin/cav_service

echo "adding cavisson user in docker group"
usermod -a -G docker cavisson  >/dev/null 2>&1 

cp -f $NS_WDIR/bin/show_postgres_logs /home/cavisson/bin

su cavisson -c "$NS_WDIR/bin/nsi_start_cmtest_on_reboot"

CUID=`id cavisson -u`
sed -i '/UserTasksMax/d' /etc/systemd/logind.conf
echo "UserTasksMax=30000" >> /etc/systemd/logind.conf
sed -i '/TasksMax/d'  /run/systemd/system/user-${CUID}.slice.d/50-TasksMax.conf
echo "TasksMax=30000" >> /run/systemd/system/user-${CUID}.slice.d/50-TasksMax.conf
echo "30000" > /sys/fs/cgroup/pids/user.slice/user-${CUID}.slice/pids.max

#executing the rm wrapper
bash $NS_WDIR/bin/rm_wrapper.sh -u >> /dev/null 2>&1
bash $NS_WDIR/bin/rm_wrapper.sh -i >> /dev/null 2>&1

exit 0
