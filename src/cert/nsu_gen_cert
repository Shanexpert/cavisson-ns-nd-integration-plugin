#!/bin/sh
#----------------------------------------------------------------------
# Name    :    nsu_gen_cert
# Author  :    Archana
# Purpose :    This is a tool program to generate following certificates
#              1-  root.pem
#              2-  root.p12
#              3-  client_cert.pem
#              4-  client_key.pem
#              5-  client.pem
#              6-  server.pem
#              7-  server_chain.crt
#              8-  rootca.crl
#Modification History:
#   07/29/09:  Archana - Initial Version
#   08/11/09:  Archana - Certificate Revocation Lists(CRL) 
#----------------------------------------------------------------------

#######Configure dir to copy generated certs that we can copy wherever we need
create_cert_dir()
{
  CUR_DIR=`pwd`
  CERTS_DIR=$CUR_DIR/Certificates
  #/home/netstorm/Certificates
  mkdir -p $CERTS_DIR
  PASSWORD=$CERTS_DIR/pass.txt
  echo "password" >$PASSWORD
}

#######Configure OpenSSL configuration file 'openssl.cnf' that we will keep bydefault in $NS_WDIR/cert dir
copy_openssl_file()
{
  if [ "XX" = "XX$NS_WDIR" ]
  then
    NS_WDIR=/home/netstorm/work
  fi

  cp $NS_WDIR/cert/openssl.cnf $CUR_DIR 
}

#######This method to give error Usage message and exit
display_help_and_exit()
{
  if [ $1 == 0 ] ;then
    echo "Certificate chain depth can not be less than or equal to 0"
    exit -1
  fi
}

#######This method is to create root.pem and root.p12
Generate_rootCA()
{
  #Generate a Root CA private key--------------------->
  mkdir certs crl newcerts private
  echo "01" > serial
  cp /dev/null index.txt

  #Create a self-signed certificate 'root.pem' (valid for 10 years)
  openssl req -x509 -new -config ./openssl.cnf -nodes -subj "/O=Cavisson Systems, Inc./emailAddress=info@cavisson.com/L=Fremont/ST=California/C=US/CN=Root/" -extensions v3_ca -days 3650 -keyout private/rootkey.pem -set_serial 09 -out root.pem -passout file:$PASSWORD 2>/dev/null
  #Set as trusted certificates
  openssl x509 -in root.pem -addtrust clientAuth -addtrust  serverAuth -out root_trusted.pem
  openssl x509 -in root_trusted.pem -out root.pem -outform PEM

  echo "Certificate 'root.pem' has been created"
  cp private/rootkey.pem $CERTS_DIR/rootkey$1.pem
  cp root.pem $CERTS_DIR/root$1.pem

  #Generate certificate 'root.p12' to enable certificate on Browser--------------------->
  openssl pkcs12 -export -out root.p12 -in root.pem -password file:$PASSWORD -inkey private/rootkey.pem 2>/dev/null
  echo "Certificate 'root.p12' has been created"
  cp root.p12 $CERTS_DIR
}

#######This method is to create a client certificate
Generate_client_cert()
{
  #Generate a client certificate--------------------->
  #Generate a certificate sign request
  openssl req -new -subj "/O=Cavisson Systems, Inc./emailAddress=info@cavisson.com/L=Fremont/ST=California/C=US/CN=Client/" -nodes -keyout client_key.pem -out client_csr.pem -config ./openssl.cnf -passout file:$PASSWORD -batch 2>/dev/null

  #Sign the request with the Intermediate CA
  openssl ca -out client_cert.pem -cert root.pem -keyfile private/rootkey.pem -config ./openssl.cnf -passin file:$PASSWORD -batch -infiles client_csr.pem 2>/dev/null

  #Installing the Client Certificate
  cat client_key.pem client_cert.pem >client.pem
  echo "Certificates 'client_cert.pem client_key.pem client.pem' has been created"
  cp client_cert.pem $CERTS_DIR/client_cert$1.pem
  cp client_key.pem $CERTS_DIR/client_key$1.pem
  cp client.pem $CERTS_DIR/client$1.pem
}

#######This method is to create a revoked client certificate, just to use for CRL test
Generate_client_cert_revoke()
{
  #Generate a client certificate--------------------->
  #Generate a certificate sign request
  openssl req -new -subj "/O=Cavisson Systems, Inc./emailAddress=info@cavisson.com/L=Fremont/ST=California/C=US/CN=Client_revoke/" -nodes -keyout client_key_revoke.pem -out client_csr_revoke.pem -config ./openssl.cnf -passout file:$PASSWORD -batch 2>/dev/null

  #Sign the request with the Intermediate CA
  openssl ca -out client_cert_revoke.pem -cert root.pem -keyfile private/rootkey.pem -config ./openssl.cnf -passin file:$PASSWORD -batch -infiles client_csr_revoke.pem 2>/dev/null

  #Installing the Client Certificate
  cat client_key_revoke.pem client_cert_revoke.pem >client_revoke.pem
  echo "Certificates 'client_revoke.pem' has been created"
# cp client_cert_revoke.pem client_key_revoke.pem $CERTS_DIR 

  #Renewing (revoking) client certificates--------------------->
  #Certificate chain can break due to certificate expiry in two ways:
  # - The certificates you signed with your root certificate have expired. 
  # - Your root certificate itself has expired. 
  openssl ca -revoke client_revoke.pem -config ./openssl.cnf -keyfile private/rootkey.pem -cert root.pem 2>/dev/null
  echo "Certificates 'client_revoke.pem' has been revoked"
  cp client_revoke.pem $CERTS_DIR/client_revoke$1.pem
}

#######This method is to create a server certificate when depth is not given
Generate_server_cert_for_without_depth()
{
  #Generate a server certificate--------------------->
  #Generate a certificate sign request
  openssl req -new -subj "/O=Cavisson Systems, Inc./emailAddress=info@cavisson.com/L=Fremont/ST=California/C=US/CN=Server/" -nodes -keyout server_key.pem -out server_csr.pem -config ./openssl.cnf -passout file:$PASSWORD -batch 2>/dev/null

  #Sign the request with the Intermediate CA
  openssl ca -out server_cert.pem -cert root.pem -keyfile private/rootkey.pem -config ./openssl.cnf -passin file:$PASSWORD -batch -infiles server_csr.pem 2>/dev/null

  #Installing the Client Certificate
  cat server_key.pem server_cert.pem >server.pem
  echo "Certificates 'server.pem' has been created"
  cp server.pem $CERTS_DIR
  #Generate Certificate Revocation List (CRL) 'rootca.crl' to keep list of certificates (or more specifically, a list of serial numbers for certificates) that have been revoked or are no longer valid--------------------->
  openssl ca -gencrl -crldays 3650 -config ./openssl.cnf -cert root.pem -keyfile private/rootkey.pem -out rootca.crl 2>/dev/null
  echo "Certificates 'rootca.crl' has been created"
  cp index.txt $CERTS_DIR/root_index.txt
  cp rootca.crl $CERTS_DIR
}

#######This method is to create specified depth level Intermediate CA
Generate_Intermediate_cert()
{
  ICA=$1
  COUNT=0
  while [ $COUNT != $ICA ]
  do
    mkdir InterCA
    cd InterCA
    cp ../openssl.cnf .
    mkdir certs crl newcerts private
    echo "01" > serial
    cp /dev/null index.txt

    #Generating an Intermediate CA$COUNT--------------------->"

    #Generate a certificate signing request (CSR) (valid for 10 year)
    openssl req -new -subj "/O=Cavisson Systems, Inc./emailAddress=info@cavisson.com/L=Fremont/ST=California/C=US/CN=Intermediate"$COUNT"/" -nodes -keyout private/intermediate"$COUNT"_key.pem -out intermediate"$COUNT"_csr.pem -config ./openssl.cnf -passout file:$PASSWORD -batch 2>/dev/null

    #Intermediate"$COUNT"_csr.pem is going to move
    #Now move the sign request to the Root CA directory and sign it:
    mv intermediate"$COUNT"_csr.pem ../
    cd ..
    if [ $COUNT == 0 ];then
      KEYFILE=rootkey.pem
      CERTFILE=root_trusted.pem
    else
      KEYFILE=intermediate`expr $COUNT - 1`_key.pem
      CERTFILE=intermediate`expr $COUNT - 1`.pem
    fi
    openssl ca -extensions v3_ca -days 3650 -config ./openssl.cnf -in intermediate"$COUNT"_csr.pem -cert $CERTFILE -keyfile private/$KEYFILE -passin file:$PASSWORD -out intermediate"$COUNT"_crt.pem -batch 2>/dev/null
    mv intermediate"$COUNT"* InterCA/
    if [ $COUNT == 0 ];then
      #Generate Certificate Revocation List (CRL) 'rootca.crl' to keep list of certificates (or more specifically, a list of serial numbers for certificates) that have been revoked or are no longer valid--------------------->
      openssl ca -gencrl -crldays 3650 -config ./openssl.cnf -cert root.pem -keyfile private/rootkey.pem -out rootca.crl 2>/dev/null
      echo "Certificates 'rootca.crl' has been created"
      cp index.txt $CERTS_DIR/root_index_chain$1.txt
      cp rootca.crl $CERTS_DIR/rootca_chain$1.crl
    fi
    cd InterCA/
    mv intermediate"$COUNT"_crt.pem intermediate"$COUNT".pem
    cp intermediate"$COUNT".pem $CERTS_DIR
    sleep 1
    COUNT=`expr $COUNT + 1`
  done
}

#######This method is to create a server certificate
Generate_server_cert()
{
  #Generating a server certificate--------------------->"

  #Generate a certificate sign request
  openssl req -new -nodes -subj "/O=Cavisson Systems, Inc./emailAddress=info@cavisson.com/L=Fremont/ST=California/C=US/CN=Server/" -keyout server.key -out server_csr.pem -config ./openssl.cnf -passout file:$PASSWORD -batch 2>/dev/null

  #Sign the request with the Intermediate CA
  openssl ca -config ./openssl.cnf -keyfile private/intermediate`expr $COUNT - 1`_key.pem -policy policy_match -out server_crt.pem -cert intermediate`expr $COUNT - 1`.pem -batch -infiles server_csr.pem 2>/dev/null

  #Installing the Server Certificate
  cat server.key server_crt.pem >server.pem
  #echo "Certificate 'server.pem' has been created"
  #cp server.pem $CERTS_DIR
  cp index.txt $CERTS_DIR/server_index_chain$1.txt
}

#######This method is to create a server certificate chain
Generate_server_cert_chain()
{
  #Generating a server certificate chain--------------------->"
  INTERMEDIATE_CHAIN=$CERTS_DIR/intermediate.tmp.$$
  #concatenate intermediate cert files and Remove all intermediate cert that copied in Cert dir
  while [ $COUNT != 0 ]
  do
    COUNT=`expr $COUNT - 1`
    cat $CERTS_DIR/intermediate"$COUNT".pem >>$INTERMEDIATE_CHAIN
    sleep 1
    rm -f $CERTS_DIR/intermediate"$COUNT".pem
  done

  #First concatenate server certificate and intermediate CA certificate:
  cat server.pem $INTERMEDIATE_CHAIN > server_chain.crt
  rm -f $INTERMEDIATE_CHAIN

  #Then concatenate Root CA cert:
  cat $CERTS_DIR/root_chain$1.pem >> server_chain.crt 
  echo "Certificate 'server_chain.crt' has been created"
  cp server_chain.crt $CERTS_DIR/server_chain$1.crt
}

clean_dir_files()
{
  rm -rf newcerts crl certs private InterCA 
  rm -f root.* *.key *.pem *.crt *.txt* core.* serial* *.crl
}
##############################################

if [ $# == 0 ]; then
  clean_dir_files
  rm -rf Certificates
  create_cert_dir
  copy_openssl_file
  Generate_rootCA ""
  Generate_client_cert ""
  Generate_client_cert_revoke ""
  Generate_server_cert_for_without_depth
else
  display_help_and_exit $1
  clean_dir_files
  rm -rf Certificates
  create_cert_dir
  copy_openssl_file
  Generate_rootCA "_chain$1"
  Generate_client_cert "_chain$1"
  Generate_client_cert_revoke "_chain$1"
  Generate_Intermediate_cert $1
  Generate_server_cert $1
  Generate_server_cert_chain "$1"
fi

cd $CUR_DIR
clean_dir_files
echo "All Certificates has done and stored in '$CERTS_DIR' directory"
# Remove password
rm -f $PASSWORD
exit 0
