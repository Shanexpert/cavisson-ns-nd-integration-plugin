#!/bin/bash

##############################################################################################
# Name    : nsi_db_svc_get_data
#
# Author  :  Manmeet
#
# Purpose : This shell script is for getting the data for the transaction component summary,
#           Which is called by DDR GUI from the query selection page.
#           This is the landing report for Service Reports
#
##############################################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils
. $NS_WDIR/bin/nsi_db_svc_utils


# Intializing default variables
STATUS=""	
STARTTIME=""
ENDTIME=""
LIMIT=""
OFFSET=""
GET_COUNT=0

usage()
{
  echo
  echo "$*"
  echo
  echo "USAGE:"
  echo "====="
  echo
  echo "$0 --testrun <value> --svcindex <index> --status <value> --starttime <value> --endtime <value> --resptime <value> --resptimeqmode <mode> --responsetime <time in ms> --responsetime2 <time in ms>"
  echo
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --svcindex is a particular service index. This will give the output for signature report for a particular service index. This is an optional argument."
  echo "  --status is selecting particular staus (status is 0 for Success only, 1 the Failure code, -1 for all"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, optional"
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is mandatory argument."
  echo "  --responsetime is for giving particular responsetime for different response time mode, which is optional argument."
  echo "  --responsetime2 is required in case --resptimeqmode 3. In this case the range is between --responsetime and --responsetime2."
  echo "  --get_count returns the number of rows of the query if it were called without this argumnent."  
  echo "  --limit for selecting fix number of result optional"
  echo "  --offset to set offset in case of limit optional"
  echo "  --print_total_row to print a total row at the end"

  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Missing mandatory option --testrun."
  fi
}

ARGS=$*
if [ "X$1" == "X" ];then
  usage
fi

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    usage "Option $1 requires a value."
  fi
}

GET_COUNT=0

while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--svcindex")
        shift
        chk_args_of_option "--svcindex" "$1"
        SVCINDEX=$1;;
    "--status")
        shift
        chk_args_of_option "--status" "$1"
        STATUS=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--responsetime")
        shift
        chk_args_of_option "--responsetime" "$1"
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
        chk_args_of_option "--resptimeqmode" "$1"
        RESPTIMEQMODE=$1;;
    "--responsetime2")
        shift
        chk_args_of_option "--responsetime2" "$1"
        RESPONSETIME2=$1;;
    "--get_count")
        shift
        chk_args_of_option "--get_count" "$1"
        GET_COUNT=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--print_total_row")
        shift
        chk_args_of_option "--print_total_row" "$1"
        PRINT_TOTAL_ROW=$1;;
    "--instancename")
        shift
        chk_args_of_option "--instancename" "$1"
        INSTANCENAME=$1;;
    "--instanceid")
        shift
        chk_args_of_option "--instanceid" "$1"
        INSTANCEID=$1;;
    --*) usage "Invalid option $1";;
    *) usage ;;
  esac
  shift
done

#PRINT_TOTAL_ROW=1

#if [ "$GET_COUNT" == "1" ];then
#  echo "Rows"
#  if [ "X$SVCINDEX" == "X" ];then
#    echo "1"
#  else
#    echo "3"
#  fi
#else
#  if [ "X$SVCINDEX" == "X" ];then
#    echo "SvcName|SvcIndex|Count|SignatureCount|SuccessCount|FailCount|AvgRespTime|Min|Max|Variance"
#    echo "ListAcctSvcForOnlnPd|0|45|3|44|1|271|120|350|20"
#  else
#    echo "SvcSignatureId|SvcSignatureName|Count|SuccessCount|FailCount|AvgRespTime|Min|Max|Variance"
#    echo "0|tx1_tx2_tx3|12|11|1|250|100|285|20"
#    echo "1|tx1_tx3|13|13|0|500|450|550|10"
#    echo "2|tx1_tx4|20|20|0|170|150|195|6"
#  fi
#fi


if [ "X$SVCINDEX" = "X" ];then
  SELECT="SELECT $NEWLINE  svctable_$TRNUM.svcname as \"SvcName\""
  SELECT="$SELECT, $NEWLINE  svcrecord_$TRNUM.svcindex as \"SvcIndex\""
else
  SELECT="SELECT $NEWLINE  svcrecord_$TRNUM.svcsignatureindex as \"SvcSignatureId\""
  SELECT="$SELECT, $NEWLINE  svcsignaturetable_$TRNUM.svcsignaturename as \"SvcSignatureName\""
fi

SELECT="$SELECT, $NEWLINE  count(*) as \"Count\""

if [ "X$SVCINDEX" = "X" ];then
  #SELECT="$SELECT, $NEWLINE 0 as \"SignatureCount\""
  SELECT="$SELECT, $NEWLINE  count(distinct svcrecord_$TRNUM.svcsignatureindex) as \"SignatureCount\""
  SELECT="$SELECT, $NEWLINE  count(distinct svcrecord_$TRNUM.svccpsignatureindex) as \"CPSignatureCount\""
fi

SELECT="$SELECT, $NEWLINE  count(*)-count(nullif(svcstatus, 'SUCCESS')) as \"SuccessCount\""
SELECT="$SELECT, $NEWLINE  count(nullif(svcstatus, 'SUCCESS')) as \"FailCount\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcelapsedtime),3) as \"AvgTotalTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcqueuewaittime),3) as \"AvgQueueWaitTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcselftime),3) as \"AvgAppSelfTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcsortime),3) as \"AvgSORRespTime\""
SELECT="$SELECT, $NEWLINE  MIN(svcrecord_$TRNUM.svcsortime) as \"MinSORRespTime\""
SELECT="$SELECT, $NEWLINE  MAX(svcrecord_$TRNUM.svcsortime) as \"MaxSORRespTime\""
SELECT="$SELECT, $NEWLINE  CASE WHEN count(*) > 0 THEN ROUND(VARIANCE(svcrecord_$TRNUM.svcsortime),3) ELSE 0.000 END as \"VarianceSORRespTime\""

  
FROM="FROM $NEWLINE  svcrecord_$TRNUM"
FROM="$FROM, $NEWLINE  svctable_$TRNUM"
FROM="$FROM, $NEWLINE  svcerrorcode_$TRNUM"

if [ "X$SVCINDEX" != "X" ];then
  FROM="$FROM, $NEWLINE  svcsignaturetable_$TRNUM"
fi

WHERE="WHERE $NEWLINE  svctable_$TRNUM.svcindex = svcrecord_$TRNUM.svcindex"
WHERE="$WHERE $NEWLINE  AND svcrecord_$TRNUM.svcstatusindex = svcerrorcode_$TRNUM.svcstatusindex"

if [ "X$SVCINDEX" != "X" ];then

  if [ "X$SVCINDEX" != "X-2" ];then
    WHERE="$WHERE $NEWLINE  AND svcrecord_$TRNUM.svcindex = $SVCINDEX"
  fi

  WHERE="$WHERE $NEWLINE  AND svcrecord_$TRNUM.svcsignatureindex = svcsignaturetable_$TRNUM.svcsignatureindex"
#else
 # WHERE="$WHERE $NEWLINE AND svcrecord_$TRNUM.svctype = 0"
fi


if [ "X$SVCINDEX" = "X" ];then
  GROUP="GROUP BY $NEWLINE  \"SvcIndex\""
  GROUP="$GROUP, $NEWLINE  \"SvcName\""
else
  GROUP="GROUP BY $NEWLINE  \"SvcSignatureId\""
  GROUP="$GROUP, $NEWLINE  \"SvcSignatureName\""
fi

if [ "X$SVCINDEX" = "X" ];then
#  ORDER="ORDER BY $NEWLINE  \"SvcIndex\""
  ORDER="ORDER BY $NEWLINE  \"SvcName\""
else
#  ORDER="ORDER BY $NEWLINE  \"SvcSignatureId\""
  ORDER="ORDER BY $NEWLINE  \"SvcSignatureName\""
fi

apply_filters

if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi


chk_args
set_query_files $TRNUM

if [ "X$PRINT_TOTAL_ROW" == "X1" ];then
  #Save the SELECT, FROM, WHERE and GROUP strings for details sub-query
  SELECT1=$SELECT
  FROM1=$FROM
  WHERE1=$WHERE
  GROUP1=$GROUP

  #For total row, re create the SELECT string
  SELECT=''

  if [ "X$SVCINDEX" = "X" ];then
    SELECT="SELECT $NEWLINE  'Total'::text as \"SvcName\""
    SELECT="$SELECT, $NEWLINE  -2 as \"SvcIndex\""
  else
    SELECT="SELECT $NEWLINE  -2 as \"SvcSignatureId\""
    SELECT="$SELECT, $NEWLINE  'Total'::text as \"SvcSignatureName\""
  fi
  
  SELECT="$SELECT, $NEWLINE  count(*) as \"Count\""
  
  if [ "X$SVCINDEX" = "X" ];then
    #SELECT="$SELECT, $NEWLINE 0 as \"SignatureCount\""
    SELECT="$SELECT, $NEWLINE count(distinct svcrecord_$TRNUM.svcsignatureindex) as \"SignatureCount\""
    SELECT="$SELECT, $NEWLINE count(distinct svcrecord_$TRNUM.svccpsignatureindex) as \"CPSignatureCount\""
  fi
  
  SELECT="$SELECT, $NEWLINE  count(*)-count(nullif(svcstatus, 'SUCCESS')) as \"SuccessCount\""
  SELECT="$SELECT, $NEWLINE  count(nullif(svcstatus, 'SUCCESS')) as \"FailCount\""
  SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcelapsedtime),3) as \"AvgTotalTime\""
  SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcqueuewaittime),3) as \"AvgQueueWaitTime\""
  SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcselftime),3) as \"AvgAppSelfTime\""
  SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcsortime),3) as \"AvgSORRespTime\""
  SELECT="$SELECT, $NEWLINE  MIN(svcrecord_$TRNUM.svcsortime) as \"MinSORRespTime\""
  SELECT="$SELECT, $NEWLINE  MAX(svcrecord_$TRNUM.svcsortime) as \"MaxSORRespTime\""
  SELECT="$SELECT, $NEWLINE  CASE WHEN count(*) > 0 THEN ROUND(VARIANCE(svcrecord_$TRNUM.svcsortime),3) ELSE 0.000 END as \"VarianceSORRespTime\""
  
  #No need to change FROM and WHERE, Remove GROUP BY    
  GROUP=''
  
  apply_filters
  
  SELECT2=$SELECT
  FROM2=$FROM
  WHERE2=$WHERE
  GROUP2=$GROUP
  
  SELECT="WITH details as ($NEWLINE  $SELECT1 $NEWLINE$FROM1 $NEWLINE$WHERE1 $NEWLINE$GROUP1 $NEWLINE), total as ($NEWLINE  $SELECT2 $NEWLINE$FROM2 $NEWLINE$WHERE2 $NEWLINE$GROUP2 $NEWLINE) select * from details ${NEWLINE}union${NEWLINE}select * from total ${NEWLINE}"

  if [ "X$SVCINDEX" = "X" ];then
    ORDER="ORDER BY $NEWLINE  \"SvcIndex\""
  else
    ORDER="ORDER BY $NEWLINE  \"SvcSignatureId\""
  fi

  FROM=''
  WHERE=''
  GROUP=''

fi

if [ $GET_COUNT -eq 0 ];then
  ns_run_query
else
  FROM="FROM $NEWLINE  ($NEWLINE  $SELECT $NEWLINE$FROM $NEWLINE$WHERE $NEWLINE$GROUP $NEWLINE  ) As \"Total\" "
  SELECT="SELECT $NEWLINE  Count(*) As \"Rows\" "
  WHERE=""
  GROUP=""
  ORDER=""
  ns_run_query
fi

show_query_result

exit 0

