#!/bin/bash

##############################################################################################
# Name    : nsi_db_svc_get_comp_data`
#
# Author  :  Manmeet
#
# Purpose : This shell script is for getting the transaction component data
#           This is called by DDR GUI for information needed to be displyed in the 
#           top n components report in tabular and pie chart formats
#
##############################################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils
. $NS_WDIR/bin/nsi_db_svc_utils


# Intializing default variables
STATUS=""	
STARTTIME=""
ENDTIME=""
LIMIT=""
OFFSET=""
GET_COUNT=0


usage()
{
  echo "$*"
  echo "USAGE:"
  echo "====="
  echo
  echo "$0 --testrun <value> --svcsignatureid <value> --status <value> --starttime <value> --endtime <value> --resptime <value> ----resptimeqmode <mode> --responsetime <time in ms> --responsetime2 <time in ms>"
  echo
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --svcindex is transaction component instance, which is mandatory argument."
  echo "  --svcsignatureid is transaction component index, which is optional argument."
  echo "  --svcinstance is transaction component instance, which is optional argument."
  echo "  --status is selecting particular staus (status is 0 for Success only, 1 the Failure code, -1 for all"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, optional"
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is mandatory argument."
  echo "  --responsetime is for giving particular responsetime for different response time mode, which is optional argument."
  echo "  --responsetime2 is required in case --resptimeqmode 3. In this case the range is between --responsetime and --responsetime2."
  echo "  --get_count returns the number of rows of the query if it were called without this argumnent."  
  echo "  --limit for selecting fix number of result optional"
  echo "  --offset to set offset in case of limit optional"

  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Missing mandatory option --testrun."
  fi

#  if [ "X$SVCINDEX" == "X" ]; then
#    usage "Missing mandatory option --svcindex."
#  fi
}

ARGS=$*
if [ "X$1" == "X" ];then
  usage 'No arguments provided, please provide mandatory arguments'
fi

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    usage "Option $1 requires a value."
  fi
}

GET_COUNT=0

while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--svcindex")
        shift
        chk_args_of_option "--svcindex" "$1"
        SVCINDEX=$1;;
    "--svcsignatureid")
        shift
        chk_args_of_option "--svcsignatureid" "$1"
        SVCSIGNATUREID=$1;;
    "--svcinstance")
        shift
        chk_args_of_option "--svcinstance" "$1"
        SVCINSTANCE=$1;;
    "--status")
        shift
        chk_args_of_option "--status" "$1"
        STATUS=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--responsetime")
        shift
        chk_args_of_option "--responsetime" "$1"
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
        chk_args_of_option "--resptimeqmode" "$1"
        RESPTIMEQMODE=$1;;
    "--responsetime2")
        shift
        chk_args_of_option "--responsetime2" "$1"
        RESPONSETIME2=$1;;
    "--instancename")
        shift
        chk_args_of_option "--instancename" "$1"
        INSTANCENAME=$1;;
    "--instanceid")
        shift
        chk_args_of_option "--instanceid" "$1"
        INSTANCEID=$1;;
    "--get_count")
        shift
        chk_args_of_option "--get_count" "$1"
        GET_COUNT=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    --*) usage "Invalid option $1";;
    *) usage ;;
  esac
  shift
done

#if [ "$GET_COUNT" == "1" ];then
#  echo "Rows"
#  echo "6"
#else
#  echo "SvcCompName|Count|AvgRespTime|Min|Max|Variance|CPFlag"
#  echo "sp_get_ola_services|1|2506|2506|2506|0|1"
#  echo "sp_get_cust_cuac_info_2011_09|1|2468|2468|2468|0|0"
#  echo "getWSignOnAccountDetails_201109|1|523|523|523|0|1"
#  echo "XAMGCST4_GetCustomer|1|230|230|230|0|1"
#  echo "getCustEmail_2012_06|1|94|94|94|0|0"
#  echo "sp_a_cust_wlth_segmnt_2011_03|1|37|37|37|0|0"
#fi

if [ "X$STATUS" = "X-2" ];then
  STATUS=""
fi

if [ "X$SVCINDEX" = "X-2" ];then
  SVCINDEX=""
fi

SELECT="SELECT $NEWLINE  svccomprecord_$TRNUM.svcindex as \"SvcIndex\""
SELECT="$SELECT, $NEWLINE  svctable_$TRNUM.svcname as \"SvcCompName\""
SELECT="$SELECT, $NEWLINE  count(*) as \"Count\""
#SELECT="$SELECT, $NEWLINE  ROUND(AVG(svccomprecord_$TRNUM.svcqueuewaittime),3) as \"QueueWaitTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svccomprecord_$TRNUM.svcsorresptime),3) as \"RespTime\""
SELECT="$SELECT, $NEWLINE  MIN(svccomprecord_$TRNUM.svcsorresptime) as \"Min\""
SELECT="$SELECT, $NEWLINE  MAX(svccomprecord_$TRNUM.svcsorresptime) as \"Max\""
SELECT="$SELECT, $NEWLINE  CASE WHEN count (*) > 1 THEN ROUND(VARIANCE(svccomprecord_$TRNUM.svcsorresptime),3) ELSE 0 END as \"Variance\""

if [ "X$SVCINSTANCE" != "X" ];then
  SELECT="$SELECT, $NEWLINE  svccomprecord_$TRNUM.svccritpathflag as \"CPFlag\""
else
  SELECT="$SELECT, $NEWLINE  0 as \"CPFlag\""
fi
  
FROM="FROM $NEWLINE  svccomprecord_$TRNUM"
FROM="$FROM, $NEWLINE  svctable_$TRNUM"

if [ "X$SVCINDEX" != "X" ];then
  #WHERE="WHERE $NEWLINE  svccomprecord_$TRNUM.svcparentindex = $SVCINDEX"
  WHERE="WHERE $NEWLINE  svccomprecord_$TRNUM.svcparentindex in ($SVCINDEX)"
  WHERE="$WHERE $NEWLINE  AND svctable_$TRNUM.svcindex = svccomprecord_$TRNUM.svcindex"
else
  WHERE="WHERE $NEWLINE  svctable_$TRNUM.svcindex = svccomprecord_$TRNUM.svcindex"
fi

if [ "X$SVCINSTANCE" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND svccomprecord_$TRNUM.svcparentinstance = $SVCINSTANCE"
fi

if [ "X$SVCSIGNATUREID" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND svccomprecord_$TRNUM.svcsignatureindex = $SVCSIGNATUREID"
fi

if [ "X$RESPONSETIME" != "X" ];then
  FROM="$FROM, $NEWLINE  svcrecord_$TRNUM"
  WHERE="$WHERE $NEWLINE  AND svccomprecord_$TRNUM.svcparentinstance = svcrecord_$TRNUM.svcinstance"
fi

GROUP="GROUP BY $NEWLINE  \"SvcCompName\""
GROUP="$GROUP, $NEWLINE  \"CPFlag\""
GROUP="$GROUP, $NEWLINE  \"SvcIndex\""

#used in nsi_db_svc_utils
OBJ_RECORD_TABLE=svccomprecord_$TRNUM
apply_filters

if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi

chk_args
set_query_files $TRNUM

if [ $GET_COUNT -eq 0 ];then
  ns_run_query
else
  FROM="FROM $NEWLINE  ($NEWLINE  $SELECT $NEWLINE$FROM $NEWLINE$WHERE $NEWLINE$GROUP $NEWLINE  ) As \"Total\" "
  SELECT="SELECT $NEWLINE  Count(*) As \"Rows\" "
  WHERE=""
  GROUP=""
  ORDER=""
  ns_run_query
fi

show_query_result

exit 0
