#!/bin/bash

##############################################################################################
# Name    : nsi_db_svc_get_critical_path
#
# Author  :  Manmeet
#
# Purpose : This shell script is for getting the data for the ctical path report
#
##############################################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils
. $NS_WDIR/bin/nsi_db_svc_utils


# Intializing default variables
STATUS=""	
STARTTIME=""
ENDTIME=""
LIMIT=""
OFFSET=""
GET_COUNT=0

usage()
{
  echo
  echo "$*"
  echo
  echo "USAGE:"
  echo "====="
  echo
  echo "$0 --testrun <value> --svcindex <index> --status <value> --starttime <value> --endtime <value> --resptime <value> --resptimeqmode <mode> --responsetime <time in ms> --responsetime2 <time in ms>"
  echo
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --svcindex is a particular service index. This will give the output for crtical path signature report for a particular service index. This is an optional argument."
  echo "  --status is selecting particular staus (status is 0 for Success only, 1 the Failure code, -1 for all"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, optional"
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is mandatory argument."
  echo "  --responsetime is for giving particular responsetime for different response time mode, which is optional argument."
  echo "  --responsetime2 is required in case --resptimeqmode 3. In this case the range is between --responsetime and --responsetime2."
  echo "  --get_count returns the number of rows of the query if it were called without this argumnent."  
  echo "  --limit for selecting fix number of result optional"
  echo "  --offset to set offset in case of limit optional"

  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Missing mandatory option --testrun."
  fi
}

ARGS=$*
if [ "X$1" == "X" ];then
  usage
fi

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    usage "Option $1 requires a value."
  fi
}

GET_COUNT=0

while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--svcindex")
        shift
        chk_args_of_option "--svcindex" "$1"
        SVCINDEX=$1;;
    "--status")
        shift
        chk_args_of_option "--status" "$1"
        STATUS=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--responsetime")
        shift
        chk_args_of_option "--responsetime" "$1"
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
        chk_args_of_option "--resptimeqmode" "$1"
        RESPTIMEQMODE=$1;;
    "--responsetime2")
        shift
        chk_args_of_option "--responsetime2" "$1"
        RESPONSETIME2=$1;;
    "--instancename")
        shift
        chk_args_of_option "--instancename" "$1"
        INSTANCENAME=$1;;
    "--instanceid")
        shift
        chk_args_of_option "--instanceid" "$1"
        INSTANCEID=$1;;
    "--get_count")
        shift
        chk_args_of_option "--get_count" "$1"
        GET_COUNT=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    --*) usage "Invalid option $1";;
    *) usage ;;
  esac
  shift
done

SELECT="SELECT $NEWLINE  svcrecord_$TRNUM.svccpsignatureindex as \"SvcCPSignatureId\""
SELECT="$SELECT, $NEWLINE  svcsignaturetable_$TRNUM.svcsignaturename as \"SvcCPSignatureName\""
SELECT="$SELECT, $NEWLINE  count(*) as \"Count\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcelapsedtime),3) as \"AvgTotalTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcqueuewaittime),3) as \"AvgQueueWaitTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcselftime),3) as \"AvgAppSelfTime\""
SELECT="$SELECT, $NEWLINE  ROUND(AVG(svcrecord_$TRNUM.svcsortime),3) as \"AvgSORRespTime\""

  
FROM="FROM $NEWLINE  svcrecord_$TRNUM"
FROM="$FROM, $NEWLINE  svcsignaturetable_$TRNUM"

WHERE="WHERE $NEWLINE  svcrecord_$TRNUM.svccpsignatureindex = svcsignaturetable_$TRNUM.svcsignatureindex"

if [ "X$SVCINDEX" != "X" -a "X$SVCINDEX" != "X-2" ];then
  WHERE="$WHERE $NEWLINE  AND svcrecord_$TRNUM.svcindex = $SVCINDEX"
fi

GROUP="GROUP BY $NEWLINE  \"SvcCPSignatureId\""
GROUP="$GROUP, $NEWLINE  \"SvcCPSignatureName\""

ORDER="ORDER BY $NEWLINE  \"SvcCPSignatureId\""

apply_filters

if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi


chk_args
set_query_files $TRNUM

if [ $GET_COUNT -eq 0 ];then
  ns_run_query
else
  FROM="FROM $NEWLINE  ($NEWLINE  $SELECT $NEWLINE$FROM $NEWLINE$WHERE $NEWLINE$GROUP $NEWLINE  ) As \"Total\" "
  SELECT="SELECT $NEWLINE  Count(*) As \"Rows\" "
  WHERE=""
  GROUP=""
  ORDER=""
  ns_run_query
fi

show_query_result

exit 0

