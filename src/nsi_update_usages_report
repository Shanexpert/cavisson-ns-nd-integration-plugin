#!/bin/bash
TR_NUM=$1
TRACE_LOGS=$NS_WDIR/logs/TR$TR_NUM/ns_logs/test_trace.log
TEMP_FILE_PATH="$NS_WDIR/logs/TR$TR_NUM/reports/summaryReports/_SummaryReport/temp_summay.txt"
if [ "$TR_NUM" == "" ]; then\
  echo "Error :TR mumber is not given."
  exit
fi

SUMMAY_TOP_FILE_PATH="$NS_WDIR/logs/TR$TR_NUM/summary.top"


#Check summary.top file 

if [ ! -f $SUMMAY_TOP_FILE_PATH ]; then
  echo "Summary.top file in present for TR $TR_NUM at path '$SUMMAY_TOP_FILE_PATH'." >>$TRACE_LOGS
  exit 
fi
MONTH=` cut -d '|' -f 3 $SUMMAY_TOP_FILE_PATH | cut -d '/' -f 1`
YEAR=`cut -d '|' -f 3 $SUMMAY_TOP_FILE_PATH | cut -d '/' -f 3 | cut -d ' ' -f 1`

OUTPUT_FILE="$NS_WDIR/logs/data_retention/usage/test_runs/tr_${MONTH}${YEAR}.dat" 
grep "^$TR_NUM|" $OUTPUT_FILE > /dev/null 2>&1

if [ $? = 0 ]; then
  echo "TR $TR_NUM is already present in out put file $OUTPUT_FILE"
  exit 
fi


show_error_exit()
{
  echo "'$1' not found in input JSON, $INPUT_FILE_PATH." >>$TRACE_LOGS
  rm $TEMP_FILE_PATH;
  exit
}
#Initializing the path of summary.json
INPUT_FILE_PATH="$NS_WDIR/logs/TR$TR_NUM/reports/summaryReports/_SummaryReport/summary.json"

#Copying summary.json if it is not present in the given path
if [ ! -f "$INPUT_FILE_PATH" ]; then
java -Dlog4j2.configurationFile=$NS_WDIR/webapps/.tomcat/log4j2/log4j2.xml -cp $NS_WDIR/webapps/netstorm/WEB-INF/lib/kryo-2.23.0.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/netstorm_bean.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/dashboardserver.jar:$NS_WDIR/webapps/webdashboard/WEB-INF/lib/web-dashboard-bean.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/gson-2.2.2.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/json_simple-1.1.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/java-json.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/jfreechart-1.0.14.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/java-getopt-1.0.9.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/itext-paulo-154.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/jcommon-1.0.17.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/poi.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/jcommon-1.0.17.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/commons-io-2.2.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/exp4j-0.4.5.jar:$NS_WDIR/webapps/netstorm/WEB-INF/lib/commons-fileupload-1.3.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/velocity-1.7.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/velocity-1.7-dep.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/commons-dbcp-1.4.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/commons-pool-1.6.jar:$NS_WDIR/webapps/DashboardServer/WEB-INF/lib/postgresql-9.1-901.jdbc4.jar:$NS_WDIR/thirdparty/gui_signed_jars/log4j-api-2.12.1.jar:$NS_WDIR/thirdparty/gui_signed_jars/log4j-core-2.12.1.jar:$NS_WDIR/thirdparty/gui_signed_jars/disruptor-3.4.2.jar:$NS_WDIR/thirdparty/gui_signed_jars/guava-23.0.jar -DNS_WDIR=$NS_WDIR com.cavisson.gui.server.webreports.services.StatReportGenerator $TR_NUM
fi

if [ ! -f "$INPUT_FILE_PATH" ]; then
  echo "Unable to crate $INPUT_FILE_PATH using java tool." >>$TRACE_LOGS
  exit
fi
#Storing summary.json file contents in multiple lines in temp_summay.txt file
cat $INPUT_FILE_PATH | tr '}' '\n'  > $TEMP_FILE_PATH


#Storing the value of ech filed in seprate variable
DATA_LINE=`grep 'Owner :' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "Owner"  
fi
OWNER=$(echo $DATA_LINE|cut -d ':' -f4 |cut -d '"' -f1 |sed 's/ //g')

DATA_LINE=`grep -o '"TestRunNumber":"[0-9]*"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "TestRunNumber"
fi
TR=$(echo $DATA_LINE  $T |cut -d '"' -f4 )

DATA_LINE=`grep '"ScenarioName":' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "ScenarioName"  
fi
SCENARIO=$(echo $DATA_LINE | awk -F '"ScenarioName":"' '{print $2}' | cut -d '"' -f 1)

DATA_LINE=`grep '"Duration":"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "Duration"
fi
DURATION=$(echo $DATA_LINE | awk -F '"Duration":"' '{print $2}' | cut -d '"' -f 1)

DATA_LINE=`grep '"TotalVuser"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "TotalVuser"
fi
AVG_VUSER=$(echo $DATA_LINE | awk -F '"Average":"' '{print $2}' | cut -d '"' -f 1)

DATA_LINE=`grep '"TotalVuser"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "TotalVuser"
fi
MAX_VUSER=$(echo $DATA_LINE | awk -F '"Maximum":"' '{print $2}' | cut -d '"' -f 1)

DATA_LINE=`grep '"PageDownloadComplete (sec)"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "PageDownloadComplete (sec)"
fi
AVG_PAGE_VIEW=$(echo $DATA_LINE | awk -F '"Average":"' '{print $2}' | cut -d '"' -f 1| sed 's,\,,,g')

DATA_LINE=`grep '"PageDownloadComplete (sec)"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "PageDownloadComplete (sec)"
fi
MAX_PAGE_VIEW=$( echo $DATA_LINE | awk -F '"Maximum":"' '{print $2}' | cut -d '"' -f 1 | sed 's,\,,,g')

DATA_LINE=`grep '"TestRunStartEndDateTime"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "TestRunStartEndDateTime"
fi
START_TIME=$(echo $DATA_LINE| awk -F '"TestRunStartEndDateTime":"' '{print $2}' | cut -d 't' -f 1 | cut -d ' ' -f 1,2)

DATA_LINE=`grep '"URL"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "URL"
fi
URL_COM=$(echo $DATA_LINE| awk -F '"URL"' '{print $2}' | cut -d ':' -f 5 | cut -d '"' -f 2| sed 's,\,,,g')

DATA_LINE=`grep '"Page"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "Page"
fi
PAGE_COM=$(echo $DATA_LINE| awk -F '"Page"' '{print $2}' | cut -d ':' -f 5 | cut -d '"' -f 2| sed 's,\,,,g')

DATA_LINE=`grep '"Transaction"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "Transaction"
fi
TRANS_COM=$(echo $DATA_LINE| awk -F '"Transaction"' '{print $2}' | cut -d ':' -f 5 | cut -d '"' -f 2| sed 's,\,,,g')

DATA_LINE=`grep '"Session"' $TEMP_FILE_PATH`
if [ $? != 0 ]; then
  show_error_exit "Session"
fi
SESS_COM=$(echo $DATA_LINE| awk -F '"Session"' '{print $2}' | cut -d ':' -f 5 | cut -d '"' -f 2| sed 's,\,,,g')

#converting page views / sec to page views / min
x=60
AVG_PAGEVIEW=$(echo "scale=2;$AVG_PAGE_VIEW*$x" |bc)
MAX_PAGEVIEW=$(echo "scale=2;$MAX_PAGE_VIEW*$x" |bc)


#Calculating AVG_VUSER_HR and MAX_VUSER_HR
#DURATION_HR=`echo $DURATION | cut -d ':' -f 1 |tr -cd [:digit:]`
DURATION_HR=`echo $DURATION | cut -d ':' -f 1`
DURATION_MINS=`echo $DURATION| cut -d ':' -f 2`
DURATION_SEC=`echo $DURATION| cut -d ':' -f 3`

TORAL_DURATION_SEC=`echo "($DURATION_HR * 60 * 60) + ($DURATION_MINS * 60) + $DURATION_SEC" | bc`

DUR_MIN=`echo "scale=4; $DURATION_MINS / 60" | bc`
TOTAL=`echo $DURATION_HR + $DUR_MIN | bc`

AVG_VUSER=`echo $AVG_VUSER |sed 's/,//g'`
AVG_VUSER_HR=$(echo "scale=2;$AVG_VUSER*$TOTAL" |bc)
MAX_VUSER=`echo $MAX_VUSER |sed 's/,//g'`
MAX_VUSER_HR=$(echo "scale=2;$MAX_VUSER*$TOTAL" |bc)


AVG_VUSER_SEC=$(echo "$AVG_VUSER*$TORAL_DURATION_SEC" |bc)
MAX_VUSER_SEC=$(echo "$MAX_VUSER*$TORAL_DURATION_SEC" |bc)


#Making a file with particular TR starting month and year.
MONTH=`echo $START_TIME | cut -d '/' -f 1`
YEAR=`echo $START_TIME | cut -d '/' -f 3 | cut -d ' ' -f 1`

OUTPUT_FILE="$NS_WDIR/logs/data_retention/usage/test_runs/tr_${MONTH}${YEAR}.dat" 

#Checking output file is null or not.
if [ ! -s "$OUTPUT_FILE" ]; then
  echo "Test Run|Start Date|DurationSec|Max VUsers|Avg VUsers|VUserSec(Max)|VUserSec(Avg)|Max Page views/min|Avg Page views/min|Scenario name|Owner|URL Complete|Page Complete|Trans Complete|Session Complete" > "$OUTPUT_FILE"
fi

#Appending the values in output file.
echo "$TR|$START_TIME|$TORAL_DURATION_SEC|$MAX_VUSER|$AVG_VUSER|$MAX_VUSER_SEC|$AVG_VUSER_SEC|$MAX_PAGEVIEW|$AVG_PAGEVIEW|$SCENARIO|$OWNER|$URL_COM|$PAGE_COM|$TRANS_COM|$SESS_COM" >> $OUTPUT_FILE

rm $TEMP_FILE_PATH;
exit

