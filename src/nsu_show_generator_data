#!/bin/bash
# Name: nsu_show_generator_data
# Purpose: To show information for generators from GUI/CLI
# if INVOKE without "gui" then data will not send to GUI server.

# Exit Values: 
#   0 - Sucessful
#   1 - Usage Error

DEV_NULL=/dev/null
message_out()
{ 
  echo "$1" >>$OUTPUT_FILE 2>$DEV_NULL
}

display_help_and_exit()
{
  echo "$1"
  tput bold
  echo -e "Usage: \033[31m nsu_show_generator_data  -f <generator_conf_file> -u <used_generator_file> -o <output file> -e <error file> -v <build number> -G\033[0m"
  tput sgr0
  echo "Where:"
  echo "  -f is to specify generator conf file. It is mandatory argument."
  echo "  -u is used to specify the used generator name file. It is optional argument."
  echo "  -o is used to specify the output file.It is optional argument."
  echo "  -e is used to specify the error file.It is optional argument."
  echo "  -G is to specify the GUI option.It is optional argument."
  echo "  -v is used to provide build version against which all machines's version will be verified. It is optional argument."
  echo "     - It must use like [-v 418#14 (Release#BuildNumber)]"
  echo "  -d is used to delete TR from generators which are enabled in file given by -u like [ <Gen name>|<0/1>]"
  echo "  -h is used to get health of generators used in generator conf file. It is optional argument"
  exit 1;
}

check_mandatory_options()
{
  # Input file name is  mandatory
  if [ "XX$INPUT_FILE" = "XX" ];then
    display_help_and_exit "nsu_show_generator_data: mandatory option is missing"
  fi
}

remove_temp_files()
{
  rm $GEN_NAMES $FILTERED_GEN_FILE 2>$DEV_NULL
  rm -f $NS_WDIR/gen_data*.$MY_PID 2>$DEV_NULL
  rm -f $NS_WDIR/err.$MY_PID 2>$DEV_NULL
}

handle_signal()
{
  echo ""
  echo -n "Deleting temporary files, please wait"
  for i in `seq 1 5`; do
    sleep 0.5
    echo -n "."
    remove_temp_files
  done
  echo ""
  kill -9 $MY_PID
  exit 1
}

print_blank_header()
{
  Gen_Name=$1
  Gen_IP=$2
  GUI_HDR_VAL="|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-"
  message_out "FOR GENERATOR --- $Gen_Name($Gen_IP):Cmon is not running"
  message_out "-------------------------------------------------------------------"
  echo "FOR GENERATOR ---$Gen_Name($Gen_IP):Cmon is not running" >>$ERROR_FILE
  if [ $GUI -eq 1 ];then
    echo $Gen_Name$GUI_HDR_VAL
  else
    echo "FOR GENERATOR --- $Gen_Name($Gen_IP):Cmon is not running"
    echo "-------------------------------------------------------------------"
  fi
}

#Balram:
#BugId :42244: This function read the data of .nsu_check_health file (along with min value) of all the generatos on controller end
show_gen_health()
{
  GEN_DATA_FILE="/tmp/.nsu_check_health_data.$$"
  ROOT_DISK_MIN=4294967296 #INT_MAX
  HOME_DISK_MIN=4294967296
  CPU_MIN=4294967296
  MEM_MIN=4294967296
  BW_MIN=4294967296

  for (( i=0; i<${#Generator_Name[@]}; i++ ))
  do
    OUT_HDR="${Generator_Name[$i]}|-|-|-|-|-"
    CMON=`nsu_server_admin -i -g -s ${Generator_IP[$i]} -S 2>$DEV_NULL`
    echo "$CMON" | grep 'cmon is running' >$DEV_NULL
    stat=$?
    if [ "XX$stat" = "XX0" ];then   #cmon is running
      GEN_DATA=`nsu_server_admin -i -g -s ${Generator_IP[$i]} -c "cat ${Generator_DIR[$i]}/.nsu_check_health"`
      #If .nsu_check_health is not present.
      echo "$GEN_DATA" |grep -w "cat:" 2>$DEV_NULL
      if [ $? -eq 0 ];then
        echo "$OUT_HDR" >>$GEN_DATA_FILE
        continue
      fi
      ROOT_DISK=`echo "$GEN_DATA"|cut -d ',' -f3 |cut -d'+' -f1`
      HOME_DISK=`echo "$GEN_DATA"|cut -d ',' -f3 |cut -d'+' -f2`
      CPU=`echo "$GEN_DATA"|cut -d ',' -f4`
      MEM=`echo "$GEN_DATA"|cut -d ',' -f5`
      BW=`echo "$GEN_DATA"|cut -d ',' -f6`

      #If home disk is mount to root disk OR home disk is not available 
      if [ "XX$HOME_DISK" = "XX" ];then
        HOME_DISK=$ROOT_DISK
      fi

      #compare and get min value for ROOT_DISK_MIN, HOME_DISK_MIN, CPU_MIN, MEM_MIN, BW_MIN
      if [ -n "$ROOT_DISK" ];then
        if [ $ROOT_DISK -lt "$ROOT_DISK_MIN" ];then
          ROOT_DISK_MIN=$ROOT_DISK
        fi
      fi

      if [ -n "$HOME_DISK" ];then
        if [ $HOME_DISK -lt $HOME_DISK_MIN ];then
          HOME_DISK_MIN=$HOME_DISK
        fi
      fi
 
      if [ -n "$CPU" ];then
        if [ $CPU -lt $CPU_MIN ];then
          CPU_MIN=$CPU
        fi
      fi

      if [ -n "$MEM" ];then
        if [ $MEM -lt $MEM_MIN ];then
          MEM_MIN=$MEM
        fi
      fi

      if [ -n "$BW" ];then
        if [ $BW -lt $BW_MIN ];then
          BW_MIN=$BW
        fi
      fi
      #append data for each generator to file
      OUT_HDR="${Generator_Name[$i]}|${ROOT_DISK}GB|${HOME_DISK}GB|${CPU}%|${MEM}GB|${BW}Mbps"
    fi
    echo "$OUT_HDR" >>$GEN_DATA_FILE
  done
  echo "Overall_Min|${ROOT_DISK_MIN}GB|${HOME_DISK_MIN}GB|${CPU_MIN}%|${MEM_MIN}GB|${BW_MIN}Mbps" >>$GEN_DATA_FILE
  echo "Gen_name|Root_Disk|Home_Disk|Cpu_Used|Mem_Avail|BW_Avail"
  cat $GEN_DATA_FILE
  rm -f $GEN_DATA_FILE 2>$DEV_NULL
  exit 0
}

get_gen_status_and_merge_files ()
{
  num_rows=$ID
  flag=0
  #This is not completed break the loop wait for 2 seconds then again come and check all generatrors
  #If all done then break the while loop and merge the all files 
  while [ $flag -eq  0 ]
  do
    flag=1
    for (( i=0; i<=num_rows; i++ )) do
      kill -0 ${C_PID[$i]} 2>$DEV_NULL
      if [ $? -eq 0 ];then 
        flag=0
        break 1;
      fi      
    done
    sleep 2
  done
 
  for (( i=0; i<=num_rows; i++ )) do
    if [ $GUI -eq 1 ];then
      grep "${Generator_Name[$i]}|" "$NS_WDIR/gen_data_${Generator_Name[$i]}.$MY_PID" 2>$DEV_NULL
    else
      cat $NS_WDIR/gen_data_${Generator_Name[$i]}.$MY_PID 2>$DEV_NULL
    fi
    cat $NS_WDIR/gen_data_${Generator_Name[$i]}.$MY_PID 1>>$OUTPUT_FILE 2>$DEV_NULL
  done
}

# Run shell nsu_get_data with nohup
get_gen_data()
{
  ID=$1
  P_PID=$2
  DELETE_GEN_TR_FLAG=$3

  (
    nohup $NS_WDIR/bin/nsu_get_gen_data  ${Generator_Name[$ID]} ${Generator_IP[$ID]} $P_PID ${Generator_DIR[$ID]} ${Generator_Location[$ID]} $BUILD_VER 1 $CONTROLLER_BUILD_VER $CONTROLLER_BUILD_FLAG $DELETE_GEN_TR_FLAG >$DEV_NULL 2>&1
    if [ $? -ne 0 ];then
      echo "Error in calling nsu_get_gen_data file, hence exit from shell" >>$ERROR_FILE
      message_out "Error in calling nsu_get_gen_data file , hence exit from shell"
      exit 1
    fi
  )&
  C_PID[$ID]=$(echo $!)

}

get_all_generators_data ()
{
  i=0
  cat $INPUT_FILE |egrep -v "^#" |awk -F'|' '{print $1}' >$GEN_NAMES
  while read line
  do
    echo "$line" | egrep -v "^#" | egrep -v "^$" >$DEV_NULL
    if [ $? -ne 0 ];then
      continue
    fi
    # Compare field 3 with CaMonAgentPort string to verify the same  
    CaMonAgentPort_Var=`echo "$line" | cut -d'|' -f3`
    if [ $CaMonAgentPort_Var == "CaMonAgentPort" ];then
      continue
    fi
    Generator_Name[$i]=`echo "$line" | cut -d'|' -f1`
    NUM=`grep -w "${Generator_Name[$i]}" $GEN_NAMES |wc -l`
    if [ $NUM -ne 1 ];then
      echo "${Generator_Name[$i]} is having a duplicate entry in Generator Conf File"
      remove_temp_files
      exit 1
    fi
    Generator_IP[$i]=`echo "$line" | cut -d'|' -f2`
    Generator_DIR[$i]=`echo "$line" | cut -d'|' -f5`
    Generator_Location[$i]=`echo "$line" | cut -d'|' -f4`
    if [ "XX$SHOW_HEALTH" = "XX0" ];then
      get_gen_data $i $MY_PID 0
    fi
    i=$((i + 1))
  done<$INPUT_FILE
  rm $GEN_NAMES
}


get_used_generators_data ()
{
  TOTAL_LINE=`cat $USD_GEN_FILE |wc -l`
  if [ $TOTAL_LINE -eq 0 ];then
    display_help_and_exit "nsu_show_generator_data: Input file $USD_GEN_FILE is empty"
  fi

  #default generator file
  if [ "XX$INPUT_FILE" = "$NS_WDIR/etc/.netcloud/generators.dat" ];then
    nc_admin -o show >$FILTERED_GEN_FILE
  else
    nc_admin -o show -f $INPUT_FILE >$FILTERED_GEN_FILE
  fi
  if [ $? -ne 0 ];then
    echo "Unable to run nc_admin"
    remove_temp_files
    exit 1
  fi
  INPUT_FILE=$FILTERED_GEN_FILE
  i=0
  while read line
  do
    echo "$line" | egrep -v "^#" | egrep -v "^$" >$DEV_NULL
    if [ $? -ne 0 ];then
      continue
    fi
    NAME=`echo "$line" |cut -d'|' -f1`
    ENABLE_DEL_TR_FLAG=`echo "$line" |cut -d'|' -f2`
    if [ "X$DELETE_GEN_TR" = "X1" ]; then
      if [ "X$ENABLE_DEL_TR_FLAG" != "X1" ];then
        ENABLE_DEL_TR_FLAG=2
      fi
    else
      ENABLE_DEL_TR_FLAG=0
    fi
    grep -v "^#" $INPUT_FILE | grep -w -m1 "$NAME" >$DEV_NULL
    if [ $? -eq 0 ];then
      NUM=`cat "$INPUT_FILE" | egrep -v "^#" | grep -w "$NAME" |wc -l`
      if [ $NUM -ne 1 ];then
        echo "$line is having a duplicate entry in Generator Conf File"
        remove_temp_files
        exit 1
      fi
      FOUND_GEN=`cat "$INPUT_FILE" | egrep -v "^#" | grep -w -m1 "$NAME"`
      Generator_Name[$i]=`echo "$FOUND_GEN" | cut -d'|' -f1`
      Generator_IP[$i]=`echo "$FOUND_GEN" | cut -d'|' -f2`
      Generator_DIR[$i]=`echo "$FOUND_GEN" | cut -d'|' -f5`
      Generator_Location[$i]=`echo "$FOUND_GEN" | cut -d'|' -f4`
      if [ "XX$SHOW_HEALTH" = "XX0" ];then
        get_gen_data $i $MY_PID $ENABLE_DEL_TR_FLAG
      fi
      i=$((i + 1))
    fi
  done<$USD_GEN_FILE
}

#function to sort the error file with respect to provided i/p generator list name.
sort_error_file()
{
  while read line
  do
    echo "$line" | egrep -v "^#" | egrep -v "^$" >$DEV_NULL
    if [ $? -ne 0 ];then
      continue
    fi
    xx=`echo $line | cut -d '|' -f1`
    cat $NS_WDIR/err.$MY_PID | grep "^$xx" >>$ERROR_FILE  2>$DEV_NULL
  done<$USED_FILE_FOR_SORT
}

MY_PID=$$
OUTPUT_FILE="/tmp/nsu_show_generator_data_`date +%m%d%y%R`.log"
ERROR_FILE="/tmp/nsu_show_generator_data_error_`date +%m%d%y%R`.log"
INPUT_FILE=""
USD_GEN_FILE=""
GUI=0
USED_FILE_FOR_SORT=""
ERROR_FLAG=0
GEN_NAMES="/tmp/generator_names.$$"
CONTROLLER_BUILD_VER=0
CONTROLLER_BUILD_FLAG=0
BUILD_VER=0
DELETE_GEN_TR=0
FILTERED_GEN_FILE=/tmp/filtered_gen_file_$$
SHOW_HEALTH=0
while getopts :f:u:e:o:b:v:dGh? opt
do
  case $opt in
    f) INPUT_FILE="$OPTARG" ;;
    u) USD_GEN_FILE="$OPTARG" ;;
    o) OUTPUT_FILE="$OPTARG" ;;
    b) BUILD_VER="$OPTARG" ;;
    e) ERROR_FILE="$OPTARG" 
       ERROR_FLAG=1 ;;
    G) GUI=1 ;;
    d) DELETE_GEN_TR=1;;
    v) CONTROLLER_BUILD_VER="$OPTARG"
       CONTROLLER_BUILD_FLAG=1;;
    h) SHOW_HEALTH=1 ;;
    ?) display_help_and_exit ;;
    *) display_help_and_exit ;;
  esac
done

>$OUTPUT_FILE
>$ERROR_FILE

trap handle_signal INT

check_mandatory_options
if [ ! -f $USD_GEN_FILE ];then
  display_help_and_exit "nsu_show_generator_data: $USD_GEN_FILE file does not exist"
fi

if [ ! -f $INPUT_FILE ];then
  display_help_and_exit "nsu_show_generator_data: $INPUT_FILE file does not exist"
fi

TOTAL_LINE=`cat $INPUT_FILE |wc -l`
if [ $TOTAL_LINE -eq 0 ];then
  display_help_and_exit "nsu_show_generator_data: Input file $INPUT_FILE is empty"
fi

if [[ "X$DELETE_GEN_TR" = "X1" ]] && [ "X$GUI" = "X1" -o "X$BUILD_VER" = "X1" ]; then
  echo "Invalid option with -d"
  exit 1
fi

GUI_HDR="Generator Name|Blade exist|Build version(NS)|Cmon version|Current Time|Test is running|DNS masq|Local nameserver|ISP nameserver|Gen SpecificKeywords|CPU|Total Disk Space(GB)|Available Disk Space(GB(%))|Total Memory(GB)|Free Memory(GB(%))|Environment file|Ethernet Speed"
if [ $GUI -eq 1 ];then
  echo "$GUI_HDR"
fi

#If used genertaor file is given then show only data only for used generators
#else show data for all generators
if [ "XX$USD_GEN_FILE" = "XX" ];then
  USED_FILE_FOR_SORT="$INPUT_FILE"
  get_all_generators_data
else
  USED_FILE_FOR_SORT="$USD_GEN_FILE" 
  get_used_generators_data
fi

if [ "XX$SHOW_HEALTH" = "XX1" ];then
  #call function
  show_gen_health
fi

get_gen_status_and_merge_files
if [ $ERROR_FLAG -eq 1 ];then
  sort_error_file
fi

if [ "X$BUILD_VER" = "X1" ];then
  rm -f $ERROR_FILE
fi

remove_temp_files
exit 0
