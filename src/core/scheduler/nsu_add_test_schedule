#!/bin/sh

AT=/usr/bin/at

#Check if user is a registered 'Active' cavisson user
USER_NAME=`whoami 2>/dev/null`
if [ $? != 0 ];then
  echo "Error: Unable to get the real user name"
  exit 1
fi
nsu_check_user $USER_NAME $0
if [ $? != 0 ];then
  exit 1
fi

if [ "XX" = "XX$NS_WDIR" ]
then
  NS_WDIR=/home/cavisson/work
fi

cd $NS_WDIR

SCENARIO=""
INVOKER="cli"
TIME=""

display_help_and_exit()
{
  echo "ERROR: Incorrect usage"
  echo $1
  echo "Usage:"
  echo "nsu_add_test_schedule -n <Scenario Name> {-t <time> | -r <relative time>} [-N Test Name] [-R retry count] [-I retry interval in sec] [-T timeout is sec] [-w wait time in minutes] [-f 0/1/2]"
  echo "-n   Scenario Name that would be Project/Subproject/<ScenarioName>."
  echo "     If 'Project/Subproject/' not given then <ScenarioName> assume from 'default/default/'"
  echo "     <Scenario Name> can be with or without .conf extension."
  echo "-t   time in format HH:MM"
  echo "     also can give time with specified date in format \"HH:MM MMDDYYYY\""
  echo "     For example: -t \"00:20  11082008"\"
  echo "-r   relative time means relative time from now that should in format HH:MM"
  echo "-N   Test Name that can be one word or can give more than one word using \"\""
  echo "-R   Retry count for pre test check"
  echo "-I   Retry Interval in seconds for pre test check" 
  echo "-T   Timeout in seconds for pre test check"
  echo "-w is used to specify wait time(in minutes) till new test wait for the action performed for the previously online running test."
  echo "-f action performed after wait time expires, it has 3 modes."
           echo " Mode 0 is used to specify, don't start a new test."
           echo " Mode 1 is used to specify, forcefully stop previously started test and start a new test after wait time."
           echo " Mode 2 is used to specify, start a new test in offline mode"
  echo "  Options -w and -f are valid only for test is invoked from scheduler or from GUI."
  #echo "    e.g.  nsu_start_test TestScenario or nsu_start_test TestScenario -master"
  exit 1
}

check_int()
{
  echo $1 | grep '^[0-9]*$' 2>&1>/dev/null 
  return $?
}

TIME="00:00"
PRE_TEST_CHECK_RETRY_COUNT=0
PRE_TEST_CHECK_RETRY_INTERVAL=60
PRE_TEST_CHECK_TIMEOUT=15
TEST_NAME="NA"

##
# Adds time to now
# add_time()
# {
#     time=$1
#     NOW=`date +%R`
#     NOW_h=`echo $NOW | cut -d':' -f1`
#     NOW_m=`echo $NOW | cut -d':' -f2`
    
#     time_h=`echo $time | cut -d':' -f1`
#     time_m=`echo $time | cut -d':' -f2`
    
#     relative_h=`expr $NOW_h + $time_h`
#     relative_m=`expr $NOW_m + $time_m`

#     if [ $relative_m -gt 59 ]; then
#         #echo $relative_m
#         rem=`expr $relative_m / 60`
#         relative_m=`expr $relative_m % 60`
#         relative_h=`expr $relative_h + $rem`
#     fi

#     if [ $relative_h -gt 23 ]; then
#         relative_h=`expr $relative_h % 24`
#     fi

#     relative_h=`printf "%02d" $relative_h`
#     relative_m=`printf "%02d" $relative_m`
#     TIME="$relative_h:$relative_m"
# }

add_time()
{
    time=$1

    relative_h=`echo $time | cut -d':' -f1`
    relative_m=`echo $time | cut -d':' -f2`

    relative_hm=`expr $relative_h \* 60`
    relative_m=`expr $relative_m + $relative_hm`
    
    TIME="now + ${relative_m}minutes"
}


id=`whoami`
# if [ $id != "cavisson" ]; then
#     echo "You can only run this command with cavisson id"
#     exit 1
# fi

if [ $# == 0 ]; then
    display_help_and_exit
fi

stime=0
rtime=0
Wait_time=0
Wait_action=0

check_error()
{
  if [ $stime == 0 -a $rtime == 0 ]; then
    display_help_and_exit "nsu_add_test_schedule: Options -t or -r should be use" 
  fi

  if [ $stime == 1 -a $rtime == 1 ]; then
    display_help_and_exit "nsu_add_test_schedule: Options -t and -r can not be use together" 
  fi
  
  if [ $stime -gt 1 -o $rtime -gt 1 ]; then
    display_help_and_exit "nsu_add_test_schedule: Options -t or -r can not be use more than one" 
  fi
}

while getopts n:t:r:N:R:I:T:w:f:? c
do
    case $c in
        n) SCENARIO="$OPTARG" ;;
        t) tTIME="$OPTARG"; TIME=$tTIME 
           stime=`expr $stime + 1` ;;
        r) tTIME="$OPTARG" ; add_time "$OPTARG" 
           rtime=`expr $rtime + 1` ;;
        N) echo $OPTARG | grep '^[ ]*$' 2>/dev/null
           if [ $? -ne 0 ];then
             TEST_NAME="$OPTARG" 
             echo $TEST_NAME | grep '^-[A-Z]$' 2>&1>/dev/null
             if [ $? -eq 0 ];then
               echo "Enter a valid Test Name " 
               exit 1
             fi
           fi;;
        R) PRE_TEST_CHECK_RETRY_COUNT="$OPTARG"
           check_int $PRE_TEST_CHECK_RETRY_COUNT
           if [ $? -ne 0 ];then
               echo "Retry Count should be a Integer"
               exit 1
           fi
           ;;
        I) PRE_TEST_CHECK_RETRY_INTERVAL="$OPTARG" 
           check_int $PRE_TEST_CHECK_RETRY_INTERVAL
           if [ $? -ne 0 ];then
               echo "Retry INTERVAL should be a Integer"
               exit 1
           fi
           ;;

        T) PRE_TEST_CHECK_TIMEOUT="$OPTARG"
           check_int $PRE_TEST_CHECK_TIMEOUT
           if [ $? -ne 0 ];then
               echo "Test Check Timeout should be a Integer"
               exit 1
           fi
           ;;
        w) Wait_time="$OPTARG" 
           if [ $Wait_time -lt 0 ];then
             echo "Error: Wait time should be greater than 0"
             exit -1
           fi
           ;;
        f) Wait_action="$OPTARG" 
           if [ $Wait_action -ne 0 -a $Wait_action -ne 1 -a $Wait_action -ne 2 ];then
             echo "Invalid mode for option -f"
             exit -1
           fi
           ;;

        ?) display_help_and_exit ;;
    esac
done

check_error

ScenName=$SCENARIO

FirstChar=`echo $ScenName | cut -c1`
if [ $FirstChar == "/" ]
then
  if [ ! -f $ScenName ]; then
    ScenFileName=${ScenName}.conf
  else
    ScenFileName=$ScenName
  fi
else
  #Archana - 3.2.3 Check if only scenario name given then pass default/default/<scenario name>     
  NUM=`echo $ScenName | awk -F "/" '{print NF}'`
  if [ $NUM == 1 ];then
    SFileName=scenarios/default/default/$ScenName
  elif [ $NUM == 3 ];then
    SFileName=scenarios/$ScenName
  else
    echo "'Project/Subproject/<ScenarioName>' is not given in proper format."
    exit -1
  fi
  if [ ! -f $SFileName ]; then
    ScenFileName=${SFileName}.conf
  else
    ScenFileName=$SFileName
  fi
fi

if [ ! -f  $ScenFileName ]
then
    echo "Scenario file not found, $ScenFileName"
        exit -1
fi

#Extract TNAME from scenario and replace TEST_NAME if not available before. If TNAME not found in scenario then TEST_NAME would be replace with NA
if [ "$TEST_NAME" == "NA" ]; then
  TEST_NAME=`cat $ScenFileName | grep ^TNAME | sed 's/^TNAME //g'`
  if [ "$TEST_NAME" == "" ]; then
    TEST_NAME="NA"
  fi
fi

CMD="nsu_start_test -n $SCENARIO -S scheduler -N "\"${TEST_NAME}\"" -R $PRE_TEST_CHECK_RETRY_COUNT -I $PRE_TEST_CHECK_RETRY_INTERVAL -T $PRE_TEST_CHECK_TIMEOUT -w $Wait_time -f $Wait_action"
#fi
sTIME=$tTIME
if [ $rtime -eq 1 ];then
  sTIME=`date --date="$TIME" +%H:%M`
fi
echo $CMD > /tmp/ns_sched_$id
RESULT=`$AT -q n -f /tmp/ns_sched_$id $TIME 2>&1`

if [ $? -eq 0 ];then
  echo "Scenario '$SCENARIO' added successfully in the NetStorm Scheduler for start time '$sTIME'."
  exit 0
else
ERROR=`grep 'past\|Garbled' <<< $RESULT| awk '{ if ($9=="Garbled") printf "Garbled Time" ; else if ($9 =="past") print "Time Passed" ; else printf "Error" ;}'`



  if [ "$ERROR" == "Time Passed" ] ; then

  echo "$sTIME Time Already Passed";

  elif [ "$ERROR" == "Garbled Time" ] ; then

     echo "$sTIME Invalid Date or Time, correct format is HH:mm MMDDYYYY";

  else

     echo "Error in Command Syntex";

  fi
    echo "Unable to add '$SCENARIO' for scheduling."

fi


