#!/bin/sh

#----------------------------------------------------------------------
# Name    :    nsu_add_user
# Author  :    Archana
# Note    :    This command only can run by root
#              From GUI, admin user will run this command using Bean which runs as root
# Purpose :    To create a new user account with default projects in 'Active' status
# Usage   :    nsu_add_user -u <user name> -g <group name> -e <email address> -p <password> [-d <project/subproject> -d option can repeat]
# where   :
#  -u <user name> : User Name 
#  -g <group name>: Group Name (this will be either Engineers or Observers)
#  -e <email address>: User Email address
#  -p <password>: password password option is not mandatory. If not given, then user is NOT created. Only added to list
#  -d <project/subproject>: Project and sub-project name
#     -d <... ... project can repeat>
# Modification History:
#   01/27/09:  Archana - Initial Version
#----------------------------------------------------------------------

. $NS_WDIR/bin/ns_user_admin_lib

USER_PROFILE_PATH=$HOME_DIR/users
PASSWD_CMD=$NS_WDIR/bin/nsi_add_passwd.py
DISTRO=`$NS_WDIR/tools/nsi_get_linux_release_ex -d`
RELEASE=`$NS_WDIR/tools/nsi_get_linux_release_ex -r`

add_header_for_firsttime()
{
  if [ ! -f $USER_DEFAULT_PROJECTS ];then
    echo "User Name|Project|Subproject" >$USER_DEFAULT_PROJECTS
  fi
  if [ ! -f $USER_PROFILE ];then
    echo "User Name|Group Name|Status|Email-Address|Creation Date|Last Modification Date|Role" >$USER_PROFILE
  fi
}

#To check uid call check_root_uid 
#check_root_uid "nsu_add_user"

UFLAG=0
GFLAG=0
EFLAG=0
PFLAG=0
DFLAG=0 # for -d option count must start from zero to keep in array
USER_NAME=""
GROUP_NAME=""
EMAIL=""
PASSWORD=""
PROJ_SUB_PROJ=""
ROLE="Standard"

#This method to give error Usage message and exit
display_help_and_exit()
{
  err_msgout "$1"
  err_msgout "Usage: nsu_add_user -u <User Name> -g <group name> -e <Email Address> -p <Password> [-r <role>] [-d <project/subproject> ...]"
  err_msgout "Where:"
  err_msgout "  -u is used to specify User Name"
  err_msgout "  -g is used to specify Group Name."
  #err_msgout "  -g is used to specify Group Name. It must be either Engineers or Observers."
  err_msgout "  -e is used to specify Email Address"
  err_msgout "  -p is used to specify User Password"
  err_msgout "  -r is used to specify role. It should either Standard or Admin. Default is Standard"
  err_msgout "  -d is used to specify default project and sub-project of user"
  err_msgout "     -d option is optional and can repeat"
#  err_msgout "All options are mandatory."
  exit 1
}

#This method to check mandatory options
check_mandatory_options()
{
  # Note - Password is not mandatory
  if [ "$USER_NAME" == "XX" -o "$GROUP_NAME" == "XX" -o "XX$EMAIL" == "XX" ];then
    display_help_and_exit "nsu_add_user: mandatory options are missing"
  fi
}

#This method to check if any option given more than one.
check_option()
{
  OPTION_FLAG=$1
  if [ $OPTION_FLAG -gt 0 ] ;then 
    display_help_and_exit "nsu_add_user: $2 option cannot be specified more than once."
  fi
}

#'root' user can not be add.
check_root_user()
{
  if [ "XX$USER_NAME" == "XXroot" ];then
    err_msgout "Error: '$USER_NAME' is a reserved internal user. It cannot be added."
    exit -1
  fi
}

#Check user if not exist then add user else show error message.
check_and_add_user()
{
  check_root_user 
  check_group_name 
  return_value=$?
  SUPPLEMENTARY_GROUP=cavisson
  INITIAL_LOGIN_GROUP=$GROUP_NAME
  CMD_OUT_FILE=/tmp/cmd.out.$$
  CMD_ERR_FILE=/tmp/cmd.err.$$
  # Add user in the Linux system using adduser linux command
  # adduser $USER_NAME 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
  #echo "X$DISTRO X$RELEASE"
  if [ $return_value == 1 ];then
   if [ \( "X$DISTRO" = "XUbuntu" -a "X$RELEASE" = "X1204" \) -o \( "X$DISTRO" = "XUbuntu" -a "X$RELEASE" = "X1404" \) -o \( "X$DISTRO" = "XUbuntu" -a "X$RELEASE" = "X1604" \) ]; then
     useradd -g $INITIAL_LOGIN_GROUP -G $SUPPLEMENTARY_GROUP -m $USER_NAME -s /bin/bash 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE   
   else
     adduser $USER_NAME -g $INITIAL_LOGIN_GROUP -G $SUPPLEMENTARY_GROUP 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
   fi
  elif [ $return_value == 2 ];then 
   if [ \( "X$DISTRO" = "XUbuntu" -a "X$RELEASE" = "X1204" \) -o \( "X$DISTRO" = "XUbuntu" -a "X$RELEASE" = "X1404" \) -o \( "X$DISTRO" = "XUbuntu" -a "X$RELEASE" = "X1604" \) ]; then
     useradd -g $INITIAL_LOGIN_GROUP -m $USER_NAME -s /bin/bash 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
   else
     adduser $USER_NAME -g $INITIAL_LOGIN_GROUP 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
   fi
  fi
  cmd_ret_value=$?
  if [ $cmd_ret_value == 0 ]; then
    msgout "User '$USER_NAME' created successfully."   
  elif [ $cmd_ret_value == 9 ];then
    err_msgout "Error: User '$USER_NAME' already exists as Linux unix."
  else
    err_msgout "Error in adding user '$USER_NAME' as Linux unix."
    cat $CMD_OUT_FILE $CMD_ERR_FILE
  fi
  rm -f $CMD_OUT_FILE $CMD_ERR_FILE
  exit -1
}

TOTAL_PRJ_SUB_PRJ=0 #This will keep total number of project/subproject

#This extract separately project and subproject from -d project/subproject
#since -d option can repeat so keep all in array
let a=0 #to count project/subproject
extract_proj_subproj()
{
  while [[ $a -lt ${#PROJ_SUB_PROJ[*]} ]] ; do
    PROJECT[$a]=`echo ${PROJ_SUB_PROJ[$a]} | egrep "/" | cut -d'/' -f1`
    SUB_PROJECT[$a]=`echo ${PROJ_SUB_PROJ[$a]} | egrep "/" | cut -d'/' -f2`
    if [ "${PROJECT[$a]}" == "" -o "${SUB_PROJECT[$a]}" == "" ];then
      err_msgout "-d <project/subproject> is not given in proper format."
      exit -1
    fi
    let a+=1
  done
  TOTAL_PRJ_SUB_PRJ=$a
}

#If successful add user then keep user default project detail file.
let COUNT=0 #to count project/subproject
create_user_default_project()
{
  while [[ $COUNT -lt $TOTAL_PRJ_SUB_PRJ ]] ; do
    if [ -f $USER_DEFAULT_PROJECTS ];then
      echo "$USER_NAME|${PROJECT[$COUNT]}|${SUB_PROJECT[$COUNT]}" >>$USER_DEFAULT_PROJECTS
    fi
    #msgout "Project details of user '$USER_NAME' has been successfully added in $USER_DEFAULT_PROJECTS."
    let COUNT+=1
  done
}

#If successful add user then create user profile, if already user profile exists then add further details.
#Date format: "MM/DD/YY HH:MM:SS" (24 hour format)
create_user_profile()
{
  DATE=`get_cur_date`
  if [ -f $USER_PROFILE ];then
    echo "$USER_NAME|$GROUP_NAME|Active|$EMAIL|$DATE|$DATE|$ROLE" >>$USER_PROFILE
  fi
  #msgout "Details of user '$USER_NAME' has been successfully added in $USER_PROFILE."
}

#This method is to assign password to new added user
assign_user_password()
{
  CMD_OUT_FILE=/tmp/cmd.out.$$
  CMD_ERR_FILE=/tmp/cmd.err.$$

  #echo $PASSWORD | passwd --stdin $USER_NAME 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
  #Commenting this because python is working in ubuntu but its not working in Linux FC14.
  #python $PASSWD_CMD $USER_NAME $PASSWORD 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
  #(echo "$USER_NAME:$PASSWORD") | chpasswd 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
  #cmd_ret_value=$?

  #if [[ $DISTRO = "Fedora" -a $RELEASE -eq 14 ] -o [$DISTRO = "Ubuntu" -a $RELEASE -eq 1204 ]]; then
  if [ \( $DISTRO = "Fedora" -a $RELEASE -eq 14 \) -o \( $DISTRO = "Ubuntu" -a $RELEASE -eq 1404 \) -o \( $DISTRO = "Ubuntu" -a $RELEASE -eq 1204 \) -o \( $DISTRO = "Ubuntu" -a $RELEASE -eq 1604 \) ]; then
    (echo "$USER_NAME:$PASSWORD") | chpasswd 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
    cmd_ret_value=$?
  else
    echo $PASSWORD | passwd --stdin $USER_NAME 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
    cmd_ret_value=$?
  fi

  if [ $cmd_ret_value == 0 ]; then
    msgout "Password for User '$USER_NAME' has been successfully set."
    rm -f $CMD_OUT_FILE $CMD_ERR_FILE
    return 0
  else
    cat $CMD_OUT_FILE $CMD_ERR_FILE
  fi
  rm -f $CMD_OUT_FILE $CMD_ERR_FILE
  exit -1
}

check_group_name()
{ 

  # Check if group name is in the group profile or not
  check_group_is_cavisson_group $GROUP_NAME
  GROUP_TYPE=`egrep -w ^$GROUP_NAME $GROUP_PROFILE | cut -d"|" -f2`
  if [ "$GROUP_TYPE" == "Engineers" ];then
    return 1    
  elif [ "$GROUP_TYPE" == "Observers" ];then
    return 2
  fi
}

while getopts u:g:e:p:d:r:? c
do
  case $c in
    u) check_option $UFLAG "-u"
       UFLAG=`expr $UFLAG + 1`
       USER_NAME="$OPTARG" ;;
    g) check_option $GFLAG "-g"
       GFLAG=`expr $GFLAG + 1`
       GROUP_NAME="$OPTARG" ;;
    e) check_option $EFLAG "-e"
       EFLAG=`expr $EFLAG + 1`
       EMAIL="$OPTARG" ;;
    p) check_option $PFLAG "-p"
       PFLAG=`expr $PFLAG + 1`
       PASSWORD="$OPTARG" ;;
    d) PROJ_SUB_PROJ[$DFLAG]=$OPTARG; DFLAG=$((DFLAG+1))  
       extract_proj_subproj $PROJ_SUB_PROJ[$DFLAG]
       ;;
    r) ROLE=$OPTARG
       ;;
    ?) display_help_and_exit ;;
    *) display_help_and_exit ;;
  esac
done

check_mandatory_options

#mkdir -p $USER_PROFILE_PATH
#chmod 777 $USER_PROFILE_PATH

user_exists=0
profile_exists=0

if [ "$ROLE" != "Standard" -a "$ROLE" != "Admin" ]; then
  echo "Error: Invalid role passed"
  display_help_and_exit
fi

# Since netstorm user is created during new machine installation, we need to check if netstorm user exists or not.
# Also admin user is create during install of new machine. 
# Install can be done many times so we need to check if already there or not
if [ "XX$USER_NAME" == "XXcavisson" -o "XX$USER_NAME" == "XXguest" ];then

  #For admin role is always Admin
  if [ "XX$USER_NAME" == "XXcavisson" ];then
    ROLE="Admin"
  fi
else
  echo "Error: Adding user $USER_NAME is not allowed"
  exit -1
fi

add_header_for_firsttime
user_exists=`getent passwd $USER_NAME | wc -l` 
profile_exists=`cat $USER_PROFILE | grep -w "^$USER_NAME" | wc -l`

# Add linux user if does not exist
if [ $user_exists -ne 1 ];then
  #Check if user is ldap user
  if [ "XX$PASSWORD" == "XXNA" ];then
    echo "User '$USER_NAME' does not exists as ldap user"
    exit;
  fi 
  #Password is given, then we will add user and password
  if [ "XX$PASSWORD" != "XX" ];then
    check_and_add_user
    assign_user_password
  fi
else
  if [ "XX$PASSWORD" != "XXNA" ];then
     echo "User '$USER_NAME' already exists as linux user"
  fi 
fi

# Add profile if does not exist
if [ $profile_exists -le 0 ];then
  create_user_profile 
  create_user_default_project
  usermod -aG $GROUP_NAME $USER_NAME
  echo "User '$USER_NAME' has been successfully added as cavisson user."
  msgout "----------------------------------------------------------------------"
else
  echo "User '$USER_NAME' profile already exists."
fi

echo "users directory in work created" 

exit 0
