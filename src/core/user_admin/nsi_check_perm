#!/bin/sh

#----------------------------------------------------------------------
# Name    :    nsi_check_perm
# Author  :    Archana
# Purpose :    To check permission of directories and files use nsi_check_perm command.
# Usage   :    nsi_check_perm [-f <File Name> | -d <Directory Name>] -p <Permission>
# Exit
#   0 - permission is OK
#   1 - not ok
#Modification History:
#   01/27/09:  Archana - Initial Version
#----------------------------------------------------------------------


. $NS_WDIR/bin/ns_user_admin_lib

#This doing because if any relative path given then it will suppose to in NS_WDIR or give absolute path
cd $NS_WDIR

#This method is to find out if file/dir has read/write/execution permission or not
#return 0 if get permission 
#return 1 if no permission
check_file_dir_permission()
{
  [ -$PERMISSION $FILE_OR_DIR ] && PER=0 || PER=1
    return $PER 
} 

#This method to give error Usage message and exit
display_help_and_exit()
{
  err_msgout "$1"
  err_msgout "Usage: nsi_check_perm [-f <File Name> | -d <Directory Name>] -p <Permission>"
  err_msgout "Where:"
  err_msgout "  -f is used to specify File Name"
  err_msgout "  -d is used to specify Directory name"
  err_msgout "  -p is used to specify Permission (r or w or x)"
  exit -1
}

fFLAG=0
dFLAG=0
pFLAG=0
check_option()
{
  OPTION_FLAG=$1
  if [ $OPTION_FLAG -gt 0 ] ;then
    display_help_and_exit "nsi_check_perm: $2 option cannot be specified more than once."
  fi
}

#This method to check -p option with other -f or -d option
check_option_error()
{
  if [ $fFLAG -eq 0 -a $pFLAG -eq 0 -a $dFLAG -eq 0 ];then
   display_help_and_exit
  fi

  if [  $pFLAG != 0 ];then
    if [ $fFLAG -eq 1 -a $dFLAG -eq 1 ];then
      display_help_and_exit "nsi_check_perm: options -f and -d can not be used together"
    elif [ $fFLAG -eq 0 -a $dFLAG -eq 0 ];then
      display_help_and_exit "nsi_check_perm: options -p must be use with -f or -d option"
    fi
  elif [ $fFLAG -eq 1 -o $dFLAG -eq 1 ];then
    display_help_and_exit "nsi_check_perm: options -p must be use with -f or -d option"
  fi
}

#To check permission type , it should be only r or w or x
check_permission_type()
{
  if [ "$PERMISSION" != "r" -a "$PERMISSION" != "w" -a "$PERMISSION" != "x" ];then
    err_msgout "Permission should r or w or x only."
    exit -1
  fi
}

#This method is to check if specified file/dir not exist then error and exit
check_if_filedir_exist()
{
  if [ $fFLAG -eq 1 ];then
    if [ ! -f $FILE_OR_DIR ];then
      echo "File '$FILE_OR_DIR' does not exist"
      exit -1
    fi
  elif [ $dFLAG -eq 1 ];then
    if [ ! -d $FILE_OR_DIR ];then
      echo "Directory '$FILE_OR_DIR' does not exist"
      exit -1
    fi
  fi
}

while getopts f:d:p:? c
do
  case $c in
    f) check_option $fFLAG "-f"; 
       fFLAG=`expr $fFLAG + 1`;
       FILE_OR_DIR="$OPTARG" ;;
    d) check_option $dFLAG "-d"; 
       dFLAG=`expr $dFLAG + 1`; 
       FILE_OR_DIR="$OPTARG" ;;
    p) check_option $pFLAG "-p";
       pFLAG=`expr $pFLAG + 1`; 
       PERMISSION="$OPTARG" ;;
    ?) display_help_and_exit ;;
    *) display_help_and_exit ;;
  esac
done

check_option_error
check_if_filedir_exist
check_permission_type

check_file_dir_permission
#exit 0
