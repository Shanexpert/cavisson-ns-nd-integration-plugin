#!/bin/sh
#----------------------------------------------------------------------
# Name    :    ns_user_admin_lib
# Author  :    Archana
# Purpose :    This file suppose to keep methods that will call from different different commands.
#              So this will call as our own library file
# Modification History:
#   01/27/09:  Archana - Initial Version
#----------------------------------------------------------------------

USER_PROFILE=$HOME_DIR/users/user_profiles.dat
USER_DEFAULT_PROJECTS=$HOME_DIR/users/user_default_projects.dat
GROUP_PROFILE=$HOME_DIR/users/group_profile.dat
USER_TEST_TIMES=$NS_WDIR/etc/user_test_times.dat

#This log file will keep user administration/management operations:
# - Add User
# - Delete User
# - Edit User profile
# - Active/Inactive user
# - Change password
#USER_ADMIN_DEBUG_LOG=$NS_WDIR/user_admin_debug.log
#touch $USER_ADMIN_DEBUG_LOG

msgout()
{
#  echo "$1" >>$USER_ADMIN_DEBUG_LOG
#  echo "$1"
 return 0;
}

#USER_ADMIN_ERROR_LOG=$NS_WDIR/user_admin_error.log
#touch $USER_ADMIN_ERROR_LOG
err_msgout()
{
#  echo "$1" >>$USER_ADMIN_ERROR_LOG
  echo "$1"
}

#This method is to check user id
check_root_uid()
{
  CMD_NAME=$1
  USERID=`whoami 2>/dev/null`
  if [ $? != 0 ];then
    echo "Error: Unable to get the real user name"
    exit 1
  else
    if [ "XX$USERID" != "XXroot" ];then
      err_msgout "Error: $CMD_NAME command must be run as 'root' only. Currently being run as '$USERID'"
      exit 1
    fi
  fi
}

#This method to check if user is cavisson user or not
check_user_is_cavisson_user()
{
  USER_NAME=$1
  egrep -w ^$USER_NAME $USER_PROFILE >/dev/null
  if [ $? != 0 ]; then
    err_msgout "Error: User '$USER_NAME' is not a cavisson user."
    exit -1
  fi
}

#This method to check if group is in the group profile or not
check_group_is_cavisson_group()
{
  GROUP_NAME=$1
  egrep -w ^$GROUP_NAME $GROUP_PROFILE >/dev/null
  if [ $? != 0 ]; then
    err_msgout "Error: Group '$GROUP_NAME' is not a cavisson group."
    exit -1
  fi
}

#This method to check if user is 'Acitve' cavisson user or not
check_user_is_active_cavisson_user()
{
  USER_NAME=$1
  CMD=$2
  egrep -w ^$USER_NAME $USER_PROFILE >/dev/null
  if [ $? != 0 ]; then
    echo "Command '$CMD' cannot be run as '$USER_NAME' user as this user is not a registered user."
    exit 1
  fi
  get_status $USER_NAME
  if [ $STATUS != "Active" ];then
    echo "Command '$CMD' cannot be run as '$USER_NAME' user as this user is not a 'Active' user."
    exit 1
  fi
}

#Get current date/time in "MM/DD/YY HH:MM:SS" (24 hour format)
get_cur_date()
{
  echo `date +"%D %T"`
}

#If any change done in user_profiles.dat then need to modify with current date to 'Last Modification Date' field
change_last_modification_date()
{
  TMP_USER_PROFILE=/tmp/user_profile.$$
  USER_NAME=$1
  CHANGED_DATE=`get_cur_date`
  msgout "Changing Last Modification Date from $USER_PROFILE for user '$USER_NAME'"
  awk -v USER=$USER_NAME -v MOD_DATE="$CHANGED_DATE" '{OFS=FS="|"}$1==USER{$6=MOD_DATE}{print}' $USER_PROFILE >$TMP_USER_PROFILE
  mv $TMP_USER_PROFILE $USER_PROFILE
}

#To get status of user (Active or Inactive)
get_status()
{
  USER_NAME=$1
  STATUS=`egrep -w ^$USER_NAME $USER_PROFILE | cut -d '|' -f3`
  msgout "Current Status of user '$USER_NAME' is '$STATUS'"
}

#This method to edit email address 
change_email_address()
{
  TMP_USER_PROFILE=/tmp/user_profile.$$
  USER_NAME=$1
  EMAIL_ADD=$2
  awk -v USER=$USER_NAME -v EMAIL_ADDRESS="$EMAIL_ADD" '{OFS=FS="|"}$1==USER{$4=EMAIL_ADDRESS}{print}' $USER_PROFILE >$TMP_USER_PROFILE
  mv $TMP_USER_PROFILE $USER_PROFILE
  msgout "Email address of user '$USER_NAME' successfully changed"
  change_last_modification_date $USER_NAME
}
#this method use to change the role of user from Admin to Standard
change_role_to_standard()
{
  USER_NAME=$1
  ROLE=$2

#  ROLE=`egrep -w ^$USER_NAME $USER_PROFILE | cut -d '|' -f7`
 # if [ $ROLE == "Admin" ];then
     TMP_USER_PROFILE=/tmp/user_profile.$$
     GROUP_NAME=`nsu_show_user_group -n $USER_NAME`
    # awk 'BEGIN{OFS=FS="|"}$7=="Admin"{$7="Standard"}{print}' $USER_PROFILE >$TMP_USER_PROFILE
     awk -v USER=$USER_NAME -v ROLE="$ROLE" '{OFS=FS="|"}$1==USER{$7=ROLE}{print}' $USER_PROFILE >$TMP_USER_PROFILE
     mv $TMP_USER_PROFILE $USER_PROFILE
     msgout " Role of user '$USER_NAME' successfully changed 'Admin' to 'Standard'"
     change_last_modification_date $USER_NAME
    # else
     #err_msgout "Role of user '$USER_NAME' already 'Standard'"
 # fi
}
#this method used to change the role of user from Standard to Admin
change_role_to_admin()
{
  USER_NAME=$1
  ROLE=$2

#  ROLE=`egrep -w ^$USER_NAME $USER_PROFILE | cut -d '|' -f7`
 # if [ $ROLE == "Standard" ];then
     TMP_USER_PROFILE=/tmp/user_profile.$$
     GROUP_NAME=`nsu_show_user_group -n $USER_NAME`
     #awk 'BEGIN{OFS=FS="|"}$7=="Standard"{$7="Admin"}{print}' $USER_PROFILE >$TMP_USER_PROFILE
     awk -v USER=$USER_NAME -v ROLE="$ROLE" '{OFS=FS="|"}$1==USER{$7=ROLE}{print}' $USER_PROFILE >$TMP_USER_PROFILE
     mv $TMP_USER_PROFILE $USER_PROFILE
     msgout " Role of user '$USER_NAME' successfully changed 'Standard' to 'Admin'"
     change_last_modification_date $USER_NAME
   #  else
    # err_msgout "Role of user '$USER_NAME' already 'Admin'"
 # fi
}



#This method use to make Inactive status if found Active status of user
change_status_to_Inactive()
{
  USER_NAME=$1
  STATUS=`egrep -w ^$USER_NAME $USER_PROFILE | cut -d '|' -f3`
  if [ $STATUS == "Active" ];then
    TMP_USER_PROFILE=/tmp/user_profile.$$
    GROUP_NAME=`nsu_show_user_group -n $USER_NAME`
    eval sed -e 's/^$USER_NAME\|$GROUP_NAME\|Active/$USER_NAME\|$GROUP_NAME\|Inactive/g' $USER_PROFILE >$TMP_USER_PROFILE
    mv $TMP_USER_PROFILE $USER_PROFILE
    msgout "Status of user '$USER_NAME' successfully changed 'Active' to 'Inactive'"
    change_last_modification_date $USER_NAME 
  else
    err_msgout "Status of user '$USER_NAME' already 'Inactive'"
  fi
}

#This method use to make Active status if found Inactive status of user
change_status_to_Active()
{
  USER_NAME=$1
  STATUS=`egrep -w ^$USER_NAME $USER_PROFILE | cut -d '|' -f3`
  if [ $STATUS == "Inactive" ];then
    TMP_USER_PROFILE=/tmp/user_profile.$$
    GROUP_NAME=`nsu_show_user_group -n $USER_NAME`
    eval sed -e 's/^$USER_NAME\|$GROUP_NAME\|Inactive/$USER_NAME\|$GROUP_NAME\|Active/g' $USER_PROFILE >$TMP_USER_PROFILE
    mv $TMP_USER_PROFILE $USER_PROFILE
    msgout "Status of user '$USER_NAME' successfully changed 'Inactive' to 'Active'"
    change_last_modification_date $USER_NAME
  else
    err_msgout "Status of user '$USER_NAME' already 'Active'"
  fi
}

#This method will delete 
# - defaults project, 
# - user details from user profile 
# - test run time details when user has deleted
delete_user_from_profile()
{
  TMP_USER_PROFILE=/tmp/user_profile.$$
  USER_NAME=$1
  eval sed -e '/^$USER_NAME\|/d' $USER_DEFAULT_PROJECTS >$TMP_USER_PROFILE
  mv $TMP_USER_PROFILE $USER_DEFAULT_PROJECTS
  eval sed -e '/^$USER_NAME\|/d' $USER_PROFILE >$TMP_USER_PROFILE
  mv $TMP_USER_PROFILE $USER_PROFILE
  eval sed -e '/^$USER_NAME\|/d' $USER_TEST_TIMES >$TMP_USER_PROFILE
  cp $TMP_USER_PROFILE $USER_TEST_TIMES
  rm -f $TMP_USER_PROFILE
  #msgout "All details of user '$USER_NAME' has been successfully deleted from user profile."
}

#This method will delete
# - group details from group profile
delete_group_from_group_profile()
{
  TMP_GROUP_PROFILE=/tmp/group_profile.$$
  GROUP_NAME=$1
  eval sed -e '/^$GROUP_NAME\|/d' $GROUP_PROFILE >$TMP_GROUP_PROFILE
  mv $TMP_GROUP_PROFILE $GROUP_PROFILE 
}

#This method call nsu_authenticate_user command that is written in C program. 
#This will check user name, password for Active user
#nsu_authenticate_user command return following status:
#     return 0 for Active user i.e. valid netstorm user.
#     return 1 for Inactive user  i.e. Invalid netstorm user.
#     return 2 for not netstorm user  i.e. Invalid netstorm user.
#     return 3 for other errors if any. (e.g. User does not exits or password is wrong)

check_authenticate_user()
{
  USER_NAME=$1
  PASSWORD=$2
  CMD_OUTPUT=`eval $NS_WDIR/bin/nsu_authenticate_user -u $USER_NAME -p $PASSWORD` 
  RETURN_STATUS=$?
  if [ $RETURN_STATUS != 0 ]; then
    err_msgout "Error: $CMD_OUTPUT"
    exit -1
  else
    msgout "$CMD_OUTPUT"
  fi
}

#For testing
#check_authenticate_user $1 $2
