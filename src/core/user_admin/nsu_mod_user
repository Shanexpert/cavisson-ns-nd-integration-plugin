#!/bin/sh

#----------------------------------------------------------------------
# Name    :    nsu_mod_user
# Author  :    Archana
# Purpose :    This command only can run by root/admin user only.
#              This file is to modify user details means user can change password, 
#              email address, status, project/sub-project.
#              Only for Active status user can modify user details.
#             This will replace all default project of specified user.
# Usage:
#  nsu_mod_user -u <User Name> [-o <Old Password> -p <New Password>] [-d <project/subproject> ...] [-e <email address>] [-s <status>]
# where 
#  -u <user name>: User Name 
#  -o <old password>: Old user password
#  -p <password>:  New user password
#  -d <project/subproject>: Project and sub-project name 
#     -d <... ... project can repeat>
#  -e <email address>: User Email address
#  -s <status>: Active/ Inactive
#  -r <Role>: Standard/Admin
# Modification History:
#   01/27/09:  Archana - Initial Version
#   02/17/09:  Archana - To delete all default project of user
#----------------------------------------------------------------------

. $NS_WDIR/bin/ns_user_admin_lib

#To check uid call check_root_uid
check_root_uid "nsu_mod_user"

check_user_status()
{
  get_status $USER_NAME
  if [ $STATUS != "Active" ];then
    err_msgout "Error: Current status of user '$USER_NAME' is '$STATUS'"
    err_msgout "Only 'Active' user details can be modified"
    exit -1
  fi
}

display_help_and_exit()
{
  err_msgout -n "Usage: "
  err_msgout "nsu_mod_user -u <User Name> [-o <Old Password> -p <New Password>] [-d <project/subproject> ...] [-e <email address>] [-s <status>] -r <Role>"
  err_msgout "Where:"
  err_msgout "  -u is used to specify User Name (mandatory)"
  err_msgout "  -o is used to specify Old user password"
  err_msgout "  -p is used to specify New user password"
  err_msgout "  -d is used to specify Project and sub-project name"
  err_msgout "     -d option can repeat"
  err_msgout "     if given '-d None', then it will delete all default projects of user"
  err_msgout "  -e is used to specify Email address"
  err_msgout "  -s is used to specify Active/ Inactive Status"
  err_msgout "  -r is used to specify role of user Standard/Admin"
  exit 1
}

UFLAG=0
OFLAG=0
DFLAG=0 # for -d option count must start from zero to keep in array
PFLAG=0
EFLAG=0
SFLAG=0
RFLAG=0

check_option()
{
  OPTION_FLAG=$1
  if [ $OPTION_FLAG -gt 0 ] ;then
    err_msgout "nsu_mod_user: $2 option cannot be specified more than once."
    display_help_and_exit
  fi
}

change_password()
{
  check_user_status
  if [ "$OLD_PASSWORD" != "" ];then
    check_authenticate_user $USER_NAME $OLD_PASSWORD
  fi
  RETURN=$?
  if [ $RETURN == 0 ]; then
    CMD_OUT_FILE=/tmp/cmd.out.$$
    CMD_ERR_FILE=/tmp/cmd.err.$$
    #echo $NEW_PASSWORD | passwd --stdin $USER_NAME 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
    (echo "$USER_NAME:$NEW_PASSWORD") | chpasswd 1>$CMD_OUT_FILE 2>$CMD_ERR_FILE
    cmd_ret_value=$?
    if [ $cmd_ret_value == 0 ]; then
      echo "Password for User '$USER_NAME' has been successfully set."
      rm -f $CMD_OUT_FILE $CMD_ERR_FILE
      return 0
    else
      cat $CMD_OUT_FILE $CMD_ERR_FILE
    fi
    rm -f $CMD_OUT_FILE $CMD_ERR_FILE
    exit -1
  fi
}

#This method to change old password to new password for specified user
#User must pass both -o and -p options to change password
change_oldpass_to_newpass()
{
  if [ $OFLAG == 0 -a $PFLAG == 1 ]; then
    change_password
    #err_msgout "To change password need -o <Old Password> -p <New Password> options"
    #exit -1
  elif [ $OFLAG == 1 -a $PFLAG == 0 ]; then
    err_msgout "To change password need -o <Old Password> -p <New Password> options"
    exit -1
  elif [ $OFLAG == 1 -a $PFLAG == 1 ]; then
    change_password
  fi
}

#To change user status no need to check status of user is Active or Inactive
change_status()
{
  if [ "$CHANGE_STATUS" == "Inactive" ];then
    change_status_to_Inactive $USER_NAME
  elif [ "$CHANGE_STATUS" == "Active" ];then
    change_status_to_Active $USER_NAME
  else
    err_msgout "Status should be Active/Inactive only." 
  fi
}
#to change user role
change_role()
{
   if [ "$ROLE" == "Admin" ];then
    change_role_to_standard $USER_NAME $ROLE
  elif [ "$ROLE" == "Standard" ];then
    change_role_to_admin $USER_NAME $ROLE
  else
    err_msgout "Role should be Admin/Standard only."
  fi
}


TOTAL_PRJ_SUB_PRJ=0 #This will keep total number of project/subproject

#This extract separately project and subproject from -d project/subproject
#since -d option can repeat so keep all in array
let a=0 #to count project/subproject
extract_proj_subproj()
{
  while [[ $a -lt ${#PROJ_SUB_PROJ[*]} ]] ; do
    PROJECT[$a]=`echo ${PROJ_SUB_PROJ[$a]} | egrep "/" | cut -d'/' -f1`
    SUB_PROJECT[$a]=`echo ${PROJ_SUB_PROJ[$a]} | egrep "/" | cut -d'/' -f2`
    if [ "${PROJECT[$a]}" == "" -o "${SUB_PROJECT[$a]}" == "" ];then
      err_msgout "-d <project/subproject> is not given in proper format."
      exit -1
    fi
    let a+=1
  done
  TOTAL_PRJ_SUB_PRJ=$a
}

#This method is to change default project/subproject details of user
#First delete all user default projects and then add new specified project/subproject.
#then add new project/subproject datails of specified user.
let COUNT=0 #to count project/subproject
change_default_project_subprojet()
{
  TMP_USER_DEFAULT_PROJECTS=/tmp/user_profile.$$
  #Delete all existing project/subproject details of user
  eval sed -e '/^$USER_NAME\|/d' $USER_DEFAULT_PROJECTS >$TMP_USER_DEFAULT_PROJECTS

  while [[ $COUNT -lt $TOTAL_PRJ_SUB_PRJ ]] ; do
    echo "$USER_NAME|${PROJECT[$COUNT]}|${SUB_PROJECT[$COUNT]}" >>$TMP_USER_DEFAULT_PROJECTS
    let COUNT+=1
  done
  mv $TMP_USER_DEFAULT_PROJECTS $USER_DEFAULT_PROJECTS
  echo "Default project of User '$USER_NAME' successfully changed"
}

#This method is to delete all default project of user.
#Supposing if user give -d None 
#that means user want to delete all default projects details from user default projects profile.
delete_all_user_default_project_from_profile()
{
  TMP_USER_DEFAULT_PROJECTS=/tmp/user_profile.$$
  #Delete all existing project/subproject details of user
  eval sed -e '/^$USER_NAME\|/d' $USER_DEFAULT_PROJECTS >$TMP_USER_DEFAULT_PROJECTS
  mv $TMP_USER_DEFAULT_PROJECTS $USER_DEFAULT_PROJECTS
  echo "Default project of User '$USER_NAME' successfully deleted"
}

while getopts u:o:p:d:e:s:r:? c
do
  case $c in
    u) check_option $UFLAG "-u"
       UFLAG=`expr $UFLAG + 1`
       USER_NAME="$OPTARG" ;;
    o) check_option $OFLAG "-o"
       OFLAG=`expr $OFLAG + 1`
       OLD_PASSWORD="$OPTARG" ;;
    p) check_option $PFLAG "-p"
       PFLAG=`expr $PFLAG + 1`
       NEW_PASSWORD="$OPTARG" ;;
    d) PROJ_SUB_PROJ[$DFLAG]=$OPTARG; DFLAG=$((DFLAG+1))
       if [ $PROJ_SUB_PROJ != "None" ];then
         extract_proj_subproj $PROJ_SUB_PROJ[$DFLAG]
       fi
       ;;
    e) check_option $EFLAG "-e"
       EFLAG=`expr $EFLAG + 1`
       EMAIL="$OPTARG" ;;
    s) check_option $SFLAG "-s"
       SFLAG=`expr $SFLAG + 1`
       CHANGE_STATUS="$OPTARG" ;;
    r) check_option $RFLAG "-r"
       RFLAG=`expr $RFLAG + 1`
       ROLE="$OPTARG" ;;
    ?) display_help_and_exit ;;
    *) display_help_and_exit ;;
  esac
done

if [ $UFLAG == 0 ];then  #Suppose -u option is mandatory.
  err_msgout "Error: Option -u <User Name> is mandatory."
  display_help_and_exit
  exit -1
fi

check_user_is_cavisson_user $USER_NAME
change_oldpass_to_newpass

if [ $EFLAG == 1 ];then
  check_user_status
  change_email_address $USER_NAME $EMAIL
fi

if [ $SFLAG == 1 ];then
  change_status
fi

if [ $RFLAG == 1 ];then
   check_user_status
   change_role
fi


if [ $DFLAG != 0 ];then
  check_user_status
  if [ $PROJ_SUB_PROJ == "None" ];then
    delete_all_user_default_project_from_profile
  else
    change_default_project_subprojet
  fi
fi
msgout "----------------------------------------------------------------------"
exit 0
