#!/bin/bash

#######################################################################################################
# Name   : nsi_db_get_url_comp_data
# Example:
# Initial version : --
#   Author: --
#   Date: --
# Modified version:
#   Author: Nikita Pandey, Manmeet Singh
#   Date: 15 April 2012
#   Modification Details:
# Usage: See usage method
# Example:
# From Transaction (ODHomePage) to Page to Main URL Component
# nsi_db_get_url_comp_data --testrun 3988 --object 2 --status -2 --pageidx 91 --urltype 1 --trans ODHomePage
# URL|DNS Lookup|Connection Time|SSL Handshake|Request Send Time|First Byte Received Time|Content Download Time|URL Index|Download Time|URL Hits
# /|0|11|0|8|519|16|1908|554|26
#
# Query:
# SELECT
#   UrlName as "URL",
#   round(avg(CASE WHEN URLRecord_3988.ConnectStartTime > 0 THEN (URLRecord_3988.ConnectStartTime - UrlRecord_3988.StartTime) ELSE 0 END)) AS "DNS Lookup",
#   round(avg(CASE WHEN URLRecord_3988.ConnectDoneTime > 0 THEN (URLRecord_3988.ConnectDoneTime - URLRecord_3988.ConnectStartTime) ELSE 0 END)) AS "Connection Time",
#   round(avg(CASE WHEN URLRecord_3988.SSLHandShakeDone > 0 THEN (URLRecord_3988.SSLHandShakeDone - URLRecord_3988.ConnectDoneTime) ELSE 0 END)) AS "SSL Handshake",
#   round(avg(CASE WHEN URLRecord_3988.WriteCompleTime > 0 THEN (URLRecord_3988.WriteCompleTime - URLRecord_3988.SSLHandShakeDone) ELSE 0 END)) AS "Request Send Time",
#   round(avg(CASE WHEN URLRecord_3988.FirstByteRcdTime > 0 THEN(URLRecord_3988.FirstByteRcdTime - URLRecord_3988.WriteCompleTime) ELSE 0 END)) AS "First Byte Received Time",
#   round(avg(CASE WHEN (URLRecord_3988.RequestCompletedTime > 0 AND URLRecord_3988.FirstByteRcdTime > 0) THEN (URLRecord_3988.RequestCompletedTime - URLRecord_3988.FirstByteRcdTime) ELSE 0 END )) AS "Content Download Time",
#   URLRecord_3988.URLIndex as "URL Index",
#   round(avg(URLRecord_3988.RequestCompletedTime - UrlRecord_3988.StartTime)) AS "Download Time",
#   Count (*) AS "URL Hits"
# FROM
#   UrlRecord_3988,
#   UrlTable_3988,
#   PageRecord_3988,
#   TransactionTable_3988,
#   TransPageRecord_3988
# WHERE
#   URLTable_3988.URLIndex = URLRecord_3988.URLIndex
#   AND URLRecord_3988.UrlType = 1
#   AND URLRecord_3988.SessionInstance = PageRecord_3988.SessionInstance
#   AND UrlRecord_3988.PageInstance = PageRecord_3988.PageInstance
#   AND URLRecord_3988.ChildIndex = PageRecord_3988.ChildIndex
#   AND URLRecord_3988.PageIndex = 91
#   AND URLRecord_3988.SessionInstance = TransPageRecord_3988.SessionInstance
#   AND UrlRecord_3988.PageInstance = TransPageRecord_3988.PageInstance
#   AND URLRecord_3988.ChildIndex = TransPageRecord_3988.ChildIndex
#   AND TransactionTable_3988.TransactionIndex = TransPageRecord_3988.TransactionIndex
#   AND TransactionTable_3988.TransactionName = 'ODHomePage'
# GROUP BY
#   URLName,
#   URLRecord_3988.URLIndex
#
# Example2 - Same as above but with InLine URLs
#
#nsi_db_get_url_comp_data --testrun 3988 --object 2 --status -2 --pageidx 91 --urltype 2 --trans ODHomePage
#QUERY RESULT:
# URL|DNS Lookup|Connection Time|SSL Handshake|Request Send Time|First Byte Received Time|Content Download Time|URL Index|Download Time|URL Hits
# /1236570911/bundles/en_US_od_business/mvtfooter1.js|0|0|0|0|7|0|1933|8|26
# /1246000338/bundles/en_US_od_business/webiq.js|0|0|0|0|10|0|1932|11|26
# /1589414947/bundles/en_US_od_business/richpromo.js|0|11|0|0|9|0|1912|21|26
# ....
# /WebIQ/DataServer/CreateAuthCookie.srf?WebIQOptInVer=5&webiq_u=1347721124402&jsonp_cb=WebIQ.JSON.CBM%5B0%5D|2|351|0|10|318|121|1954|802|26
# (47 rows)



#########################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

# Set default values of variables
TRNUM=""
LOCATION="All"
ACCESS="All"
BROWSER="All"

########################################################################
#                       Functions's Definitions
#######################################################################

usage()
{
  echo
  echo "$*"
  echo
  echo "USAGE:"
  echo "====="
  echo
  echo "$0 --testrun <value> --urlidx <value> --location <value> --access <value> --browser <value> --script <value> --status <value> --starttime <value> --endtime <value> --trans <value> --page <value> --resptimeqmode<value> --responsetime<value> --responsetime2<value> --phaseidx<value>"
  echo
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --urlidx is the url index, which is mandatory argument."
  echo "  --urltype is the url type (1, 2 or 3), which is optional argument, required if url component details are needed for a page."
  echo "  --object is the object type (1, 2 or 3), which is mandatory argument"
  echo "  --location is the location-slectection: All for all otherwise location name,which is optional argument"
  echo "  --access is the access-slectection: All for all otherwise access name, which is optional argument"
  echo "  --browser is the browser-slectection: All for all otherwise browser name,which is optional argument"
  echo "  --script is for selecting particular script result, which is optional argument"
  echo "  --status is selecting particular staus (status is 0 for Success only, positive for the Failure code, -1 for all failures -2 for All (Success and all failures)), which is optional argument"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, which is mandatory argument."
  echo "  --trans is for selecting particular Transaction result, which is optional argument"
  echo "  --page is for selecting particular page result, which is optional argument"
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is mandatory argument."
  echo "  --responsetime is for giving perticular responsetime for different response time mode, which is optional argument."
  echo "  --responsetime2 is required in case --resptimeqmode 3. In this case the range is between --responsetime and --responsetime2."
  echo "  --phaseidx is the phase index-slectection which is optional argument"

  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Missing mandatory option --testrun."
  fi
}

ARGS=$*
if [ "X$1" == "X" ];then
  usage
fi

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    usage "Option $1 requires a value."
  fi
}

while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--urlidx")
        shift
        chk_args_of_option "--urlidx" "$1"
        URLIDX=$1;;
    "--pageidx")
        shift
        chk_args_of_option "--urlidx" "$1"
        PAGEIDX=$1;;
    "--urltype")
        shift
        chk_args_of_option "--urltype" "$1"
        URLTYPE=$1;;
    "--location")
        shift
        chk_args_of_option "--location" "$1"
        LOCATION=$1;;
    "--access")

        shift
        chk_args_of_option "--access" "$1"
        ACCESS=$1;;
    "--browser")
        shift
        chk_args_of_option "--browser" "$1"
        BROWSER=$1;;
    "--status")
        shift
        chk_args_of_option "--status" "$1"
        STATUS=$1;;
    "--script")
        shift
        chk_args_of_option "--script" "$1"
        SCRIPT=$1;;
    "--trans")
        shift
        chk_args_of_option "--trans" "$1"
        TRANS=$1;;
    "--page")
        shift
        chk_args_of_option "--page" "$1"
        PAGE=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--abs_starttime")
        shift
        chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--abs_endtime")
        shift
        chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    "--responsetime")
        shift
        chk_args_of_option "--responsetime" "$1"
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
        chk_args_of_option "--resptimeqmode" "$1"
        RESPTIMEQMODE=$1;;
    "--responsetime2")
        shift
        chk_args_of_option "--responsetime2" "$1"
        RESPONSETIME2=$1;;
    "--phaseidx")
        shift
        chk_args_of_option "--phaseidx" "$1"
        PHASEIDX=$1;;
    "--object")
        shift
        chk_args_of_option "--object" "$1"
        OBJECT=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--generatorid")
        shift
        chk_args_of_option "--generatorid" "$1"
        GENERATORID=$1;;
  
    --*) usage "Invalid option $1";;
    *) usage ;;
  esac
  shift
done

query_selector $TRNUM nsi_db_get_url_comp_data_old_tr "$ARGS"

handle_time_filters $TRNUM


if [ "X$STATUS" = "X-2" ];then
  STATUS=""
fi
#URL
SELECT="SELECT $NEWLINE  UrlName as \"URL\""


# Sample two records - One for succes and other of Timeout for response for same URLIndex 1908
#status|connectstarttime|connectdonetime|sslhandshakedone|writecompletime|firstbytercdtime|requestcompletedtime|URLIndex|DownLoadTime
#0|189275|189282|189282|189282|189878|189902|1908|627
#9|4689275|0|0|0|0|4749275|1908|60000


#Notes:

# 1. In case of connection is resued, netstorm sets ConnectStartTime, ConnectDoneTime, SSLHandShakeDone with same as StartTime
#    See ns_sock_com.c line 2800 in 3.8.5 release (line may change in future)
#
# 2. Where time is reported in case of failure/T.O.
# Failure     StartTime ConnectStartTime ConnectDoneTime SSLHandShakeDone WriteCompleTime FirstByteRcdTime RequestCompletedTime    Where time will be reported?
# ConFail        Y           Y                  0                 0              0               0                 Y                    Connect
# SSLFail        Y           Y                  Y                 0              0               0                 Y                    SSL Handshake
# SendFail       Y           Y                  Y                 Y              0               0                 Y                    Request Send Time
# TO(1stByte)    Y           Y                  Y                 Y              Y               0                 Y                    First Byte Received Time
# TO(Content)    Y           Y                  Y                 Y              Y               Y                 Y                    Content Download Time
# GotResponse    Y           Y                  Y                 Y              Y               Y                 Y                    NA

#DNS Lookup
#SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN URLRecord_$TRNUM.ConnectStartTime > 0 THEN (URLRecord_$TRNUM.ConnectStartTime - UrlRecord_$TRNUM.StartTime) ELSE (URLRecord_$TRNUM.RequestCompletedTime - URLRecord_$TRNUM.StartTime)  END)) AS \"DNS Lookup\""

SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN URLRecord_$TRNUM.DNSDuration > 0 THEN URLRecord_$TRNUM.DNSDuration ELSE 0 END)) AS \"DNS Lookup\""

#Connection Time
# This will be 0 if connection fails
SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN URLRecord_$TRNUM.ConnectDuration > 0 THEN URLRecord_$TRNUM.ConnectDuration ELSE 0 END)) AS \"Connection Time\"" 

#SSL Handshake
# This will be 0 if connection fails or SSL Handshake fails
# In case of Non-SSL, NetStorm set SSLHandShakeDone same as ConnectDoneTime
SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN URLRecord_$TRNUM.SSLHandShakeDuration > 0 THEN URLRecord_$TRNUM.SSLHandShakeDuration ELSE 0 END)) AS \"SSL Handshake\"" 

#Request Send Time
#Issue -> In case of SSL handshake is not done, then SSLHandShakeDone is 0 or same as ConnectDoneTime
SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN URLRecord_$TRNUM.WriteCompleteDuration > 0 THEN URLRecord_$TRNUM.WriteCompleteDuration ELSE 0 END)) AS \"Request Send Time\""

#First Byte Received Time
SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN URLRecord_$TRNUM.FirstByteRcdDuration > 0 THEN URLRecord_$TRNUM.FirstByteRcdDuration ELSE 0 END)) AS \"First Byte Received Time\""

#Content Download Time

SELECT="$SELECT, $NEWLINE  round(avg(CASE WHEN (URLRecord_$TRNUM.FirstByteRcdDuration > 0) THEN (URLRecord_$TRNUM.RequestCompleteDuration) ELSE 0 END )) AS \"Content Download Time\""

#UrlIndex
SELECT="$SELECT, $NEWLINE  URLRecord_$TRNUM.URLIndex as \"URL Index\""

#Average Download Time 
SELECT="$SELECT, $NEWLINE  round(avg((CASE WHEN URLRecord_$TRNUM.DNSDuration > 0 THEN URLRecord_$TRNUM.DNSDuration ELSE 0 END) + (CASE WHEN URLRecord_$TRNUM.ConnectDuration > 0 THEN URLRecord_$TRNUM.ConnectDuration ELSE 0 END) + (CASE WHEN URLRecord_$TRNUM.SSLHandshakeDuration > 0 THEN URLRecord_$TRNUM.SSLHandshakeDuration ELSE 0 END) + (CASE WHEN URLRecord_$TRNUM.WriteCompleteDuration > 0 THEN URLRecord_$TRNUM.WriteCompleteDuration ELSE 0 END) + (CASE WHEN URLRecord_$TRNUM.FirstByteRcdDuration > 0 THEN URLRecord_$TRNUM.FirstByteRcdDuration ELSE 0 END) + (CASE WHEN URLRecord_$TRNUM.RequestCompleteDuration > 0 THEN URLRecord_$TRNUM.RequestCompleteDuration ELSE 0 END))) AS \"Download Time\""

# Total URL Hits (This is not used by GUI. This is for debugging purposes only. We may remove this in future)
SELECT="$SELECT, $NEWLINE  Count (*) AS \"URL Hits\""

FROM="FROM $NEWLINE  UrlRecord_$TRNUM"
FROM="$FROM, $NEWLINE  UrlTable_$TRNUM"

WHERE="WHERE $NEWLINE  URLTable_$TRNUM.URLIndex = URLRecord_$TRNUM.URLIndex"

GROUP="GROUP BY $NEWLINE  URLName"
GROUP="$GROUP, $NEWLINE  URLRecord_$TRNUM.URLIndex"

ORDER="ORDER BY $NEWLINE  URLName"


#set OBJRBL according to OBJECT
if [ $OBJECT -eq 0 ];then
  OBJTBL="URLRecord_$TRNUM" 
elif [ $OBJECT -eq 1 ];then
  OBJTBL="PageRecord_$TRNUM"
elif [ $OBJECT -eq 2 ];then
  if [ -s $NS_WDIR/logs/TR$TRNUM/reports/csv/tprc.csv ];then
    OBJTBL="TransPageRecord_$TRNUM"
  else
    OBJTBL="TransactionRecord_$TRNUM"
  fi
elif [ $OBJECT -eq 3 ];then
  OBJTBL="SessionRecord_$TRNUM"
fi


#UrlIndex
if [ "X$URLIDX" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND UrlRecord_$TRNUM.UrlIndex in ($URLIDX)"
fi


#UrlType
if [ "X$URLTYPE" != "X" ];then
  if  [ $URLTYPE -eq 1 ];then
    WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.UrlType = 1"
  elif  [ $URLTYPE -eq 2 ];then
    WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.UrlType = 2"
  elif  [ $URLTYPE -eq 3 ];then
    WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.UrlType = 3"
  else
    usage "Option --urltype must have value 1, 2 or 3"
  fi
fi

#Joining with Session Record Table
if [ $LOCATION != "All" -o  $ACCESS != "All" -o $BROWSER != "All" -o "X$SCRIPT" != "X" -o $OBJECT -eq 3 ];then
  FROM="$FROM, $NEWLINE  SessionRecord_$TRNUM"
  SESSIONRECORD_TABLE_FLAG=1
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.SessionInstance = SessionRecord_$TRNUM.SessionInstance"
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.ChildIndex = SessionRecord_$TRNUM.ChildIndex"

  if [ $LOCATION != "All" ];then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.Location = ""'"$LOCATION"'"
  fi
  
  if [ $ACCESS != "All" ];then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.Access = ""'"$ACCESS"'"
  fi
  
  if [ $BROWSER != "All" ];then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.Browser = ""'"$BROWSER"'"
  fi
fi

#In case of SCRIPT, need to join with SessionTable as well as SessionRecord
if [ "X$SCRIPT" != "X" ];then
  FROM="$FROM, $NEWLINE  SessionTable_$TRNUM"

  WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.SessionIndex = SessionTable_$TRNUM.SessionIndex"
  WHERE="$WHERE $NEWLINE  AND SessionTable_$TRNUM.SessionName = ""'"$SCRIPT"'"
fi


if [ "X$PAGE" != "X" -o "X$PAGEIDX" != "X" -o  $OBJECT -eq 1 ];then
  FROM="$FROM, $NEWLINE  PageRecord_$TRNUM"
  PAGERECORD_TABLE_FLAG=1
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.SessionInstance = PageRecord_$TRNUM.SessionInstance"
  WHERE="$WHERE $NEWLINE  AND UrlRecord_$TRNUM.PageInstance = PageRecord_$TRNUM.PageInstance"
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.ChildIndex = PageRecord_$TRNUM.ChildIndex"
fi

#In case of PAGE, need to join with PageTable and PageRecord
if [ "X$PAGE" != "X"  ];then
  FROM="$FROM, $NEWLINE  PageTable_$TRNUM"

  WHERE="$WHERE $NEWLINE  AND PageRecord_$TRNUM.PageIndex = PageTable_$TRNUM.PageIndex"
  WHERE="$WHERE $NEWLINE  AND PageTable_$TRNUM.PageName = ""'"$PAGE"'"
fi

#In case of PAGEIDX, no need to join with PageTable
if [ "X$PAGEIDX" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.PageIndex = $PAGEIDX"
fi

#In case of TRANS, need to join with TransactionTable and TransactionRecord (or TransPageRecord depending on tprc.csv)
if [ "X$TRANS" != "X" -o $OBJECT -eq 2 ];then
  FROM="$FROM, $NEWLINE  TransactionTable_$TRNUM"

  if [ "X$TRANS" != "X" -o "X$RESPTIMEQMODE" != "X" -o \( "X$STATUS" != "X" -a "X$STATUS" != "X-2" \) ];then
    # In case tprc is present the joining is done with TransPageRecord table 
    # where session instance, pageinstance and childindex are matching.
    # If tprc is not there then joined with url and only transaction index is matched with url record.
    if [ -s $NS_WDIR/logs/TR$TRNUM/reports/csv/tprc.csv ];then
      WHERE="$WHERE $NEWLINE  AND UrlRecord_$TRNUM.PageInstance = $OBJTBL.PageInstance"
      #FROM="$FROM, $NEWLINE  TransactionRecord_$TRNUM"
    fi
    # if OBJECT is 0 then URLRecord table is in FROM caluse by default so ignoring it here
    if [ $OBJECT -gt 1 -o \( $OBJECT -eq 1 -a "X$PAGE" == "X" -a "X$PAGEIDX" == "X" \) ];then
      if [ $OBJECT -lt 3 -o \(  $OBJECT -eq 3 -a $LOCATION == "All" -a  $ACCESS == "All" -a $BROWSER == "All" -a "X$SCRIPT" == "X" \) ];then
        FROM="$FROM, $NEWLINE  $OBJTBL"
        
        if [ $OBJECT -eq 1 ];then
          PAGERECORD_TABLE_FLAG=1
        elif [ $OBJECT -eq 2 ];then
          if [ -s $NS_WDIR/logs/TR$TRNUM/reports/csv/tprc.csv ];then
            TRANSPAGERECORD_TABLE_FLAG=1
          else
            TRANSACTIONRECORD_TABLE_FLAG=1
          fi
        elif [ $OBJECT -eq 3 ];then
          SESSIONRECORD_TABLE_FLAG=1
        fi
      fi
    fi 
     WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.SessionInstance = $OBJTBL.SessionInstance"
    WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.ChildIndex = $OBJTBL.ChildIndex"
  fi 

  if [ "X$TRANS" != "X" ]; then
    WHERE="$WHERE $NEWLINE  AND TransactionTable_$TRNUM.TransactionIndex = $OBJTBL.TransactionIndex"
    WHERE="$WHERE $NEWLINE  AND TransactionTable_$TRNUM.TransactionName = ""'"$TRANS"'"
  fi
fi

#In case of phase, starttime, endtime and resptime based filters, no extra join is needed
if [ "X$PHASEIDX" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.PhaseIndex = $PHASEIDX"
fi

if [ "X$STARTTIME" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.EndTime >= $STARTTIME"
  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND PageRecord_$TRNUM.EndTime >= $STARTTIME"
  fi
  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransPageRecord_$TRNUM.EndTime >= $STARTTIME"
  fi
  if [ "X$TRANSACTIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransactionRecord_$TRNUM.EndTime >= $STARTTIME"
  fi
  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.EndTime >= $STARTTIME"
  fi
fi

if [ "X$ENDTIME" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.StartTime <= $ENDTIME"
  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND PageRecord_$TRNUM.StartTime <= $ENDTIME"
  fi
  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransPageRecord_$TRNUM.StartTime <= $ENDTIME"
  fi
  if [ "X$TRANSACTIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransactionRecord_$TRNUM.StartTime <= $ENDTIME"
  fi
  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.StartTime <= $ENDTIME"
  fi
fi

if [ "X$ABS_STARTTIME" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND PageRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi
  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransPageRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi
  if [ "X$TRANSACTIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransactionRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi
  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi
fi

if [ "X$ABS_ENDTIME" != "X" ];then
  WHERE="$WHERE $NEWLINE  AND URLRecord_$TRNUM.StartTime <= $ABS_ENDTIME"
  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND PageRecord_$TRNUM.StartTime <= $ABS_ENDTIME"
  fi
  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransPageRecord_$TRNUM.StartTime <= $ABS_ENDTIME"
  fi
  if [ "X$TRANSACTIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND TransactionRecord_$TRNUM.StartTime <= $ABS_ENDTIME"
  fi
  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    WHERE="$WHERE $NEWLINE  AND SessionRecord_$TRNUM.StartTime <= $ABS_ENDTIME"
  fi
fi


#Response time filter
if [ "X$RESPTIMEQMODE" != "X" ];then
  if [ $RESPTIMEQMODE -eq 1 ];then
    WHERE="$WHERE $NEWLINE  AND $OBJTBL.RespTime <= $RESPONSETIME"
  elif [ $RESPTIMEQMODE -eq 2 ];then
    WHERE="$WHERE $NEWLINE  AND $OBJTBL.RespTime >= $RESPONSETIME"
  elif [ $RESPTIMEQMODE -eq 3 ];then
    WHERE="$WHERE $NEWLINE  AND $OBJTBL.RespTime >= $RESPONSETIME"
    WHERE="$WHERE $NEWLINE  AND $OBJTBL.RespTime <= $RESPONSETIME2"
  fi
fi

if [ "X$STATUS" != "X" -a "X$STATUS" != "X-2" ];then
  NOF=`echo $STATUS |awk -F ',' '{print NF}'`
  if [ $NOF -gt 1 ];then
    WHERE="$WHERE $NEWLINE  AND $OBJTBL.Status in ($STATUS)"
  else
    if [ "X$STATUS" = "X-1" ];then
      WHERE="$WHERE $NEWLINE  AND $OBJTBL.Status > 0"
    elif [ "X$STATUS" != "X-2" ];then
      WHERE="$WHERE $NEWLINE  AND $OBJTBL.Status = $STATUS"
    fi
  fi
fi

# when --generatorid filter is given in the query
if [ "X$GENERATORID" != "X" ]; then
  FROM="$FROM, $NEWLINE  GeneratorTable_$TRNUM"
  WHERE="$WHERE $NEWLINE  AND $OBJTBL.GeneratorId = GeneratorTable_$TRNUM.GeneratorId"
  WHERE="$WHERE $NEWLINE  AND GeneratorTable_$TRNUM.GeneratorId = $GENERATORID"
fi

if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi

chk_args

set_query_files $TRNUM

ns_run_query

show_query_result

exit 0

