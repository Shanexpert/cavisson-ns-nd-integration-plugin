#!/bin/bash
#
# Name : ns_ssh_key_gen
# Author: Anup Singh

# Purpsose: To create ssh key pair.
#
#################################################################################################################################
DEBUG=1
ERROR="ERROR!!! "
PASSPHRASE='""'
WORKSPACE_PROFILE=""
SSH_KEY=".ssh_key"
PUB_SSH_KEY="$SSH_KEY.pub"
DEBUG=1
ERROR_MSG=""
VALIDATE_PASSPHRASE=0

usage()
{
  echo "Usage:"
  echo "nsu_ssh_key_gen   -w <workspace_name>/<profile_name> -p <paasphrase> -k <key>"
  echo  "where :"
  echo  "  -w : specified <workspace_name>/<profile_name>, where ssh key pair will be generated"
  echo  "  -p : passphrase"
  echo  "  -k : key, it is an optional field"
  exit -1
}

print_all_args()
{
  while (( "$#" ))
  do 
    echo -e $1 
    shift
  done
}

debug_logs()
{
  
  if [ "X$DLOG_FILE" != "X" ];then
    if [ "$DEBUG" == "1" ];then
     echo -e "[`date +\"%D %H:%M:%S\"`] $@" >> $DLOG_FILE
    fi
  fi
}

error_exit()
{
  echo $*
  if [ "X$ELOG_FILE" != "X" ];then
    echo -e "[`date +\"%D %H:%M:%S\"`] Error: $@ \n-------\n`cat $CMD_OUT`\n-------\n" >> $ELOG_FILE
    #echo -e "Error: $@" 
    print_all_args "$@"
  fi
  exit 1
}


validate_and_set_vars()
{

  if [ ! -d $NS_WDIR ];then
    NS_WDIR=/home/cavisson/work
  fi
  
  NS_WP_DIR="$NS_WDIR/workspace/$WORKSPACE_PROFILE" 
  #check if profile exists
  if [ ! -d $NS_WP_DIR ];then
    error_exit "$ERROR Workprofile $WORKSPACE_PROFILE  doesn't exists. "
  fi
  
 
  #check if passphrase provides, decrypt it if provided
  # Decrypt Password and Phase phase, It is assumed UI write pass in encrypted form
  # Java class EncryptDecryptText will encrypt and decrypt pass
  D_QUOTES='""'
  if [ "XX$PASSPHRASE" != "XX" -a "XX$PASSPHRASE" != "XX$D_QUOTES" ];then
    PASSPHRASE=`java -cp $NS_WDIR/webapps/netstorm/lib/netstorm_bean.jar:/home/cavisson/monitors/lib/java-getopt-1.0.9.jar pac1.Bean.EncryptDecryptText -t "$PASSPHRASE" -e 0`
  fi
  if [ "XX$PASSPHRASE" == "XX" ];then
    error_exit "$ERROR Passphrase is not valid. "
  fi
  KEY_PATH="$NS_WP_DIR/$SSH_KEY"
 PUB_KEY_PATH="$NS_WP_DIR/$PUB_SSH_KEY"
 DLOG_FILE="$NS_WP_DIR/.logs/ssh.log"
 ELOG_FILE="$NS_WP_DIR/.logs/ssh.err"
 CMD_OUT="$NS_WP_DIR/.logs/cmd.out.$$"
}

runcmd()
{
  CMD_STATUS=0
  CMD=$1

  debug_logs "[RUN_CMD] Method called, CMD = ${CMD}, key_path = $KEY_PATH " \
             "PASSPHRASE = ${PASSPHRASE}, path = `pwd`" 

  YES="y"
  # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # On running  command Following possible cases can be -
  # 1. Asked for Paasphrase 
  # 2. Asked for overwrite 
  # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  /usr/bin/expect -c '
    spawn '"${CMD}"'
    sleep 3
    expect {
      "Overwrite (y/n)?" {send "'"${YES}"'\r"; exp_continue} 
      eof { }
      timeout {puts "\nTimeout" ; close ; exit 1}
   }
  
   foreach {pid spawnid os_error_flag value} [wait] break

   if {$os_error_flag == 0} {
     puts "exit status: $value"
     exit $value
   } else {
     puts "errno: $value"
     exit $value
  }
  ' >$CMD_OUT 2>&1

  if [ $? -ne 0 ]; then
    CMD_STATUS=1
    ERROR_MSG=`grep "failed: " $CMD_OUT | awk -F'failed: ' '{print $2}'`
  fi

  debug_logs "CMD_OUT => \n-------\n`cat $CMD_OUT`\n-------\n"
  debug_logs "[RUN_CMD] CMD_STATUS = $CMD_STATUS, CMD = [$CMD]"
}


generate_ssh_keys()
{

 #ssh-keygen -f $KEY_PATH -N $PASSPHRASE
 runcmd "ssh-keygen -f $KEY_PATH -N $PASSPHRASE"
 if [ $CMD_STATUS -eq 0 ];then
  echo "SSH Keys generated successfully at $NS_WP_DIR" 
  echo  "Public key =>"
  cat $PUB_KEY_PATH
  chmod 600 $PUB_KEY_PATH
 else
  echo "$ERROR SSH Key generation failed. $ERROR_MSG"
 fi
}

validate_passphrase()
{
  if [ $VALIDATE_PASSPHRASE -eq 0 ];then
    return
  fi
  ELOG_FILE=""
  #check if passphrase is set or not by using blank passphase
  OUTPUT=`ssh-keygen -y -f $KEY_PATH -P "" 2>&1|grep "incorrect passphrase supplied to decrypt private key"`
  if [ "XX$OUTPUT" == "XX" ];then
     error_exit "$ERROR Passphrase is not set"
  fi
  #check if passphrase is correct
  OUTPUT=`"ssh-keygen -y -f $KEY_PATH -P $PASSPHRASE" 2>&1|grep "incorrect passphrase supplied to decrypt private key"`
  if [ "XX$OUTPUT" != "XX" ];then
     error_exit "$ERROR Passphrase is incorrect"
  fi
  exit 0
}


#=====================================================================================================================
while getopts w:p:k:? c
do
  case $c in
    w)WORKSPACE_PROFILE=$OPTARG
      ;;
    p)PASSPHRASE=$OPTARG
      ;;
    k)SSH_KEY=$OPTARG
      VALIDATE_PASSPHRASE=1
      ;;
    ?)usage;;
    *)usage;;
  esac
done
validate_and_set_vars
validate_passphrase
generate_ssh_keys
#################################################################################################################################

