#!/bin/bash
#header for printing header in output
TMP_CONTROLLER_FILE=/tmp/contrller_file.txt.$$
DIRECTORY=`pwd`

if [ "XX" = "XX$NS_WDIR" ];then
  export NS_WDIR=/home/cavisson/work
fi

Usage()
{
  echo ""
  echo "Usage:"
  echo "nsu_show_tr_in_given_duration"
  echo "        Takes inputs as startdate-time and enddate-time and shows tests running in between the interval."
  echo "	-s <Startdatr-Starttime>"
  echo "	-e <Enddate-Endtime>"
  echo "  	   format : <\"MM/DD/YYYY-HH:MM:SS MM/DD/YYYY-HH:MM:SS\">"
  echo "           Use 'now' for current date and time."
  echo "	-c <Controller_name(s)>"
  echo "	   Note : Multiple controller_names shoupd be separated by space."
  echo ""
  exit 1
}

######################
# Validate date entered by user
#####################
validate_date()
{
  if [[ $DATE =~ ^[0-9]{2}/[0-9]{2}/[0-9]{4}$ ]] && date -d "$DATE" >/dev/null 2>&1 ;then
    echo -n ""
  else
    echo "ERROR : invalid date [$DATE]"
    Usage
    exit 1
  fi
}

######################
# Validate time entered by user
#####################
validate_time()
{
  if [[ $TIME =~ ^[0-9]{2}:[0-9]{2}:[0-9]{2}$ ]] && date -d "$TIME" >/dev/null 2>&1 ;then
    echo -n ""
  else
    echo "ERROR : invalid time [$TIME]"
    Usage
    exit 1
  fi
}

while getopts s:e:c:? arg
do
  case $arg in
    s)START_FORMAT=$OPTARG;;
    e)END_FORMAT=$OPTARG;;
    c)CONTROLLER_LIST=$OPTARG;;
    ?) Usage;;
    *) Usage;;
  esac
done

if [ "XX$START_FORMAT" = "XX" ];then
  echo "ERROR : Start date and time not provided."
  Usage
  exit 1
fi

if [ "XX$END_FORMAT" = "XX" ];then
  echo "ERROR : End date and time not provided."
  Usage
  exit 1
fi

if [ "XX$END_FORMAT" = "XXnow" ];then
  END_FORMAT=`date +"%m/%d/%Y-%H:%M:%S"`
fi

DATE="`echo $START_FORMAT | cut -d '-' -f 1`"
validate_date
TIME="`echo $START_FORMAT | cut -d '-' -f 2`"
validate_time

DATE="`echo $END_FORMAT | cut -d '-' -f 1`"
validate_date
TIME="`echo $END_FORMAT | cut -d '-' -f 2`"
validate_time

if [ "XX$CONTROLLER_LIST" = "XX" ];then
  $NS_WDIR/bin/nsi_get_controller_name > $TMP_CONTROLLER_FILE
else
  for word in $CONTROLLER_LIST
  do
    echo $word >> $TMP_CONTROLLER_FILE
  done
fi

if [ $? -ne 0 ];then
  echo "Error in running command nsi_get_controller_name"
  exit 1
fi

i=1
while read line
do
  CONTROLLER_NAME=`echo $line`
  export NS_WDIR=/home/cavisson/$CONTROLLER_NAME 
  TEMP_FILE_NAME="/tmp/controller_data_file.$i"
  nohup nsu_show_test_logs -x "$START_FORMAT $END_FORMAT" -rlC > $TEMP_FILE_NAME 2>/dev/null &
  i=$((i+1))
done < $TMP_CONTROLLER_FILE

a=0
while [ $a -eq 0 ]
do
  `ps -elf| grep -v auto |grep "nsu_show_test_logs -x"` >/dev/null 2>&1
  if [ $? -eq 0 ];then
    a=0
  else
    a=1
    sleep 1
  fi
done

######## print header ##########
echo "ControllerName|Project|Subproject|Test Run|Test Name|Scenario Name|Start Time|Run Time|Virtual Users|Report Summary|Report Progress|Report Detail|Report User|Report Fail|Report Page Break Down|WAN_ENV|REPORTING|Test Mode|Page Dump|Notes|Started By|Tomcat Port|Product Name"

cat /tmp/controller_data_file.*
rm -f $TMP_CONTROLLER_FILE 2>/dev/null
rm -f /tmp/controller_data_file.* 2>/dev/null
exit 0
