#!/bin/sh
#
# Name : nsu_get_host
# Author: Abhishek

# Purpsose: To get host name or Ip Address of server host. There is three way to get this either input script name or input URL or both scripts and URLs. All server host or IPs output will be Unique.
#
# nsu_get_host  [-c Scenario  [-c Scenario  ] ]   [ -c Script [ -s Script ] ]  [ -U URL [ -U URL ] ]  [ -p ] [ -t] keyword [-u] acl_user_name [-w] work_profile_name 
#
# Example: 
# 1. Get host name or IP address of server host when only script name is input
# nsu_get_host -s default/default/script_name  -s [more than one script name can be input...] -u anup -w dev
#
# 2. Get host name or IP address of server host when only URL is input
# nsu_get_host -U http://www.google.com [more than one URL can be input...]
#
# 3. Get host name or IP address of server host when bot script name and  URL are input
# nsu_get_host -s default/default/script_name -U http://www.google.com static40K http://127.0.0.12:80/index.jsp [any number of script name or URL can be input....]
# 
#4.Get host name or IP address of server host when scenario is given
# nsu_get_host -c default/default/Regression10.conf [ -c <project/sub-project/scenario>]

#default:
#	 acl_user would be "admin"
#	 work profile would be "default"
# Exit Values:
#    0 - Success
#    1 - Validation errors
#
# Modification History:
#   25/11/06: Abhishek - Initial Version
#   18/12/06: Atul -  Change TempFile Name
#   24/11/10: Abhishek Sharan - Added option for scenario ,script and URL
#   30/05/11: Manish Kr. Mishra - Add compatability with new script redesign i.e. make it for new c based script
#   03/03/21:Anup Singh - Support new dir struct $NS_WDIR/workspace/<user_name>/<profile_name>/cavisson/<proj>/<sub_proj>/scripts

PER=0
SCENARIO=""
HOST_TEMP=""  
URL_TEMP=""  
SCRIPT_DIR=""
SCENARIO_BASE=""
SCRIPT_LIST=""
URL_LIST=""
URL=""
script_name="" 
SCRIPT=""
TYPE=""
TEMPFILE=""
DETAIL=""
CAPTURE=""
SCRIPT_NAME_FLAG=""
i=0 
j=0
k=0
index=0

DEBUG=0

ACL_USER_NAME=admin
PROFILE_NAME=default
SCRIPT_RPATH=
NS_TA_DIR=

#set scripts path relative to NS_WDIR
set_script_relative_path()
{
  proj_subproj=`dirname $1`
  script_dir_name=`basename $1` 
  SCRIPT_RPATH=$NS_TA_DIR/$proj_subproj/scripts/$script_dir_name
  debug_log "script_path: $SCRIPT_RPATH"
}
debug_log() 
{
   if [ $DEBUG == 1 ];then
      echo $*
   fi
}

SCRIPT_TYPE="" # this will be L(Lagecy script)|C(C script)|J(Java script)
FLOW_FILE_LIST=""

if [ "XX$NS_WDIR" == "XX" ];then
  NS_WDIR=/home/cavisson/work
fi

get_script_type()
{
 #call GetScriptType operation of nsu_script_tool
 #nsu_script_tool -o GetScriptType -s $1

 debug_log "get_script_type: $1"
 #set SCRIPT_RPATH relative to $NS_WDIR
 set_script_relative_path $1
 #Check whether script exists or not
 if [ ! -d $NS_WDIR/$SCRIPT_RPATH ]; then
   echo "Script '$NS_WDIR/$SCRIPT_RPATH' does not exists."
   exit -1  
 fi
 SCRIPT_PATH_FOR_TOOL=`echo $SCRIPT_RPATH |cut -d '/' '-f9-12'`
 SCRIPT_TYPE=`$NS_WDIR/bin/nsu_script_tool -o GetScriptType -s $proj_subproj/scripts/$script_dir_name -w $ACL_USER_NAME/$PROFILE_NAME`
 debug_log "scripy_type: $SCRIPT_TYPE"
}

url_get_host()
{
  TEMPFILE=/tmp/URLhost.$$ 
  tmpUrl=`echo $1 | cut -d"/" -f1`
  if [ "$tmpUrl" == "http:" -o "$tmpUrl" == "https:" ];then
    tmpHost=`echo $1  | cut -d"/" -f3 | egrep -v "^{|:{" |awk -F'{' '{print $1}'`
    echo $tmpHost >>$TEMPFILE
  else 
    echo "url must be started with either http: or https:"
    Usage 
    exit -1
  fi
}

find_host_legacy()
{
  #ignore single line comment in capture & detail file (block comments are not ignored)
  if [ "X$TYPE" == "Xmain" ]; then
    grep URL $CAPTURE | awk '{print $1}' | awk '!/^\/\// {print $1}' | awk -F"/" '{print $3}' | sort -u >>$TEMPFILE
    egrep "SMTP_SERVER|POP_SERVER|FTP_SERVER|DNS_SERVER_IP" $CAPTURE | awk '{print $1}' | awk '!/^\/\// {print $1}' | awk -F"=" '{print $2}' | awk -F',' '{print $1}' | sort -u >>$TEMPFILE
  elif [ "X$TYPE" == "Xembedded" ]; then
    grep Host: $DETAIL | awk '!/^\/\// {print $2}' | sort -u >>$TEMPFILE
  elif [ "X$TYPE" == "Xboth" -o "X$TYPE" == "X" ]; then
    grep Host: $DETAIL | awk '!/^\/\// {print $2}' | sort -u >>$TEMPFILE
    grep URL $CAPTURE | awk '{print $1}' | awk '!/^\/\// {print $1}' | awk -F"/" '{print $3}' | sort -u >>$TEMPFILE
    egrep "SMTP_SERVER|POP_SERVER|FTP_SERVER|DNS_SERVER_IP" $CAPTURE | awk '{print $1}' | awk '!/^\/\// {print $1}' | awk -F"=" '{print $2}' | awk -F',' '{print $1}' | sort -u >>$TEMPFILE
  else
    echo "$0: Wrong Keyword"
    Usage
   fi
}

# Find host name in C-type script
# Examples: 
# 1) ns_web_url ("Home",
#       "URL=http://www.macys.com/",
#       INLINE_URLS,
#           "URL=http://www.macys.com/", "HEADER=Accept-Language:en-us,en;q=0.5", "COOKIE=stop_mobi;shippingCountry;SignedIn;PPP;BypassAkamai;GCs;PlatformName;BrowserName;BrowserVersion;akaau;", END_INLINE,
# 2) ns_web_url("Page1",
#       "URL=http://www.yahoo.com"
# 3) ns_web_url("Page1","URL=http://www.yahoo.com/") 
# 4) Handle cases: 
#    a) URL= http://www.yahoo.com/ 
#    b) URL=http://127.0.0.1/tours/index.html 
#
# Cases not supported:
# a) URL =http://www.yahoo.com/ 
# b) "URL=http://www.macys.com/", "HEADER=Accept-Language:en-us,en;q=0.5", "COOKIE=stop_mobi;shippingCountry;SignedIn;PPP;BypassAkamai;GCs;PlatformName;BrowserName;BrowserVersion;akaau;", END_INLINE,"URL=http://www1.macys.com/", "HEADER=Accept-Language:en-us,en;q=0.5", "COOKIE=stop_mobi;shippingCountry;SignedIn;PPP;BypassAkamai;GCs;PlatformName;BrowserName;BrowserVersion;akaau;", END_INLINE,
#
find_host_C()
{
  if [ "X$TYPE" == "Xmain" ]; then
    grep -v "END_INLINE" /tmp/merg_flow_file.$$ | grep -i URL | awk -F "URL=|url=" '{print $2}' | grep -v "^{" | awk -F '/|"' '{print $3}' | sort -u | egrep -v "^{|:{" |awk -F'{' '{print $1}' >>$TEMPFILE
    rm /tmp/merg_flow_file.$$
  elif [ "X$TYPE" == "Xembedded" ]; then
    grep -w "END_INLINE" /tmp/merg_flow_file.$$ | awk -F "URL=|url=" '{print $2}' | grep -v "^{" | awk -F '/|"' '{print $3}' | sort -u | egrep -v "^{|:{" |awk -F'{' '{print $1}'>>$TEMPFILE
    rm /tmp/merg_flow_file.$$
  elif [ "X$TYPE" == "Xboth" -o "X$TYPE" == "X" ]; then
    grep -i URL /tmp/merg_flow_file.$$ | awk -F "URL=|url=" '{print $2}' | grep -v "^{"  | awk -F '/|"' '{print $3}' | sort -u | egrep -v "^{|:{" |awk -F'{' '{print $1}'>>$TEMPFILE
    rm /tmp/merg_flow_file.$$
  else
    echo "$0: Wrong Type"
    Usage
  fi
}

find_host()
{
  if [ "$SCRIPT_TYPE" == "Legacy" -o "$SCRIPT_TYPE" == "LEGACY" ];then
     find_host_legacy $1
  else 
     find_host_C $1
  fi
}

find_script_legacy()
{
  #set SCRIPT_RPATH relative to $NS_WDIR
  set_script_relative_path $1
  #ToDo with DJA
  if [ -f $NS_WDIR/scripts/$1/$1.detail ];then
    DETAIL="$NS_WDIR/scripts/$1/$1.detail"
  elif [ -f $NS_WDIR/scripts/$1/script.detail ];then
    DETAIL="$NS_WDIR/scripts/$1/script.detail"
  else
    echo "script $1 does not seem to have proper detail file"
    exit 1
  fi

  if [ -f $NS_WDIR/scripts/$1/$1.capture ];then
    CAPTURE="$NS_WDIR/scripts/$1/$1.capture"
  elif [ -f $NS_WDIR/scripts/$1/script.capture ];then
    CAPTURE="$NS_WDIR/scripts/$1/script.capture"
  else
    echo "script $1 does not seem to have proper capture file"
    exit 1
  fi

}

find_script_java()
{
   TMP_FILE=/tmp/tmp_file.$$
   #set SCRIPT_RPATH relative to $NS_WDIR
   set_script_relative_path $1
   SCRIPT_PATH="$NS_WDIR/$SCRIPT_RPATH"
    
   debug_log "script_Path: $SCRIPT_RPATH"
   $NS_WDIR/bin/nsu_script_tool -o UsedFlowList -s $proj_subproj/scripts/$script_dir_name -w $ACL_USER_NAME/$PROFILE_NAME > $TMP_FILE
   debug_log "Flowfile: $TMP_FILE"
   FLOW_FILE_LIST=`cat $TMP_FILE | tail -n +2 | awk -v path=$SCRIPT_PATH '{print path"/"$SCRIPT_RPATH".java"}'`
   debug_log "$FLOW_FILE_LIST"
   cat $FLOW_FILE_LIST >$TMP_FILE

   debug_log "flow_used: FLOW_FILE_LIST=$FLOW_FILE_LIST"

   #ignoring comment (i.e. line starting from either "//" or "/*......*/")
   #-w is for ignore warnings
   cpp -w -fpreprocessed -std=c99 $TMP_FILE > /tmp/merg_flow_file.$$

   # $? chk cpp may fail
   if [ $? == 0 ];then
     debug_log "cpp run successfully"
   else
     #return -1
     exit -1
   fi
   rm $TMP_FILE
}

find_script_C()
{
   TMP_FILE=/tmp/tmp_file.$$
   #set SCRIPT_RPATH relative to $NS_WDIR
   set_script_relative_path $1
   SCRIPT_PATH="$NS_WDIR/$SCRIPT_RPATH"
    
   debug_log "script_Path: $SCRIPT_RPATH"
   $NS_WDIR/bin/nsu_script_tool -o UsedFlowList -s $proj_subproj/scripts/$script_dir_name -w $ACL_USER_NAME/$PROFILE_NAME > $TMP_FILE
   debug_log "Flowfile: $TMP_FILE"
   FLOW_FILE_LIST=`cat $TMP_FILE | tail -n +2 | awk -v path=$SCRIPT_PATH '{print path"/"$SCRIPT_RPATH".c"}'`
   debug_log "$FLOW_FILE_LIST"
   cat $FLOW_FILE_LIST >$TMP_FILE

   debug_log "flow_used: FLOW_FILE_LIST=$FLOW_FILE_LIST"

   #ignoring comment (i.e. line starting from either "//" or "/*......*/")
   #-w is for ignore warnings
   #cpp -fpreprocessed $TMP_FILE > $NS_WDIR/scripts/$1/merg_flow_file
#   cpp -fpreprocessed $TMP_FILE > $NS_WDIR/scripts/$1/merg_flow_file
   cpp -w -fpreprocessed -std=c99 $TMP_FILE > /tmp/merg_flow_file.$$
   #rm $TMP_FILE

   # $? chk cpp may fail
   if [ $? == 0 ];then
     debug_log "cpp run successfully"
   else
     #return -1
     exit -1
   fi
   rm $TMP_FILE
}

find_script()
{
  TEMPFILE=/tmp/scripthost.$$
  if [ "XX$NS_WDIR" == "XX" ];then
    NS_WDIR=/home/cavisson/work
  fi
 
  if [ "$SCRIPT_TYPE" == "Legacy" -o "$SCRIPT_TYPE" == "LEGACY" ];then
    find_script_legacy $1
  elif [ "$SCRIPT_TYPE" == "C" ];then
    find_script_C $1
  elif [ "$SCRIPT_TYPE" == "JAVA" ];then
    find_script_java $1
  fi
}

parse_array()
{
 list=( $* )
 #echo ${#list[@]}
 index=0
 SCRIPT_LIST=""
 URL_LIST=""
 while [ $index -le ${#list[@]} ]
 do
   if [ "X${list[$index]}" == "X0" ]; then
     index=`expr $index + 1`
     SCRIPT_LIST="$SCRIPT_LIST ${list[$index]}"
   elif [ "X${list[$index]}" == "X1" ]; then
     index=`expr $index + 1`
     URL_LIST="$URL_LIST ${list[$index]}"
   else
     index=`expr $index + 1`
   fi  
 done
}

find_script_in_scenario()
{
  SCRIPT_DIR=`dirname $1`
  SCENARIO_LIST=$1
  for scenario in $SCENARIO_LIST	
  do
    SCENARIO_BASE=$NS_WDIR/$NS_TA_DIR/$SCRIPT_DIR/scenarios/$scenario
    if [ ! -f $SCENARIO_BASE ];then
      echo "scenario $SCENARIO_BASE not exist."
      exit -1
    fi

    # To support both new/old SGRP format:
    # New Format: 
    # SGRP <GroupName> <GeneratorName> <ScenType> <user-profile> <type(0 for Script or 1 for URL)> <session-name/URL> 
    # <num-or-pct> <cluster_id> 
    # Old Format:
    # SGRP <GroupName> <ScenType> <user-profile> <type(0 for Script or 1 for URL)> <session-name/URL> <num-or-pct> 
    #  <cluster_id> 
    # Changes done: Verify SGRP group on the bases of scenario-type if its value is NA, FIX_CONCURRENT_USERS 
    # or FIX_SESSION_RATE then its new SGRP format else old format 
    # Note: Here we assume that all SGRP groups are either in new or old SGRP format
    SCEN_TYPE=`grep '^SGRP' $SCENARIO_BASE |  awk '{print $4}' | tail -1`
    debug_log "Scenario type:$SCEN_TYPE"
    if [ "$SCEN_TYPE" == "NA" -o "$SCEN_TYPE" == "FIX_CONCURRENT_USERS" -o "$SCEN_TYPE" == "FIX_SESSION_RATE" ];then
      SCRIPT_NAME_FLAG=( `grep '^SGRP' $SCENARIO_BASE |awk '{print $6" "$7}'` )
    else  
      SCRIPT_NAME_FLAG=( `grep '^SGRP' $SCENARIO_BASE |awk '{print $5" "$6}'` )
    fi
    #echo ${SCRIPT_NAME_FLAG[@]}	
    parse_array "${SCRIPT_NAME_FLAG[@]}"

    for script in $SCRIPT_LIST
    do
      NUM=`echo $script |awk -F'/' '{print NF}'`
      if [ $NUM -eq 3 ];then
        SCRIPT_WITH_PROJ_SUB_PROJ=$script
      else 
        SCRIPT_WITH_PROJ_SUB_PROJ=$SCRIPT_DIR/$script
      fi

      get_script_type $SCRIPT_WITH_PROJ_SUB_PROJ
      find_script $SCRIPT_WITH_PROJ_SUB_PROJ
      find_host $SCRIPT_WITH_PROJ_SUB_PROJ

      #saving the temporary host file name
      if [ "X$PER" == "X0" ]; then
        HOST_TEMP=$TEMPFILE 
      fi
      if [ "X$PER" == "X1" ]; then
        script=$SCRIPT_WITH_PROJ_SUB_PROJ
        echo $script
        display
        rm -f $TEMPFILE
      fi
    done
    for url in $URL_LIST
    do
      url_get_host $url
      if [ "X$PER" == "X0" ]; then
        URL_TEMP=$TEMPFILE 
      fi
      if [ "X$PER" == "X1" ]; then
        echo $url
        display 
        rm -f $TEMPFILE
      fi
    done
  done
} 

display()
{ 
  if [ -s  $TEMPFILE ]; then  
    if [ "X$HOST_TEMP" != "X" -o "X$URL_HOST" != "X" ]; then
      if [ "X$PER" == "X0" ]; then
        #echo "TEMPFILE=$TEMPFILE HOST_TEMP=$HOST_TEMP URL_TEMP=$URL_TEMP"
        dos2unix $TEMPFILE $HOST_TEMP $URL_TEMP >/dev/null 2>&1
        sort -u $TEMPFILE $HOST_TEMP $URL_TEMP |grep -v ^$
        rm -f $HOST_TEMP
      fi 
    else  
      dos2unix $TEMPFILE >/dev/null 2>&1
      sort -u $TEMPFILE | grep -v ^$
    fi
  fi
}

Usage()
{
  echo "Usage:"
  echo "nsu_get_host  [-c | -U | -s  ] <script name or URL> [<script name or URL>]  [ -p | -t ]"
  echo  "where :"
  echo	"  -c : To provide scenario"
  echo	"  -U : To provide URL"
  echo	"  -s : To provide script directory"
  echo	"  -p : per script hosts"
  echo	"  -t : type or URL i.e. main , embedded or both."
  echo	"  -u : ACL user name."
  echo	"  -w : Work Profile Name."
  exit -1
}

#=====================================================================================================================

while getopts c:U:s:t:w:u:p? c
do
  case $c in
    p)PER=1
      ;;
    c)SCENARIO[$i]=$OPTARG
      i=`expr $i + 1`
      ;;
    U)URL[$j]=$OPTARG 
      j=`expr $j + 1`
      ;;
    s)SCRIPT[$k]=$OPTARG
      k=`expr $k + 1`
      ;;
    t)TYPE=$OPTARG;;
    u)
      if [ "X$OPTARG" != "X" ];then
        ACL_USER_NAME=$OPTARG
      fi
      ;;
     w)
       if [ "X$OPTARG" != "X" ];then
         PROFILE_NAME=$OPTARG
        fi
       ;;
    ?)Usage;;
    *)Usage;;
  esac
done

#set NS_TA_DIR
NS_TA_DIR=workspace/$ACL_USER_NAME/$PROFILE_NAME/cavisson

if [ $# -eq 0 ];then
  Usage
  exit -1	
fi

if [ "XX$SCENARIO" == "XX" -a "XX$URL" == "XX" -a "XX$SCRIPT" == "XX" -a "XX$TYPE" == "XX" ];then
  echo "At least one option is neccessary from -s, -c, -t, -U"
  Usage
  exit -1
fi


if [  "X$TYPE" != "X" -a "X$URL" != "X" ];then
  echo "$0: Incorrect Usage"
  echo "Option -t and -U is not used together. "
  Usage 
  exit -1
fi


if [ "XX$TYPE" != "XX" ];then
  if [ "XX$TYPE" != "XXmain" ];then
    if [ "XX$TYPE" != "XXembedded" ];then
      if [ "XX$TYPE" != "XXboth" ];then
        echo "Type must be either main, embedded or both"
        Usage
        exit -1
      fi
    fi
  fi
fi

#=========================function calls===============================

#funcction call for url processing
if [ "X$URL" != "X" ]; then
  for url in ${URL[@]} 
  do
    url_get_host "$url"
  if [ "X$PER" == "X1" ]; then
    echo "$url"
    display
    rm -f $TEMPFILE
  fi
  done
  if [ "X$PER" == "X0" ]; then
    display
    rm -f $TEMPFILE
  fi
fi
#function call for script processing
if [ "X$SCRIPT" != "X" ]; then
  for script in ${SCRIPT[@]}
  do
    get_script_type $script
    find_script $script  
    find_host $script  
    if [ "X$PER" == "X1" ]; then
      echo $script
      display
      rm -f $TEMPFILE
    fi
  done
  if [ "X$PER" == "X0" ]; then
    display
    rm -f $TEMPFILE
  fi
fi
#function call for scenario processing
if [ "X$SCENARIO" != "X" ]; then
  for scenario in ${SCENARIO[@]}
  do
    find_script_in_scenario $scenario
  done
  if [ "X$PER" == "X0" ]; then
    display 
    rm -f $TEMPFILE
  fi
fi

exit 0

