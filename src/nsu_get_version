#!/bin/sh
# Name      : nsu_get_version
# Author    : Achint
# Purpsose  : To show the build number and version number of cavisson, gui and hpd  
#
# Usage     :  nsu_get_version
# Modification History:
#   04/21/07: Achint - Initial Version
#   22/02/2013: Ramsatee Modify to show netdiagnostics version details
#
# Pending Isues: Neeraj - It shows cavisson and GUI not available in 'NO' box
ALL_CTRL=0
All=1
NETSTORM=0
NETSTORM_FOR_CAVMON_COMPATIBILITY=0
GUI=0
HPD=0
CMON=0
LPS=0
NDC=0
NCH=0
NETDIAGNOSTICS=0
THIRDPARTY=0
WDIR_FLAG=0
TOMCAT=0
JAVA=0
NETHAVOC=0
APIGATEWAY=0
WDIR=""
Controller_name=""
HOME_DIR=/home/cavisson
NSAdminIP=`cat $HOME_DIR/etc/cav.conf | grep NSAdminIP | cut -d" " -f2 | cut -d/ -f1`
SRAdminIP=`cat $HOME_DIR/etc/cav.conf | grep SRAdminIP | cut -d" " -f2 | cut -d/ -f1`
CON_FILE=$HOME_DIR/etc/cav_controller.conf

while getopts ACanghcldtvDNHGw:sj name
   do
     case $name in
       A) ALL_CTRL=1;;
       a) All=1;;
       n) NETSTORM=1
          All=0;;
       v) NETSTORM_FOR_CAVMON_COMPATIBILITY=1;;
       g) GUI=1
          All=0;;
       h) HPD=1
          All=0;;
       c) CMON=1
          All=0;;
       l) LPS=1
          All=0;;
       D) NDC=1
          All=0;;
       H) NCH=1
          All=0;;
       d) NETDIAGNOSTICS=1
          All=0;;
       t) THIRDPARTY=1
          All=0;;
       s) TOMCAT=1
          All=0;;
       j) JAVA=1
          All=0;;
       C) CAVBIN=1
          All=0;;
       N) NETHAVOC=1
          All=0;;
       w) WDIR="$OPTARG"
          WDIR_FLAG=1 ;;
       G) APIGATEWAY=1
          All=0;;
	?) printf "Usage: %s: [-a] <-A for all controllers> <-n for cavisson> <-g for GUI> <-h for HPD> <-c for cmon> <-l lps> <-d for netdiagnostics> <-H for netchannel> <-D for ndc> <-j for java> <-s for tomcat> <-w for specific controller <-C for cavbin> <-N for NetHavoc> <-G for Api Gateway>\n" $0
          exit 2;;
     esac
   done

if [ $ALL_CTRL == 1 -a "XX$WDIR_FLAG" == "XX1" ];then
  echo "Error: Both -A and -w option cant be given at the same time"
  exit 1
fi

set_working_dir_for_different_product ()
{
  WRK_DIR=$1
  	
  echo $WRK_DIR | grep "/home/cavisson" >/dev/null
  if [ $? -ne 0 ];then
    export NS_WDIR="/home/cavisson/$WRK_DIR"
  else
    export NS_WDIR=$WRK_DIR
  fi
  Controller_name=`basename $NS_WDIR`

  echo $Controller_name | grep -w "work" >/dev/null
  if [ $? -eq 0 ];then
    work_no=`echo $Controller_name | grep -o '[0-9]'` >/dev/null
    export HPD_ROOT=$NS_WDIR/hpd
  else
    export HPD_ROOT=$HOME_DIR/$Controller_name/hpd
  fi

  export LPS_ROOT=$NS_WDIR/lps
  export LPS_CMD=lps

  export NDC_ROOT=$NS_WDIR/ndc
  export NDC_CMD=ndc

  export NCH_ROOT=$NS_WDIR/netchannel
  export NCH_CMD=nch

  export NH_ROOT=$NS_WDIR/netHavoc
  export API_GATEWAY_ROOT=$NS_WDIR/api_gateway

  if [ -d $NS_WDIR/apps/apache-tomcat-9.0.50 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-9.0.50
  elif [ -d $NS_WDIR/apps/apache-tomcat-9.0.43 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-9.0.43
  elif [ -d $NS_WDIR/apps/apache-tomcat-9.0.41 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-9.0.41
  elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.105 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-7.0.105
  elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.104 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-7.0.104
  elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.99 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-7.0.99
  elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.91 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-7.0.91
  elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.59 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-7.0.59
  elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.52 ];then
    export TOMCAT_DIR=$NS_WDIR/apps/apache-tomcat-7.0.52
  else
   export TOMCAT_DIR="/"
  fi
}


set_version_file_path ()
{
  HPD_BUILD_FILE=$HPD_ROOT/etc/version
  LPS_BUILD_FILE=$LPS_ROOT/etc/version
  NDC_BUILD_FILE=$NDC_ROOT/etc/version
  NH_BUILD_FILE=$NH_ROOT/etc/version
  AG_BUILD_FILE=$API_GATEWAY_ROOT/etc/version
  NCH_BUILD_FILE=$NCH_ROOT/etc/version

  #Currently only one CMON installed in each machine
  CMON_BUILD_FILE=$HOME_DIR/monitors/etc/version
  NETDIAGNOSTIC_BUILD_FILE=$HOME_DIR/netdiagnostics/etc/version
  THIRDPARTY_BUILD_FILE=$NS_WDIR/thirdparty/etc/version
  HPD_BUILD_FILE_NETSTORM=/tmp/version.$$

  NETSTROM_BUILD_FILE=$NS_WDIR/etc/version
  GUI_BUILD_FILE=$NS_WDIR/webapps/netstorm/etc/version
  CAVBIN_BUILD_FILE=/etc/.version
}

#Show version number and build number
show_version_build_no ()
{
  if [  $1 == NETSTORM ];then
    echo "NetStorm:Version $VERSION_NO (build# $BUILD_NO)"
  elif [  $1 == GUI ];then
    echo "GUI:Version $VERSION_NO (build# $BUILD_NO)"  
  elif [  $1 == HPD ];then
    echo "HPD:Version $VERSION_NO (build# $BUILD_NO)"
  elif [  $1 == CMON ];then
    echo "CMON:Version $VERSION_NO (build# $BUILD_NO)"
  elif [  $1 == LPS ];then
    echo "LPS:Version $VERSION_NO (build# $BUILD_NO)"
  elif [  $1 == NDC ];then
    echo "NDC:Version $VERSION_NO (build# $BUILD_NO)"
  elif [  $1 == NCH ];then
    echo "NetChannel:Version $VERSION_NO (build# $BUILD_NO)"
  elif [ $1 == NETDIAGNOSTICS ];then
    echo "NETDIAGNOSTICS:Version $VERSION_NO (build# $BUILD_NO)"
  elif [ $1 == THIRDPARTY ];then
    echo "THIRDPARTY:Version $VERSION_NO (build# $BUILD_NO)"
  elif [ $1 == NETVISION ];then
    echo "NETVISION:Version $VERSION_NO (build# $BUILD_NO)"
  elif [ $1 == NETHAVOC ];then
    echo "NETHAVOC:Version $VERSION_NO (build# $BUILD_NO)"
  elif [ $1 == CAVBIN ];then
    echo "CAVBIN:Version $VERSION_NO (build# $BUILD_NO)"
  elif [ $1 == APIGATEWAY ];then
    echo "APIGATEWAY:Version $VERSION_NO (build# $BUILD_NO)"
  fi
}


#get the version no and build no 
get_version_build_no ()
{
  VERSION_NO=`cat $1 | grep "VERSION" | cut -d" " -f2`
  BUILD_NO=`cat $1 | grep "BUILD" | cut -d" " -f2`
  
  show_version_build_no $2  
}

#Manish: Adding this to know version number of Netstorm with build
#Netstorm will send version num in format 3.9.1.10 (i.e. version.build) in all message to server
get_ns_for_cavmon_compatibility()
{
  VERSION=`cat $NETSTROM_BUILD_FILE | grep "VERSION" | cut -d" " -f2 | awk -F'.' '{print $1"."$2"."$3}'`
  BUILD=`cat $NETSTROM_BUILD_FILE | grep "BUILD" | cut -d" " -f2`
  if [ "X$VERSION" != "X" -a "X$BUILD" != "X" ];then
    echo "$VERSION.$BUILD"
  elif [ "X$VERSION" = "X" -a "X$BUILD" != "X" ];then 
    echo "0.0.0.$BUILD"
  elif [ "X$BUILD" = "X" -a "X$VERSION" != "X" ];then 
    echo "$VERSION.0"
  else 
    echo "0.0.0.0"WDIR_FLAG
  fi
}

get_version ()
{
  set_working_dir_for_different_product $CNTRL_NAME
  set_version_file_path 

  CONFIG=`$NS_WDIR/bin/nsi_show_config`

  #Call the function for getting build number and version number of cavisson, gui and hpd

  if [ $All == 1 -o $NETSTORM == 1 ]; then
    if [ ! -f $NETSTROM_BUILD_FILE ];then
      echo "NetStorm:VersionNotAvailable"
    else
      get_version_build_no $NETSTROM_BUILD_FILE NETSTORM
    fi
  fi

  # Now GUI Version is also available on NO machine
  #if [ $CONFIG != 'NO' ];then
  if [ $All == 1 -o $GUI == 1 ]; then
    if [ ! -f $GUI_BUILD_FILE ];then
      echo "GUI:Version not available"
    else
      get_version_build_no $GUI_BUILD_FILE GUI
    fi
  fi
  #fi
  #Check Machine is cavisson or netocean or netvision
  if [ $All == 1 -o $HPD == 1 ]; then
    if [ $CONFIG == 'NS+NO' -o $CONFIG == 'NO' ];then
      if [ ! -f $HPD_BUILD_FILE ];then
        echo "HPD:Version not available"
      else
        get_version_build_no $HPD_BUILD_FILE HPD
      fi
    elif [ $CONFIG == 'NV' ]; then 
      if [ ! -f $HPD_BUILD_FILE ];then
        echo "NETVISION:Version not available"
      else
        get_version_build_no $HPD_BUILD_FILE NETVISION
      fi 
    elif [ $CONFIG == 'NS>NO' -o  $CONFIG == 'NC' ];then
      if [ "$SRAdminIP" != "$NSAdminIP" ];then
        scp -o  ConnectTimeout=10 cavisson@$SRAdminIP:$HPD_BUILD_FILE $HPD_BUILD_FILE_NETSTORM >/dev/null 2>&1
        if [ $? -ne 0 ];then
          echo "HPD Server ("$SRAdminIP") is not responding or file \"$HPD_BUILD_FILE\" is not present on HPD server" 
        fi
        if [ ! -f $HPD_BUILD_FILE_NETSTORM ];then
          echo "HPD:Version not available"
        else
          get_version_build_no $HPD_BUILD_FILE_NETSTORM HPD
          rm $HPD_BUILD_FILE_NETSTORM  
        fi
      else
        get_version_build_no $HPD_BUILD_FILE HPD
      fi       
    fi
  fi

  if [ $All == 1 -o $CMON == 1 ];then
    if [ ! -f $CMON_BUILD_FILE ];then
      echo "CMON:Version not available"
    else
      get_version_build_no $CMON_BUILD_FILE CMON
    fi
  fi

  if [ $All == 1 -o $LPS == 1 ];then
    if [ ! -f $LPS_BUILD_FILE ];then
      echo "LPS:Version not available"
    else
      get_version_build_no $LPS_BUILD_FILE LPS
    fi
  fi

  if [ $All == 1 -o $NDC == 1 ];then
    if [ ! -f $NDC_BUILD_FILE ];then
      echo "NDC:Version not available"
    else
      get_version_build_no $NDC_BUILD_FILE NDC
    fi
  fi

  if [ $All == 1 -o $NCH == 1 ];then
    if [ ! -f $NCH_BUILD_FILE ];then
      echo "NetChannel:Version not available"
    else
      get_version_build_no $NCH_BUILD_FILE NCH
    fi
  fi

  #Getting build number and version number of netdiagnostics
  if [ $All == 1 -o  $NETDIAGNOSTICS == 1 ]; then
    if [ ! -f $NETDIAGNOSTIC_BUILD_FILE ];then
      echo "NetDiagnostics:Version not available"
    else
      get_version_build_no $NETDIAGNOSTIC_BUILD_FILE NETDIAGNOSTICS
    fi
  fi
  #geting build and version number of thirdparty
  if [ $All == 1 -o $THIRDPARTY == 1 ];then
    if [ ! -f $THIRDPARTY_BUILD_FILE ];then
      echo "ThirdParty:Version not available"
    else
      get_version_build_no $THIRDPARTY_BUILD_FILE THIRDPARTY
    fi
  fi
   #getting java version
  if [ $All == 1 -o $JAVA == 1 ];then
    JAVA_VER=` $JAVA_HOME/bin/java -version 2>&1|grep version| cut -d ' ' -f3 | cut -d '"' -f2`
    echo "JAVA:Version $JAVA_VER"
  fi
  #getting tomcat version
  if [ $TOMCAT == 1 -o $All == 1 ]; then
    touch version.txt
    if [ -f "$TOMCAT_DIR/bin/version.sh" ]; then
       `$TOMCAT_DIR/bin/version.sh|grep version | cut -d '/' -f 2 > version.txt`
        TOMCAT_VER=`cat version.txt`
    fi
    if [ "X$TOMCAT_VER" != "X" ]; then
      echo "TOMCAT:Version $TOMCAT_VER" 
    else
      echo "TOMCAT:Version not available"
    fi
    TOMCAT_VER=""
  fi
  
  if [ "$All" == "0" -a "$CAVBIN" == "1" ];then
    if [ ! -f $CAVBIN_BUILD_FILE ];then
      echo "CAVBIN:Version not available"
    else
      get_version_build_no $CAVBIN_BUILD_FILE CAVBIN
    fi
  fi
  
  if [ $All == 1 -o $NETHAVOC == 1 ]; then
    if [ ! -f $NH_BUILD_FILE ];then
      echo "NetHavoc:VersionNotAvailable"
    else
      get_version_build_no $NH_BUILD_FILE NETHAVOC
    fi
  fi

  if [ $All == 1 -o $APIGATEWAY == 1 ]; then
	if [ ! -f $AG_BUILD_FILE ];then
  	echo "ApiGateway:VersionNotAvailable"
	else
  	get_version_build_no $AG_BUILD_FILE APIGATEWAY
	fi
  fi

}

if [ $NETSTORM_FOR_CAVMON_COMPATIBILITY = 1 ];then
  set_version_file_path
  get_ns_for_cavmon_compatibility
  exit 0
fi

if [ "XX$WDIR" != "XX" ];then
  cat $CON_FILE | grep -v "^NAME"|grep -v "^#" | awk -F '|' '{print $1}' | grep $WDIR 1>/dev/null 2>&1
  if [ $? -ne 0 ];then
     echo "$WDIR does not exists in $CON_FILE."
     exit 1
  fi
  CNTRL_NAME=$WDIR
  get_version
elif [ "XX$ALL_CTRL"  == "XX1" ];then
  while read line 
  do
    echo "$line" |egrep "^NAME|^$" >/dev/null
    if [ $? -eq 0 ];then
      continue
    fi
    CNTRL_NAME=`echo $line |awk -F'|' '{print $1}'` 
    tput bold
    echo $CNTRL_NAME
    echo "-----------------------------------------"
    tput sgr0  
    get_version 
  done <$CON_FILE
else
  CNTRL_NAME=$NS_WDIR
  get_version
fi

exit 0
