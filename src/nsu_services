#!/bin/bash

CONTROLLER_NAME=`echo $NS_WDIR|cut -d'/' -f 4`
CAV_CONTROLLER_FILE="/home/cavisson/etc/cav_$CONTROLLER_NAME.conf"
MACHINE_TYPE=""
SHOW_ALL_PROCESS=0
PROCESS=""
ACTION=""
OPTION_TYPE=""
ACTION_BUTTON=""
RECOMMENDED=""
SUM_CHILD_CPU_PERCENT=0
SUM_CHILD_CPU_TIME=0
SUM_CHILD_VIRTUAL_MEMORY=0
SUM_CHILD_RESIDENT_MEMORY=0

SERVICES_LIST=("cmon" "postgres" "tomcat" "nsu_system_health_check" "apiGateway")
SERVICES_LIST_COUNT=4

if [ "X$NS_WDIR" == "X" ];then
  echo "Error: NS_WDIR must be set"
  exit 1
fi

show_postgres_log()
{
  NO_OF_LINES=1000

  data_dir=`psql -t -A test postgres -c  "show log_directory"`

  logs_files=(`psql -t -A test postgres -c "select pg_ls_dir('"$data_dir"')"`);

  #ceate table
  psql -t -A test postgres -c  "create table dtime(file text,modification timestamp);" 2>&1 >/dev/null

  i=0

  #inserting file name along with modified time
  while [ $i -lt ${#logs_files[@]} ];do
    psql -t -A test postgres -c  "insert into dtime(file, modification) select '$data_dir/${logs_files[i]}', modification from pg_stat_file('$data_dir/${logs_files[i]}');" 2>&1 >/dev/null
    i=`expr $i + 1`
  done

  incr=0
  while true
  do

    FILE=`psql -t -A test postgres -c "select file from dtime order by modification desc limit 1 offset $incr;"`

    if [ "X$FILE" == "X" ];then
      incr=`expr $incr - 1`
      break
    fi 
     
    psql -t -A test postgres -c "select pg_read_file('$FILE')" >/tmp/file.$$.$incr
   
    LINES=`wc -l /tmp/file.$$.$incr|awk '{print $1}'`
   
    if [ $LINES -lt $NO_OF_LINES ];then
      NO_OF_LINES=`expr $NO_OF_LINES - $LINES`
      incr=`expr $incr + 1`
    else
      break;
    fi   
        
  done
  
  tail -$NO_OF_LINES /tmp/file.$$.$incr
      
  incr=`expr $incr - 1`

  
  while [ $incr -ge 0 ];do
    cat /tmp/file.$$.$incr
    incr=`expr $incr - 1`
  done

  psql -t -A test postgres -c  "drop table dtime;" 2>&1 >/dev/null
}
			      

usage()
{
  echo "Error"
  echo "Usage "
  echo " --show_all_process <0/1>"
  echo " 0 for showing only machine dependent daemon processes based on m/c configuration"
  echo " 1 for showing all processes running on the m/c"
  echo " example: nsu_services --show_all_process 1"
  echo " --service <process> --action <start/stop/restart/show/show_log_path/show_config/show_files>"
  echo " example: nsu_services --service tomcat --action start"
  echo " --command <command name> <command_list>"
  echo " example: nsu_services --command top"
  exit 1
}

init_var()
{
  SUM_CHILD_CPU_PERCENT=0
  SUM_CHILD_CPU_TIME=0
  SUM_CHILD_VIRTUAL_MEMORY=0
  SUM_CHILD_RESIDENT_MEMORY=0
}

##################################################################################################
#  Function    : convert_into_seconds                                                            #
#  Description : This function convert d-hh:mm:ss in seconds,Used for converting cumulative cpu  # 
#                 time in seconds.                                                               #
################################################################################################## 

convert_into_seconds()
{
  cputime=`echo $1 | sed 's/:\|-/ /g;' | awk '{print $4" "$3" "$2" "$1}' | awk '{print $1+$2*60+$3*3600+$4*86400}'`
  echo $cputime
}

#####################################################################################################
#  Function    : sum_process_child_attr                                                             #
#  Description : This function sums up all required fields of processes children (residednt memory, #
#                cpu %, virtual memory  etc )                                                       # 
#                                                                                                   # 
#####################################################################################################

sum_process_child_attr()
{
  local CHILD_PROCESS_LIST=(`pgrep -P $PROCESS_ID`)
  local CHILD_PROCESS_COUNT=$1
  local var=0
  local PR_ATTR=0
  local child_process_cpu_percentage=0
  local child_process_resident_memory=0
  local child_process_virtual_memory=0
  init_var
  while [ $var -lt $CHILD_PROCESS_COUNT ]
  do
     PR_ATTR=`ps -eo pid,%cpu,rss,vsz|sed -e 's/^[ \t]*//'|grep -w ^${CHILD_PROCESS_COUNT[$var]}`
     child_process_cpu_percentage=`echo $PR_ATTR| cut -d " " -f 2`
     child_process_resident_memory=`echo $PR_ATTR| cut -d " " -f 3`
     child_process_virtual_memory=`echo $PR_ATTR| cut -d " " -f 4`

    if [[ ! -z "$child_process_cpu_percentage" ]];then
      temp=(`echo $SUM_CHILD_CPU_PERCENT + $child_process_cpu_percentage | bc`)
      SUM_CHILD_CPU_PERCENT=$temp
    fi
    
    if  [[ ! -z "$child_process_resident_memory" ]];then
      SUM_CHILD_RESIDENT_MEMORY=`expr $SUM_CHILD_RESIDENT_MEMORY + $child_process_resident_memory`
    fi  
    
    if [[ ! -z "$child_process_virtual_memory" ]];then
      SUM_CHILD_VIRTUAL_MEMORY=`expr $SUM_CHILD_VIRTUAL_MEMORY + $child_process_virtual_memory`
    fi

  ((var++))
  done
}

#####################################################################################################
#  Function    : find_pid                                                                           #
#  Description : This function find the process id of processes.                                    # 
#                                                                                                   # 
#####################################################################################################

find_pid()
{
  PROCESS=$1 
  case $PROCESS in
    "ndc") 
      if [ -f $NS_WDIR/.pidfiles/.NDC.pid ];then
        PID=`cat $NS_WDIR/.pidfiles/.NDC.pid`
      else
        PID=""
      fi
      ;;
     
    "cmon")
      if [ -f /home/cavisson/monitors/sys/cmon.pid ];then
        PID=`cat  /home/cavisson/monitors/sys/cmon.pid`
      else
        PID=""
      fi
      ;;
     
    "lps") 
      if [ -f  $NS_WDIR/.pidfiles/.LPS.pid ];then
        PID=`cat $NS_WDIR/.pidfiles/.LPS.pid`
      else
        PID=""
      fi
      ;;
    
    "tomcat")
      if [ -f  $NS_WDIR/.pidfiles/.TOMCAT.pid ];then
        PID=`cat   $NS_WDIR/.pidfiles/.TOMCAT.pid`
      else
        PID=""
      fi
      ;;
 
    "hpd")
      if [ -f  $NS_WDIR/.pidfiles/.HPDMain.pid ];then
        PID=`cat  $NS_WDIR/.pidfiles/.HPDMain.pid`
      else
        PID=""
      fi
      ;;

    "api_gateway")
      if [ -f  $NS_WDIR/.pidfiles/.apiGateway.pid ];then
        PID=`cat  $NS_WDIR/.pidfiles/.apiGateway.pid`
      else
        PID=""
      fi
      ;;

    "postgres")
      
      VER_OUTPUT=`psql --version | head -1| cut -d ' ' -f3 | cut -d '.' -f1,2`
      PID=`ps -eo  pid,ppid,cmd | grep -w "/usr/lib/postgresql/$VER_OUTPUT/bin/postgres"|grep -v grep |awk '$2==1{print $1}'`
      ;;
     
     "nsu_system_health_check")
       if [ -f $NS_WDIR/.pidfiles/.CSHM.pid ];then
         PID=`cat  $NS_WDIR/.pidfiles/.CSHM.pid`
       else
         PID=""
       fi
       ;;
     *)  
       PID=`ps -ef |grep -w $PROCESS|grep -v grep|awk '{print $2}'`
   esac
   echo $PID
}

convert_to_value()
{
  MONTH=$1
  M=1
  for X in Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  do
   if  [ "X$MONTH" == "X$X" ];then
     break
   else
    M=`expr $M + 1`
   fi
   done
  
  count=`echo $M|wc -c`
  
  if [ $count -eq 2 ];then
    echo "0$M"
  else
    echo "$M"
  fi
}

  declare -A CMD_NAME

get_complete_cmd_with_args()
{
  CMD_NAME[0,0]="top"
  CMD_NAME[1,0]="iotop"
  CMD_NAME[2,0]="df"
  CMD_NAME[3,0]="sudo netstat"
  CMD_NAME[4,0]="vmstat"
  CMD_NAME[5,0]="lsof"
  CMD_NAME[6,0]="iostat"
  CMD_NAME[7,0]="ifconfig"
  CMD_NAME[8,0]="ps"
  CMD_NAME[9,0]="free"
  CMD_NAME[10,0]="lscpu"
  CMD_NAME[11,0]="uname"
  CMD_NAME[12,0]="lsb_release"
  
  CMD_NAME[0,1]="-b -n2 -d5 |awk '/^top/{i++}i==2'|head -100"
  CMD_NAME[1,1]="-n 2 -b -d 2|awk '/^Total/{i++}i==2'|head -100"
  CMD_NAME[2,1]="-h"
  CMD_NAME[3,1]=" -natp"
  CMD_NAME[4,1]=""
  CMD_NAME[5,1]=""
  CMD_NAME[6,1]="-y 1 1"
  CMD_NAME[7,1]=""
  CMD_NAME[8,1]="-ef"
  CMD_NAME[9,1]="-g"
  CMD_NAME[10,1]=""
  CMD_NAME[11,1]="-a"
  CMD_NAME[12,1]="-a"
}  

get_complete_cmd_with_args

declare -A daemon_service
num_rows=8
num_columns=2
daemon_service[0,0]="ndc"
daemon_service[1,0]="postgres"
daemon_service[2,0]="tomcat"
daemon_service[3,0]="hpd"
daemon_service[4,0]="cmon"
daemon_service[5,0]="lps"
daemon_service[6,0]="nsu_system_health_check"
daemon_service[7,0]="api_gateway"
for ((i=0;i<num_rows;i++)) do
  daemon_service[$i,1]=0
done

check_for_remaining_daemon_services()
{
  RECOMMENDED="Running But Not Recommended"
  i=0
  while [ $i -le $num_rows ];do
    if [ "X${daemon_service[$i,1]}" == "X0" ];then
      daemon="${daemon_service[$i,0]}"
      read_daemon_process $daemon "$RECOMMENDED"
    fi 
    ((i++))
  done
}

#############################################################################################################
# Function    : displaytime                                                                                 #
# Description : This function convert time (seconds) into 'd days hh : mm : ss' format                      #
#############################################################################################################

function displaytime
{ 
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && printf '%d days ' $D
  (( $H >= 10 )) && printf '%d:' $H ||  printf '0%d:'  $H
  (( $M >= 10 )) && printf '%d:' $M ||  printf '0%d:'  $M
  (( $S >= 10 )) && printf '%d\n' $S || printf '0%d\n' $S
}

######################################################################################################################
# Function    : print_header_for_daemon_services                                                                     #
# Description : This function print the header name based upon whether user want machine                             #
#               dependent services or all processes based upon SHOW_ALL_PROCESS is 0 or 1                            #
#               here 0 for daemon services and 1 for other process 			                             #
#               ex : Process:Process:10:0:1						                             #
#               Process : Name that has to be shown on GUI				                             #
#               Process : Additional Information                                                                     #
#               10      : Represent No of bytes (width size)                                                         #
#               0       : 0 represent string [other value may be 1 for integer ,2 for float],3 for separated comma   #
#               1       : enable [0 for disbale] means show on GUI                                                   #
###################################################################################################################### 

#comm,s,pid,ppid,user,lstart,etime,nlwp,cputime,vsz,rss,%cpu,cmd
print_header_for_other_services()
{
  echo -e "Process:Process Name:10:0:1,\c" 
  echo -e "State:Process State:8:0:1,\c"
  echo -e "PID:Process ID:8:1:1,\c" 
  echo -e "PPID:Parent Process ID:8:1:1,\c" 
  echo -e "User:Owner:9:0:1,\c" 
  echo -e "Running Since:Running Since:14:0:1,\c" 
  echo -e "Elapsed Time:Days-hh mm ss:12:0:1,\c" 
  echo -e "Threads:Number of Threads:10:3:1,\c" 
  echo -e "CPU Time:Cumulative CPU Time Since Process Start:11:3:0,\c" 
  echo -e "VSS(KB):Virtual Memory in KB:12:3:1,\c," 
  echo -e "RSS(KB):Resident Memory in KB:12:3:1,\c" 
  echo -e  "CPU%:CPU%:8:2:1,\c" 
  echo  "CMD Line:Command Line:10:0:1" 
  #echo  "Action:Action:10:0:1"
}

print_header_for_daemon_services()
{
  echo -e "Process:Process Name:10:0:1,\c" 
  echo -e "Status:'Stopped' or 'Running' or 'Running but not Recommended':8:0:1,\c"
  echo -e "PID:Process ID:8:1:1,\c" 
  echo -e "PPID:Parent Process ID:8:1:1,\c" 
  echo -e "User:Owner:9:0:1,\c" 
  echo -e "Running Since:Running Since:14:0:1,\c" 
  echo -e "Elapsed Time:Days hh mm ss:12:0:1,\c" 
  echo -e "Threads:Number of Threads:10:3:1,\c" 
  echo -e "Children:Number of Child Processes:12:3:1,\c" 
  echo -e "CPU Time:Cumulative CPU Time Since Process Start:11:3:0,\c" 
  echo -e "VSS(KB):Virtual Memory in KB (Including Children processes):12:3:1,\c," 
  echo -e "RSS(KB):Resident Memory in KB(Including Children processes):12:3:1,\c" 
  echo -e  "CPU%:CPU%(Including Children processes):8:2:1,\c" 
  echo -e "Open Files:Number of Open Files:12:3:1,\c"
  echo -e "CMD:Command Name:10:0:1,\c" 
  echo  "Action:Action:12:0:1"
}

##################################################################################################
#  Function    : read_daemon_process                                                             #                
#  Description : This function read all the daemon process name based on machine type and check  #
#                whether the process  is running  or not currently ,if running then it will get  #
#                its pid and pass to services_info() function in iterative way every process     #
#                inorder to fetch all necessary information regarding that process.              #
#                Here Action_Button used to determine what action shown on GUI                   #
#                where. 1-> start                                                                #
#                       2->stop                                                                  #
#                       3->restart                                                               #
#                       4->show_logs_file                                                        #
#                       5->show_config                                                           #
#                       6->show_logs_directory                                                   #
#                       7->show_file_content                                                     #
#                       11->running and recommended                                              #
#                       12-> running and not recommmended                                        #
##################################################################################################

read_daemon_process()
{
  local var=0
  local process_id=""
  local process_name="$1"
  local process_status="$2"

  while [ $var -le $SERVICES_LIST_COUNT ]
  do
    if [ "XX$process_name"  == "XX" ] ;then
      process_name=${SERVICES_LIST[$var]}
    fi
    case $process_name in
      "ndc") 
	daemon_service[0,1]=1
	process_id=`find_pid ndc`
	if [ "X$process_id" != "X" ];then
          res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd|sed -e 's/^[ \t]*//' | grep -w ^$process_id | grep -w ndcollector|grep -w $CONTROLLER_NAME|grep -v grep 2>/dev/null`
	  ACTION_BUTTON=",2|3|4|5"
	fi
        if [ "XX$res" == "XX" ] ;then 
	  if [ "XX$MACHINE_TYPE" != "XXNCH"  ];then
            [[ "XX$ROLES" == "XXADMIN" ]]  && echo "$process_name,Stopped,,,,,,,,,,,,,,1|4" || echo "$process_name,Stopped,,,,,,,,,,,,,,4"
          fi
	fi
      ;;
       
      "cmon")
        daemon_service[4,1]=1
        process_id=`find_pid cmon`
        if [ "X$process_id" != "X" ];then
          res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd|sed -e 's/^[ \t]*//' | grep -w ^$process_id | grep -w cmon | grep -v grep 2>/dev/null`
          ACTION_BUTTON=",2|3|6|5"
        fi
	if [ "XX$res"  == "XX" ];then
          [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|6" || echo "$process_name,Stopped,,,,,,,,,,,,,,6"
        fi
      ;;
       
      "lps") 
        daemon_service[5,1]=1
        process_id=`find_pid lps`
        if [ "X$process_id" != "X" ];then
          res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd | sed -e 's/^[ \t]*//' | grep -w ^$process_id|grep -w  nsu_lps | grep  -w $CONTROLLER_NAME | grep -v grep 2>/dev/null`
          ACTION_BUTTON=",2|3|4|5"
	fi

	if [ "XX$res" == "XX" ];then
          if [ "XX$MACHINE_TYPE" != "XXNV" -a "XX$MACHINE_TYPE" != "XXNCH" ];then
            [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|4" || echo "$process_name,Stopped,,,,,,,,,,,,,,4"
           fi
        fi 
      ;;
      
      "tomcat")
        daemon_service[2,1]=1
	process_id=`find_pid tomcat`
	if [ "X$process_id" != "X" ];then
	  res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd | sed -e 's/^[ \t]*//' | grep -w ^$process_id | grep -w tomcat | grep -w $CONTROLLER_NAME | grep -v grep 2>/dev/null`
	 # never start or stop tomcat as suggested by Neeraj Sir
          ACTION_BUTTON=",3|4|5"
	fi

	if [ "XX$res" == "XX" ];then
          [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|4" || echo "$process_name,Stopped,,,,,,,,,,,,,,4"
        fi
      ;;
   
      "hpd")
        daemon_service[3,1]=1
        process_id=`find_pid hpd`
        if [ "X$process_id" != "X" ];then
	  res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd|sed -e 's/^[ \t]*//' | grep -w ^$process_id|grep -w nsu_hpd |grep  -w $CONTROLLER_NAME|grep -v grep  2>/dev/null`
	  ACTION_BUTTON=",2|3|6|5"
	fi

	if [ "XX$res" == "XX" ];then
          if [ "XX$MACHINE_TYPE" != "XXNDE" -a "XX$MACHINE_TYPE" != "XXNCH"  -a "XX$MACHINE_TYPE" != "XXED" ];then
             [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|6" || echo "$process_name,Stopped,,,,,,,,,,,,,,6"
          fi
        fi
	;;

      "api_gateway")
        daemon_service[7,1]=1
        process_id=`find_pid api_gateway`
        if [ "X$process_id" != "X" ];then
          res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd|sed -e 's/^[ \t]*//' | grep -w ^$process_id|grep -w api_gateway |grep  -w $CONTROLLER_NAME|grep -v grep  2>/dev/null`
          ACTION_BUTTON=",2|3|6|5"
        fi

	if [ "XX$res"  == "XX" ];then
          [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|6" || echo "$process_name,Stopped,,,,,,,,,,,,,,6"
        fi
        ;;

      "postgres")
        daemon_service[1,1]=1
	process_id=`find_pid postgres`
	if [ "X$process_id" != "X" ];then
 	  ACTION_BUTTON=",2|3|7|5"
          res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd|sed -e 's/^[ \t]*//' | grep -w ^$process_id|grep -w postgres ||grep -v grep  2>/dev/null`
	fi
	if [ "XX$res" == "XX" ];then 
	  [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|7" || echo "$process_name,Stopped,,,,,,,,,,,,,,7"
        fi
      ;;
       
      "nsu_system_health_check")
        daemon_service[6,1]=1
	process_id=`find_pid nsu_system_health_check`
	if [ "X$process_id" != "X" ];then
	  res=`ps -eo pid,ppid,lstart,etimes,cputime,%cpu,rss,vsz,user,nlwp,cmd | grep -w ^$process_id|grep -w nsu_system_health_check|grep  -w $CONTROLLER_NAME|grep -v grep 2>/dev/null`
	  ACTION_BUTTON=",2|3|6|5"
	fi
         
	if [ "XX$res"  == "XX" ];then
          [[ "XX$ROLES" == "XXADMIN" ]] && echo "$process_name,Stopped,,,,,,,,,,,,,,1|6" || echo "$process_name,Stopped,,,,,,,,,,,,,,6"
        fi
      ;;  
    esac

  if [ "X$res" != "X" ];then
    services_info $process_id $process_name "$process_status" "$res"
  fi

  ((var++))
  process_id=""
  res=""
  process_name=""

done
SERVICES_LIST_COUNT=0
check_for_remaining_daemon_services
}

################################################################################################
#  Function    : services_info                                                                 #                
#  Description : This function parse processid,status,elapsed time,cputime,virtual memory,     #
#                resident memory,cpu Percentage of a running process and stored them into file #
#                later we print them on standard utput                                        #
#                                                                                              #
################################################################################################
digit_handling()
{
  M=$1
  count=`echo $M|wc -c`

  if [ $count -eq 2 ];then
    echo "0$M"
  else
    echo "$M"
  fi
}

services_info()
{
  CMD_ARGS=""
  PROCESS_ID="$1"
  PROCESS_NAME="$2"
  PROCESS_STATUS="$3"
  RES="$4"
  NO_OF_PROCESS=1
  CHILD_PROCESS="" 

  read -r -a PROCESS_INFO <<< "$RES"
  
  PARENT_PID=${PROCESS_INFO[1]}
  DAY=${PROCESS_INFO[2]}
  MONTH=`convert_to_value ${PROCESS_INFO[3]}`

  DD=${PROCESS_INFO[4]}
  DD=`digit_handling $DD`

  TIME=${PROCESS_INFO[5]}
  YEAR=${PROCESS_INFO[6]}

  RUNNING_SINCE="$MONTH/$DD/$YEAR $TIME"
  ELAPSED_TIME_IN_SEC=`displaytime ${PROCESS_INFO[7]}`

  #if [ "X$SHOW_ALL_PROCESS" == "X0" ];then
    NO_OF_CHILD_PROCESS=`pgrep -P $PROCESS_ID|wc -l`
  #fi

  CUMULATIVE_CPU_TIME=${PROCESS_INFO[8]}
  CUMULATIVE_CPU_TIME_IN_SEC=`convert_into_seconds $CUMULATIVE_CPU_TIME`
  CPU_PERCENTAGE=`echo ${PROCESS_INFO[9]}|awk '{printf "%.2f\n" ,$1}'`
  RESIDENT_MEMORY=${PROCESS_INFO[10]}
  VIRTUAL_MEMORY=${PROCESS_INFO[11]}
  USER=${PROCESS_INFO[12]}
  NO_OF_THREAD=${PROCESS_INFO[13]}

  #cmd o/p may contains space and comma add them and remove comma with underscore (GUI purpose Bug 77360) 
  i=14
  while [ $i -le ${#PROCESS_INFO[@]} ];do
    TEMP=`echo ${PROCESS_INFO[$i]}|sed 's/,/_/g'`
    CMD_ARGS+=$TEMP
    i=`expr $i + 1` 
  done 
 
  if [ "X$NO_OF_CHILD_PROCESS" != "X" ];then
    sum_process_child_attr $NO_OF_CHILD_PROCESS
    VIRTUAL_MEMORY=`expr $VIRTUAL_MEMORY + $SUM_CHILD_VIRTUAL_MEMORY`
    RESIDENT_MEMORY=`expr $RESIDENT_MEMORY + $SUM_CHILD_RESIDENT_MEMORY`
    CPU_PERCENTAGE=(`echo $CPU_PERCENTAGE + $SUM_CHILD_CPU_PERCENT|bc|awk '{printf "%.2f\n" ,$1}'`)
  fi

  #Since we get no of open file from proc/<pid>/fd but in case of postgres process we can't because cavisson 
  #user  does not have read permisson to access
 
  if [ "XX$PROCESS_NAME" != "XXpostgres" ];then
    NO_OF_OPEN_FILE=`ls /proc/$PROCESS_ID/fd 2>/dev/null | wc -l 2>/dev/null` 
  else
    NO_OF_OPEN_FILE=`sudo lsof -p $PROCESS_ID 2>/dev/null|wc -l`
  fi
  
  if  [[ -z "$PROCESS_STATUS" ]];then
    PROCESS_STATUS="Running"
  fi

  if [ "X$ROLES" != "XADMIN" ];then
    if [ "XX$PROCESS_NAME" == "XXndc"  -o "XX$PROCESS_NAME" == "XXlps" -o "XX$PROCESS_NAME" == "XXtomcat"  ];then
      ACTION_BUTTON=",4"
    elif [ "XX$PROCESS_NAME" == "XXcmon" -o "XX$PROCESS_NAME" == "XXhpd" -o "XX$PROCESS_NAME" == "XXnsu_system_health_check" -o "XX$PROCESS_NAME" == "XXapi_gateway" ];then
      ACTION_BUTTON=",6"
    elif [ "XX$PROCESS_NAME" == "XXpostgres" ];then
      ACTION_BUTTON=",7"
    fi
  fi
  
    echo "$PROCESS_NAME,$PROCESS_STATUS,$PROCESS_ID,$PARENT_PID,$USER,$RUNNING_SINCE,$ELAPSED_TIME_IN_SEC,$NO_OF_THREAD,$NO_OF_CHILD_PROCESS,$CUMULATIVE_CPU_TIME_IN_SEC,$VIRTUAL_MEMORY,$RESIDENT_MEMORY,$CPU_PERCENTAGE,$NO_OF_OPEN_FILE,$CMD_ARGS$ACTION_BUTTON"
}

create_file_link_path()
{
  PID=`find_pid $2`
  if [ -d "$1" ];then
    file_name="$2.$PID"
  else 
    file_name=`echo $1|awk -F '/' '{print $NF}'`
    file_name="$file_name.$PID.txt"
  fi
  if  [ -L $NS_WDIR/webapps/netstorm/temp/$file_name  ];then 
    rm -f $NS_WDIR/webapps/netstorm/temp/$file_name
  fi  
  ln -s $1 $NS_WDIR/webapps/netstorm/temp/$file_name 2>/dev/null
  echo "$NS_WDIR/webapps/netstorm/temp/$file_name"
}

###############################################################################################
# Function    : services_list                                                                 #
# Description : This function start stop restart show logs of services                        #
#                                                                                             #
############################################################################################### 

services_list()
{
  local PROCESS=$1
  local SERVICES=$2
   
  if [ "X$CONTROLLER_NAME" == "Xwork" ];then
    CNTLR_NAME=""
  else
    CNTLR_NAME="_$CONTROLLER_NAME"
  fi
  
  if [ "X$SERVICES" != "Xshow_files" ];then 
  case $PROCESS in
    "ndc")
      case  $SERVICES in
        "start")nohup /etc/init.d/ndc$CNTLR_NAME start  >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
        ;;
        "stop")nohup /etc/init.d/ndc$CNTLR_NAME stop >/tmp/nohup.out.$$ 2>&1  &
               wait
               cat /tmp/nohup.out.$$
               rm /tmp/nohup.out.$$
        ;;
        "restart")nohup /etc/init.d/ndc$CNTLR_NAME forcerestart >/tmp/nohup.out.$$ 2>&1 &
                  wait
                  cat /tmp/nohup.out.$$
                  rm /tmp/nohup.out.$$
        ;;
        "show")/etc/init.d/$PROCESS$CNTLR_NAME show
        ;;
        "show_config")
          cat $NS_WDIR/ndc/conf/ndc.conf
        ;;
        "show_log_path")
          read_machine_type
	 if [ "X$MACHINE_TYPE" == "XNDE" ];then
           TR=`nsu_show_netstorm |tail  -1 |awk  '{print  $1}'`
	   if [  "X$TR" == "X" ];then
             create_file_link_path "$NS_WDIR/ndc/logs/ndc_trace.log" "ndc"
	   else
	     CUR_PARTITION=`cat $NS_WDIR/logs/TR$TR/.curPartition| grep "CurPartitionIdx" |cut -d = -f2`
	     create_file_link_path "$NS_WDIR/logs/TR$TR/$CUR_PARTITION/nd/logs/ndc_trace.log" "ndc"     
           fi
         else
	   create_file_link_path "$NS_WDIR/ndc/logs/ndc_trace.log"  "ndc"
         fi
         ;;
         *)
         echo "Error:Invalid Services"
   esac
   ;;
 
  "lps")
    case  $SERVICES in
      "start")nohup /etc/init.d/$PROCESS$CNTLR_NAME start >/tmp/nohup.out.$$ 2>&1 &
              wait
              cat /tmp/nohup.out.$$
              rm /tmp/nohup.out.$$
       ;;
      "stop")nohup /etc/init.d/$PROCESS$CNTLR_NAME stop  >/tmp/nohup.out.$$ 2>&1 &
             wait
             cat /tmp/nohup.out.$$
             rm /tmp/nohup.out.$$
       ;;
      "restart")nohup /etc/init.d/$PROCESS$CNTLR_NAME restart  >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
       ;;
      "show")/etc/init.d/lps$CNTLR_NAME show
       ;;
      "show_config")
                cat $NS_WDIR/lps/conf/lps.conf
       ;;
      "show_log_path")
          read_machine_type
	 if [ "X$MACHINE_TYPE" == "XNDE" ];then
           TR=`nsu_show_netstorm |tail  -1 |awk  '{print  $1}'`
	   if [  "X$TR" == "X" ];then
             create_file_link_path "$NS_WDIR/lps/logs/lps_trace.log" "lps"
	   else
	     CUR_PARTITION=`cat $NS_WDIR/logs/TR$TR/.curPartition| grep "CurPartitionIdx" |cut -d = -f2`
	     create_file_link_path "$NS_WDIR/logs/TR$TR/$CUR_PARTITION/nd/logs/lps_trace.log" "lps"
           fi     
         else
           create_file_link_path "$NS_WDIR/lps/logs/lps_trace.log" "lps"
         fi
      esac
      ;;

   "hpd")
     case  $SERVICES in
       "start")nohup /etc/init.d/$PROCESS$CNTLR_NAME start >/tmp/nohup.out.$$ 2>&1 &
               wait
               cat /tmp/nohup.out.$$
               rm /tmp/nohup.out.$$
       ;;
       "stop")nohup /etc/init.d/$PROCESS$CNTLR_NAME stop >/tmp/nohup.out.$$ 2>&1 &
              wait
              cat /tmp/nohup.out.$$
              rm /tmp/nohup.out.$$
       ;;
       "restart")nohup /etc/init.d/$PROCESS$CNTLR_NAME restart >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
       ;;
       "show")/etc/init.d/$PROCESS$CNTLR_NAME show
       ;;
       "show_config")
         cat $NS_WDIR/hpd/conf/hpd.conf
       ;;
       "show_log_path")
         create_file_link_path "$NS_WDIR/hpd/logs/" "hpd"
     esac
     ;;

   "api_gateway")
     case  $SERVICES in
       "start")nohup /etc/init.d/apiGateway$CNTLR_NAME start >/tmp/nohup.out.$$ 2>&1 &
               wait
               cat /tmp/nohup.out.$$
               rm /tmp/nohup.out.$$
       ;;
       "stop")nohup /etc/init.d/apiGateway$CNTLR_NAME stop >/tmp/nohup.out.$$ 2>&1 &
              wait
              cat /tmp/nohup.out.$$
              rm /tmp/nohup.out.$$
       ;;
       "restart")nohup /etc/init.d/apiGateway$CNTLR_NAME restart >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
       ;;
       "show")/etc/init.d/apiGateway$CNTLR_NAME show
       ;;
       "show_config")
         cat $NS_WDIR/api_gateway/conf/api_gateway.cfg
       ;;
       "show_log_path")
         create_file_link_path "$NS_WDIR/api_gateway/logs/" "api_gateway"
     esac
     ;;
 
   "cmon")
     case  $SERVICES in
      "start")nohup /etc/init.d/$PROCESS start >/tmp/nohup.out.$$ 2>&1 &
              wait
              cat /tmp/nohup.out.$$
              rm /tmp/nohup.out.$$
      ;;
      "stop")nohup /etc/init.d/$PROCESS stop >/tmp/nohup.out.$$ 2>&1 &
             wait
             cat /tmp/nohup.out.$$
             rm /tmp/nohup.out.$$
      ;;
      "restart")nohup /etc/init.d/$PROCESS restart >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
      ;;
      "show")/etc/init.d/cmon status
      ;;
      "show_config")
        cat /home/cavisson/monitors/sys/cmon.env
      ;;
      "show_log_path")
        create_file_link_path "/home/cavisson/monitors/logs/" "cmon"
     esac
    ;;

    "tomcat")
      case  $SERVICES in
       "start")nohup /etc/init.d/$PROCESS$CNTLR_NAME start >/tmp/nohup.out.$$ 2>&1 &
                wait
                sudo service $PROCESS$CNTLR_NAME status >/tmp/nohup.out.$$
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
       ;;
       "stop")nohup /etc/init.d/$PROCESS$CNTLR_NAME stop >/tmp/nohup.out.$$ 2>&1 &
                wait
                sudo service $PROCESS$CNTLR_NAME status >/tmp/nohup.out.$$
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
       ;;
       "restart")nohup /etc/init.d/$PROCESS$CNTLR_NAME restart >/tmp/nohup.out.$$ 2>&1 &
                wait
                sudo service $PROCESS$CNTLR_NAME status >/tmp/nohup.out.$$
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
       ;;
       "show")service $PROCESS$CNTLR_NAME status
       ;;
      "show_config")
         if [ -d $NS_WDIR/apps/apache-tomcat-9.0.50 ];then
           cat $NS_WDIR/apps/apache-tomcat-9.0.50/conf/server.xml
	 elif [ -d $NS_WDIR/apps/apache-tomcat-9.0.43 ];then
           cat $NS_WDIR/apps/apache-tomcat-9.0.43/conf/server.xml
	 elif [ -d $NS_WDIR/apps/apache-tomcat-9.0.41 ];then
           cat $NS_WDIR/apps/apache-tomcat-9.0.41/conf/server.xml
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.105 ];then
           cat $NS_WDIR/apps/apache-tomcat-7.0.105/conf/server.xml
	 elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.104 ];then
           cat $NS_WDIR/apps/apache-tomcat-7.0.104/conf/server.xml 
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.99 ];then
           cat $NS_WDIR/apps/apache-tomcat-7.0.99/conf/server.xml 
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.91 ];then
           cat $NS_WDIR/apps/apache-tomcat-7.0.91/conf/server.xml 
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.59 ];then
           cat $NS_WDIR/apps/apache-tomcat-7.0.59/conf/server.xml 
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.52 ];then
           cat $NS_WDIR/apps/apache-tomcat-7.0.52/conf/server.xml 
         fi
       ;;
      "show_log_path")
         if [ -d $NS_WDIR/apps/apache-tomcat-9.0.50 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-9.0.50/logs/catalina.out" "tomcat"
	 elif [ -d $NS_WDIR/apps/apache-tomcat-9.0.43 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-9.0.43/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-9.0.41 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-9.0.41/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.105 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-7.0.105/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.104 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-7.0.104/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.99 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-7.0.99/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.91 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-7.0.91/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.59 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-7.0.59/logs/catalina.out" "tomcat"
         elif [ -d $NS_WDIR/apps/apache-tomcat-7.0.52 ];then
           create_file_link_path "$NS_WDIR/apps/apache-tomcat-7.0.52/logs/catalina.out" "tomcat"
         fi
       ;; 
      *)echo "Error:Invalid Service"
      esac  
      ;;

    "postgres")
      case  $SERVICES in
        "start")nohup sudo service postgresql start >/tmp/nohup.out.$$ 2>&1 &
                wait
                sudo service postgresql status >/tmp/nohup.out.$$
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
        ;;
        "stop")nohup sudo service postgresql stop >/tmp/nohup.out.$$ 2>&1 &
               wait
                sudo service postgresql status >/tmp/nohup.out.$$
               cat /tmp/nohup.out.$$
               rm /tmp/nohup.out.$$
        ;;
        "restart")nohup sudo service postgresql restart >/tmp/nohup.out.$$ 2>&1 &
                wait
                sudo service postgresql status >/tmp/nohup.out.$$
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
        ;;
        "show")sudo service postgresql status
        ;;
        "show_log_path")
          show_postgres_log
        ;;
        "show_config")
           cat /etc/postgresql/12/main/postgresql.conf
        ;;
        *)echo "Error:Invalid Service"
       esac  
       ;;
     
    "nsu_system_health_check")
      case  $SERVICES in
        "start")nohup /etc/init.d/system_health$CNTLR_NAME start>/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
        ;;
        "stop")nohup /etc/init.d/system_health$CNTLR_NAME stop >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
        ;;
        "restart") nohup /etc/init.d/system_health$CNTLR_NAME restart >/tmp/nohup.out.$$ 2>&1 &
                wait
                cat /tmp/nohup.out.$$
                rm /tmp/nohup.out.$$
        ;;
        "show")/etc/init.d/system_health$CNTLR_NAME status
        ;;
        "show_log_path")
          create_file_link_path "$NS_WDIR/system_health_monitor/logs" "nsu_system_health_check"          
        ;;
        "show_config")
          cat $NS_WDIR/system_health_monitor/conf/system_health_monitor.conf
        ;;
        *)echo "Error:Invalid Service"
      esac
      ;;

     *)
       echo "Error: No such Process"
     ;;
     esac
      
  elif [ "X$SERVICES" == "Xshow_files" ];then
    sudo lsof -p $PROCESS 2>/dev/null|wc -l
    #lsof -a -p $PID -d ^mem -d ^cwd -d ^rtd -d ^txt -d ^DEL 2>/dev/null| wc -l
  fi
}

show_all_processes()
{
  print_header_for_other_services
   #process may conatin name hence put them in same column for details refer #77370  
   ps -eo  comm,s,pid,ppid,user,lstart,etimes,nlwp,cputime,vsz,rss,%cpu,cmd|tail -n+2 |
 awk ' BEGIN { ORS=" "} {
      for (i = 1; i <= NF; i++)
      {
         if ( $i == "S" || $i == "R" ||$i == "T" || $i == "D" ||$i == "Z" )  
           break;
         else 
           printf "%s", $i 
      } 
      j = i;
      
      { print "," $(j) "," $(j+1) "," $(j+2) "," $(j+3) "," $(j+5)"/"$(j+6)"/"$(j+8)" " $(j+7)","} ;
	{ 
	  T=(j+9)
	if ( int((($T/60)/60)/24) > 0 ) 
	{
	  print int((($T/60)/60)/24)
	  printf " days-"
	}
	if ( int((($T/60)/60)%24) >= 10 ) 
	{
	    print int((($T/60)/60)%24)
	}
        else
        {  
	  printf "0"
	  print int((($T/60)/60)%24)
	}
	if ( int(($T/60)%60) >= 10 ) 
	{
	   printf ":"
	   print int(($T/60)%60) 
	}
	else
	{
	  printf ":0"
	  print  int(($T/60)%60)
	}
	if ( $T%60 >= 10 )
	{
	  printf ":"
	  print int($T%60)
	}
        else
	{
	  printf ":0"
	  print int($T%60)
	}											      
      };  {print ","$(j+10) "," $(j+11)"," $(j+12) "," $(j+13) "," $(j+14) ","};
      {
        i=j+15; 
        for(i;i<=NF;i++) 
        {
          printf "%s",$i
	} ;  
        {
          printf "\n"
        }

      }
}'
 
}

read_machine_type()
{
  if [ ! -f "$CAV_CONTROLLER_FILE" ]; then
    CAV_CONTROLLER_FILE="/home/cavisson/etc/cav.conf"
    if [ ! -f "$CAV_CONTROLLER_FILE" ]; then
      echo "Error: $CAV_CONTROLLER_FILE not found."
      exit
    fi
  fi

  MACHINE_TYPE="`grep ^CONFIG $CAV_CONTROLLER_FILE | cut -d ' ' -f2`"

  if [ "X$MACHINE_TYPE" == "X" ];then
     echo "Error: Machine Type not specified"
     exit 1
  fi
}


##################################################################################################
#  Function    : read_cav_controller_conf                                                        #                
#  Description : This function reads cav.conf file to get machine type running on given machine  # 
#                									         #
##################################################################################################

read_cav_controller_conf()
{
  local rem_daemon_services
  read_machine_type

  case $MACHINE_TYPE in
    "NDE")
      rem_daemon_services=("ndc" "lps")

      for ((i=0; i<${#rem_daemon_services[@]}; ++i)) 
      do
	SERVICES_LIST+=(${rem_daemon_services[i]})
      done
      ;;

    "NS+NO"|"NS>NO"|"NS"|"NO"|"NC")
      rem_daemon_services=("ndc" "lps" "hpd")

      for ((i=0; i<${#rem_daemon_services[@]}; ++i)) 
      do
	SERVICES_LIST+=(${rem_daemon_services[i]})
      done
      ;;
    
    "NV")
      rem_daemon_services=("ndc" "hpd")

      for ((i=0; i<${#rem_daemon_services[@]}; ++i)) 
      do
	SERVICES_LIST+=(${rem_daemon_services[i]})
      done
      ;;
    
    "ED")
      rem_daemon_services=("ndc")

      for ((i=0; i<${#rem_daemon_services[@]}; ++i)) 
      do
	SERVICES_LIST+=(${rem_daemon_services[i]})
      done
      ;;

    "NCH")
      ;; 
    
    *)
      echo "Error: Specified Machine type not matched"
      exit 1
      ;;
  esac
    
  SERVICES_LIST_COUNT=`expr $SERVICES_LIST_COUNT + $i` 
  read_daemon_process 
}

######################################################################################################################################

while [ "$1" != "" ] 
do
  case "$1" 
  in
    "--show_all_process")
       shift
       SHOW_ALL_PROCESS=$1
       OPTION_TYPE=0
       shift 
       case "$1"
       in
	 "--roles")
	 shift
	 ROLES=$1
	 ;;
       esac
       ;;
    "--service")
       shift
       PROCESS=$1
       shift 
       case "$1"
       in
	 "--action")
	    shift
	    ACTION=$1
	    OPTION_TYPE=1
	    ;; 
	    *)usage
	    ;;
       esac
       ;;
    "--command")
       shift
       COMMAND=$1
       shift 
       while [ "$1" != "" ];do 
       COMMAND="${COMMAND} ${1}"
       shift
       done 
       OPTION_TYPE=2
       ;;
    *)usage
    ;;
  esac
  shift
done
 
if [ "X$OPTION_TYPE" == "X0" ];then
  if [ "X$SHOW_ALL_PROCESS" == "X0" ];then
    print_header_for_daemon_services 
    read_cav_controller_conf
  elif [ "X$SHOW_ALL_PROCESS" == "X1" ];then
     show_all_processes 
  else
     usage
  fi
elif [ "X$OPTION_TYPE" == "X1" ];then
  if [ "X$ACTION" != "X" ];then
    services_list  $PROCESS  $ACTION
  else
     usage
  fi
elif [  "X$OPTION_TYPE"  == "X2" ];then
  if [ "X$COMMAND" == "X" ];then
    echo "must passed value"
  else
    case $COMMAND in
      "top") top -b -n2 |awk '/^top/{i++}i==2'|head -100
       ;;

      "iotop") sudo iotop -n 2 -b |awk '/^Total/{i++}i==2'|head -100
       ;;
     "command_list")
         echo "top|iotop|df|netstat|vmstat|lsof|iostat|ifconfig|ps|free|lscpu|uname|lsb_release"
       ;;
    esac
    
    get_command()
    {
      for ((i=2;i<=13;i++)) do
      echo ${CMD_NAME[$i,0]}|grep -i $COMMAND >/dev/null
      if [ $?  -eq  0 ] ;then
        COMPLETE_CMD="${CMD_NAME[$i,0]}"
        COMPLETE_CMD="$COMPLETE_CMD ${CMD_NAME[$i,1]}"
        break
      fi
      done
     }

     get_command $COMMAND
     $COMPLETE_CMD  
     if [ $? -ne 0 ];then
       echo "Error:  $COMMAND not executed"
     fi
   fi 
  else 
     print_header_for_daemon_services 
     read_cav_controller_conf
  fi
exit 0
