#!/bin/bash
#
# Name:    nsu_check_normal_test
# Author:  Abhishek
# Purpose: This shell called by Master Process to check if test is stoped and duration is not updated in summary.top file. 

CONVERT_TO_MB=$((1024 * 1024))
#Function to write into log file with log level 1-High 2-Medium
#DateTime|Build Version|Comments
#when size is greater then 10MB then renaming to test_trace.log.prev file
write_log_file()
{
  if [ $1 -le $TRACE_LOG_LEVEL ];then
    echo "$(date)|$CUR_BUILD_VERSION|$2" >>$TRACE_LOGS
  fi

  if [ $(( $( stat -c '%s' $TRACE_LOGS ) / $CONVERT_TO_MB )) -gt 1 ];then
    mv ${TRACE_LOGS} ${TRACE_LOGS}.prev
  fi
}

check_summary_top_duration()
{
  DURATION=`cut -d '|' -f 15 $NS_WDIR/logs/TR${TEST_NUM}/summary.top`
  if [ "$DURATION" = "00:00:00" ]; then
    write_log_file 1 "Duration '$DURATION' is not updated in '$NS_WDIR/logs/TR${TEST_NUM}/summary.top' file. Now updating ..."
    nsi_tr_duration -u -n ${TEST_NUM} 2>/dev/null 1>&2
    DURATION=`cut -d '|' -f 15 $NS_WDIR/logs/TR${TEST_NUM}/summary.top`
  fi
  write_log_file 1 "Duration '$DURATION' in '$NS_WDIR/logs/TR${TEST_NUM}/summary.top' file."
}

#Check IF test is running
#using netstorm pid to start and stop test 
check_if_test_is_running_or_not ()
{
  #Set Netstorm PID
  if [ "X$NETSTORM_PID" == "X0" ]; then
    NETSTORM_PID=`cat $NS_WDIR/logs/TR${TEST_NUM}/.pidfiles/.CavMain.pid` 2>/dev/null
    write_log_file 1 "$NETSTORM_PID is the pid read from Cavmain.pid"
  fi

  #Check test pid is running
  if [ -d "/proc/$NETSTORM_PID" ]; then
    binary=`ps -p ${NETSTORM_PID} -h -o 'comm'`
    if [ "X${binary}" == "Xnetstorm" ] || [ "X${binary}" == "Xnetstorm.debug" ]; then
      # Commenting below log because it is coming on console and creating unnecessary noise
      #write_log_file 2 "$NETSTORM_PID is the pid is netstorm PID and running."
      return
    else 
      write_log_file 2 "$NETSTORM_PID is the running but not netstorm."
    fi
  fi
  #Test is not running 
  write_log_file 1 "$NETSTORM_PID Netstorm pid is not running so test is stopped"
  check_summary_top_duration
  nsi_update_usages_report ${TEST_NUM}
  
  #Bug 100479 - Upload test run on NS Repo
  nohup nsi_repo_upload -t ${TEST_NUM} 1>/dev/null 2>&1 &

  #Bug - 106231 | Stop VNCs if running for the current Test
  script_list_file="$NS_WDIR/logs/TR${TEST_NUM}/scripts/scripts.list"
  if [ -s "$script_list_file" ]; then
    D_IFS="$IFS"
    script_list=`cat $script_list_file`
    IFS=$'\n' script_list=($script_list) IFS="$D_IFS"
 
    for ((i = 0; i < ${#script_list[@]}; i++))
    do
      script=${script_list[$i]}
      rbu_param_csv="$NS_WDIR/logs/TR${TEST_NUM}/scripts/${script}/.rbu_parameter.csv"
      if [ -s "${rbu_param_csv}" ]; then
        line1=`cat ${rbu_param_csv} | head -n 1`
        profile_name=`echo ${line1} | cut -d',' -f1`
        browser=`echo ${profile_name} | awk -F'-' '{print $(NF-1)}'`
        profile_prefix=${profile_name%?} #Remove last field
 
        vid=`cat $rbu_param_csv 2>/dev/null | awk -F',' '{printf $3","}'` && nsu_auto_gen_prof_and_vnc -o stop -N ${vid} -P "${profile_prefix}" -w -B ${browser} >/dev/null 2>&1
      fi
    done
  fi

  exit
}

usage()
{
  echo "-t: test run number"
  echo "-D: Progress interval in sec"
  echo "-l: Tracing level  : Level for logs. It can be 1 or 2 (1: Update on Error, 2: Update on progress Interval)"
  exit 2
}

TEST_START_COUNT=""
PROGRESS_SEC=300
CONTROLLER=`basename $NS_WDIR`
TRACE_LOG_LEVEL=1
NETSTORM_PID=0


while getopts t:D:l:? ch
do
  case $ch in
  t) TEST_NUM=$OPTARG;;
  D) PROGRESS_SEC=$OPTARG;;
  l) TRACE_LOG_LEVEL=$OPTARG;;
  ?) usage ;;
  esac
done
if [ "$TEST_NUM" = "" ]; then
  echo "-t in not given"
  usage
fi 
TRACE_LOGS=$NS_WDIR/logs/TR$TEST_NUM/ns_logs/test_trace.log
mkdir -p $NS_WDIR/logs/TR$TEST_NUM/ns_logs/
touch $TRACE_LOGS

while true
do
  #Creating path and Pid file first time only
  #TESTRUN=`check_if_test_is_running_or_not`
  check_if_test_is_running_or_not
  #echo "$PROGRESS_SEC"
  sleep $PROGRESS_SEC
done
