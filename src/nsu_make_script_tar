#!/bin/bash
#
#script to create tar files for project and subproject
# Usage: Tarf -F -f -d -t -v -e -w
#
#Exit Values:
# 0-Successful
# 1-Usage Error
#
# display_help_and_exit() To print help
#
#

clear

display_help_and_exit()
{
  echo $1 
  echo "Option Usage:$0 -F <Script String Path> -f <Tar Name> -d -t -v -w <working directory path> "
  echo " -F is used to get Path String of project/subproject/script. It is a mandatory argument "
  echo " -f is used to get tar name from user. It is a mandatory argument "
  echo " -d flag is used to Download Dump file."
  echo " -t flag is used to Download Temp file."
  echo " -v flag is used to Download Version file."
  echo " -e flag is used to Download Script file."
  echo " -w is used to give path of directory in which you want to work."
  exit 1
}

#Start main procedure
#
#
#Set default value for variable
#

PROJECT=""
SUB_PROJECT=""
SCRIPT_FILE=""
DUMP_FILE=0
TEMP_FILE=0
VER_FILE=0
SKIP_SCRIPT_FLG=0
WORK_DIR=""
EXCLUDE_ARG="--exclude *.lock"
TEXTFILE=tar_convention.txt

#************************************************************************************************
SCRIPTS_DIR="scripts"
#default workspace
DW="admin"
#default profile
DP="default"
WORKSPACE=""
PROFILE=""
#WORKSPACE_PROFILE ==> WORKSPACE + PROFILE
WORKSPACE_PROFILE=""
NS_TA_DIR=""
NS_RTA_DIR="workspace"

#check for workspace/profile name and RetlativeTestAsset Dir
check_and_set_workspace_profile()
{
  #if empty aregument passed
  if [ \( "X${1}" == "X" \) -o \( "X${1}" == "${DW}/${DP}" \) ];then
   WORKSPACE=$DW
   PROFILE=$DP
   WORKSPACE_PROFILE=${DW}/${DP}
   return 1
  fi

  #if default workspace/profile
   
  WORKSPACE=`echo $1 | egrep "/" | cut -d'/' -f1`
  PROFILE=`echo $1 | egrep "/" | cut -d'/' -f2`

  #<workspace> i.e. profile no given
  #<workspace>/ i.e. profile no given
  #/<profile> i.e. profile no given
  if [ "X$WORKSPACE" == "X" ];then
     #set default value
     WORKSPACE=$DW
  fi

  if [ "X$PROFILE" == "X" ];then
     #set default value
     PROFILE=$DP
  fi
  #if WORKSPACE is NOT default workspace
  if [ $WORKSPACE != $DW ];then
     #check if workspace exists
     if [ ! -d ${NS_WDIR}/${NS_RTA_DIR}/$WORKSPACE ];then
       #set to default workspace
       WORKSPACE=$DW
     fi
  fi
  #check if profile exists
  if [ ! -d ${NS_WDIR}/${NS_RTA_DIR}/$WORKSPACE/$PROFILE ];then
      #set to default workspace
      PROFILE=$DP
  fi

  #set workspace and profile path
  WORKSPACE_PROFILE=${WORKSPACE}/${PROFILE}
}

#set relative test assets dir
set_rta_dir()
{
  NS_RTA_DIR="workspace/$1/$2/cavisson"
}
#************************************************************************************************
while getopts F:f:dtvewW:? opt
do 
  case "$opt" in 
    F) SCRIPT_PATH_STRING=$OPTARG ;;
    f) FILENAME=$OPTARG ;;
    d) DUMP_FILE=1;;
    t) TEMP_FILE=1;;
    v) VER_FILE=1;;
    e) SKIP_SCRIPT_FLG=1;;
    w) WORK_DIR="$OPTARG";;
    W) WORKSPACE_PROFILE="$OPTARG";;
    ?)display_help_and_exit;;
    *)display_help_and_exit;;
  esac
done

if [ "X$SCRIPT_PATH_STRING" == "X" ]; then
  display_help_and_exit "Error: Script String is mandatory argument."
  exit 1
fi

if [ "X$FILENAME" == "X" ]; then
  display_help_and_exit "Error: Tar Name is mandatory argument."
  exit 1
fi

if [ "X$NS_WDIR" == "X" ]; then 
  NS_WDIR=/home/cavisson/work
fi

if [ "X$WORK_DIR" == "X" ]; then
  WORK_DIR=$NS_WDIR
fi

PROJECT=`echo $SCRIPT_PATH_STRING |awk -F '@@' '{print $1}'`
SUB_PROJECT=`echo $SCRIPT_PATH_STRING |awk -F '@@' '{print $2}'`
SCRIPT_NAME=`echo $SCRIPT_PATH_STRING |awk -F '@@' '{print $3}'`

#Check if script is given but sub project is not given ERROR

if [ "X$SCRIPT_NAME" != "X" ]; then
  if [ "X$SUB_PROJECT" == "X" ]; then
    echo "Error: For script name, subproject name is mandatory."
    exit 1
  fi
fi

#All the flags cannot be unselected together
if [ "X$DUMP_FILE" = "X0" -a "X$TEMP_FILE" = "X0" -a "X$VER_FILE" = "X0" -a "X$SKIP_SCRIPT_FLG" = "X0" ];then
  echo "All flags unselected, nothing to create tar"
  exit 1
fi

#************************************************************************************************
check_and_set_workspace_profile $WORKSPACE_PROFILE
set_rta_dir $WORKSPACE $PROFILE
#set absolute test assets path
NS_TA_DIR=$WORK_DIR/$NS_RTA_DIR
#************************************************************************************************

#Check if given project, subproject and scripts are available or not, if not then give error and exit

if [ ! -d $NS_TA_DIR/$PROJECT ]; then
  echo "Error:Given Project $PROJECT is not present at $NS_TA_DIR."
  exit 1
fi

SCRIPT_PATH=$NS_TA_DIR/$PROJECT/$SUB_PROJECT/$SCRIPTS_DIR
#Default tar name will be on project name
echo "$FILENAME" |grep '.tar.gz' >/dev/null 2>&1
if [ $? -ne 0 ];then
  #echo "Changing Tar Name from ${FILENAME} to ${FILENAME} .tar.gz"
  FILENAME=${FILENAME}.tar.gz
fi

TAR_SOURCE=$PROJECT

if [ "X$SUB_PROJECT" != "X" ]; then 
  TAR_SOURCE=$PROJECT/All
  nsu_show_scripts -p $WORKSPACE/$PROFILE/$TAR_SOURCE| grep -w "^$PROJECT"|cut -d'|' -f 2,3,4 >$NS_TA_DIR/$TEXTFILE
  TAR_SOURCE=$PROJECT/*
  #when subproject are given multiple
  echo $SUB_PROJECT |grep '|' >/dev/null
  if [ $? -eq 0 ];then
    SUB_PROJ_ARR=(`echo $SUB_PROJECT | sed 's/|/\n/g'`)
    MULTIPLE_SUBPROJ_FLAG=1
    >$NS_TA_DIR/$TEXTFILE
    for ((i=0; i <${#SUB_PROJ_ARR[@]}; i++))
    do
      if [ ! -d $NS_TA_DIR/$PROJECT/${SUB_PROJ_ARR[$i]} ]; then
        echo "Error: Given sub project ${SUB_PROJ_ARR[$i]} is not present." 
        exit 1
      fi
      TAR_SOURCE_ARRAY[$i]=$PROJECT/${SUB_PROJ_ARR[$i]}/$SCRIPTS_DIR
      nsu_show_scripts -p "$WORKSPACE/$PROFILE/${TAR_SOURCE_ARRAY[$i]}"| sed 1d |cut -d'|' -f 1,2,3 >>$NS_TA_DIR/$TEXTFILE
    done
  #when single subproject is given
  elif [ "X$SUB_PROJECT" != "XALL" ];then
    if [ ! -d $NS_TA_DIR/$PROJECT/$SUB_PROJECT ]; then
      echo "Error: Given sub project $SUB_PROJECT is not present." 
      exit 1
    fi
    TAR_SOURCE=$PROJECT/${SUB_PROJECT}
    nsu_show_scripts -p $WORKSPACE/$PROFILE/$TAR_SOURCE | sed 1d |cut -d'|' -f 2,3,4 >$NS_TA_DIR/$TEXTFILE
  fi
fi

if [ "X$SCRIPT_NAME" != "X" ];then 
  if [ "X$SUB_PROJECT" != "XALL" ];then
    TAR_SOURCE=$PROJECT/${SUB_PROJECT} #ashwini 

    #when multiple scripts are given
    echo $SCRIPT_NAME |grep '|' >/dev/null
    if [ $? -eq 0 ];then
      #when sub projects are multiple
      if [ "X$MULTIPLE_SUBPROJ_FLAG" == "X1" ]; then
        echo "Error: cannot choose multiple scripts for multiple subprojects"
        exit 1
      else
        >$NS_TA_DIR/$TEXTFILE
        SCRIPT_ARR=(`echo $SCRIPT_NAME | sed 's/|/\n/g'`)
        for ((i=0; i <${#SCRIPT_ARR[@]}; i++))
        do
          if [ ! -d $SCRIPT_PATH/${SCRIPT_ARR[$i]} ]; then
            echo "Error: Given sub project ${SCRIPT_ARR[$i]} is not present." 
            exit 1
          fi
          TAR_SOURCE_ARRAY[$i]=$PROJECT/$SUB_PROJECT/$SCRIPTS_DIR/${SCRIPT_ARR[$i]}
          echo "${TAR_SOURCE_ARRAY[$i]}" >>$NS_TA_DIR/$TEXTFILE
        done
      fi

    #when single script, single subproj is given
    elif [ "X$SCRIPT_NAME" != "XALL" ];then
      if [ "X$MULTIPLE_SUBPROJ_FLAG" == "X1" ]; then
        echo "Error: cannot choose single scripts for multiple subprojects"
        exit 1
      else
        if [ ! -d $SCRIPT_PATH/$SCRIPT_NAME ] ; then
          echo "Error: Given script $SCRIPT_NAME is not present." 
          exit 1
        fi
        TAR_SOURCE=$PROJECT/${SUB_PROJECT}/$SCRIPTS_DIR/${SCRIPT_NAME}
        TAR_SOURCE1=$PROJECT\|${SUB_PROJECT}\|${SCRIPT_NAME}
        echo "$TAR_SOURCE1" >$NS_TA_DIR/$TEXTFILE
      fi
    fi
  else 
    if [ "X$SCRIPT_NAME" != "XALL" ]; then
      echo "Error: Cannot choose single or multile scripts for ALL subprojects"
      exit 1
    fi
  fi
fi

#Check which files to exclude Dump, Temp and Version

if [ $DUMP_FILE -eq 0 ]; then
  EXCLUDE_ARG="$EXCLUDE_ARG --exclude dump"
fi

if [ $TEMP_FILE -eq 0 ]; then
  EXCLUDE_ARG="$EXCLUDE_ARG --exclude temp"
fi

if [ $VER_FILE -eq 0 ]; then
  EXCLUDE_ARG="$EXCLUDE_ARG --exclude Version"
fi

if [ "X$SKIP_SCRIPT_FLG" = "X0" ];then
  EXCLUDE_ARG="$EXCLUDE_ARG --exclude *.c --exclude *.java"
fi

cd $NS_TA_DIR

if [ ${#TAR_SOURCE_ARRAY[@]} -eq 0 ]; then
  echo "TAR_SOURCE = $TAR_SOURCE"
 # TAR_SOURCE+="/scripts"  ashwini
  echo "now TAR_SOURCE = $TAR_SOURCE"
  tar --ignore-failed-read -czf $FILENAME $TAR_SOURCE $EXCLUDE_ARG  $TEXTFILE
else
  echo "TAR_SOURCE_ARRAY = ${TAR_SOURCE_ARRAY[@]}"
#  TAR_SOURCE_ARRAY[@]+="/scripts"
  tar --ignore-failed-read -czf $FILENAME ${TAR_SOURCE_ARRAY[@]} $EXCLUDE_ARG $TEXTFILE
fi 

if [ $? != 0 ];then
  echo "Error in making tar file."
  exit 1
fi

echo "Tar file name is : $FILENAME"  
rm -f $TEXTFILE
cd - >/dev/null

exit 0
