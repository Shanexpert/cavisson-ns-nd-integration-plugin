#!/bin/sh

########################################################################################
# Shell       :   neu_ns_db_upload_partition  
# Author      :   
# Descripton  :   This shell will upload data for a partition in the database
#
# Usage       :   ndu_db_upload_partition --testrun --partition
#                 where --testrun is the test run number
#                       --partition is the partition name
########################################################################################

##############
# Functions
##############
usage()
{
  echo ""
  if [ "$1" != "" ]; then
    echo "$1"
    echo ""
  fi
  echo "Usage : "
  echo "  ndu_db_upload_partition <testrun> <partition>"
  echo ""
  echo "  where"
  echo "   testrun is the test run number and is mandatory"
  echo "   partition is the name of the partition and is mandatory"
  echo ""
  
  exit 1
}

#Check the number of arguments
if [ $# != 2 ]; then
  usage "Error: Invalid number of arguments"
fi

#Parse the arguments
TRNUM=$1
PARTITION_NAME=$2

#Checking Test number is valid or not
if [ -d $PWD/TR$1 ]; then
  BASE_DIR=$PWD
elif [ -d $NS_WDIR/logs/TR$1 ]; then
  BASE_DIR=$NS_WDIR/logs
else
  echo "Error: Test run number $1 is not a valid test run number"
  exit 1
fi

DISTRO=$(nsi_get_linux_release_ex -d)
RELEASE=$(nsi_get_linux_release_ex -r)

if [[ $DISTRO == "Ubuntu" &&  $RELEASE -eq 1604 ]];then
  POSTGRESQL_VERSION=9.5
else
  POSTGRESQL_VERSION=9.1
fi

#Check whether partition exists
if [ ! -d $BASE_DIR/TR$TRNUM/$PARTITION_NAME ]; then
  echo "Error: Partition $PARTITION_NAME does not exists in TR$TRNUM"
  exit 1
fi

if [ ! -d $BASE_DIR/TR$TRNUM/$PARTITION_NAME/reports/csv ]; then
  echo "Error: csv directory does not exists"
  exit 1
fi

#Making array for table names and csv file names
TABLE_NAME=("sessionrecord" "transactionrecord" "transpagerecord" "pagerecord" "urlrecord" "pagedumprecord" "orlStatsSnapTable" "orlStatsSQLStmtOrdByElapsedTime" "orlStatsSQLStmtOrdByCPUTime" "orlStatsSQLStmtOrdByUsrIOTime" "orlStatsSQLStmtOrdByGets" "orlStatsSQLStmtOrdByReads" "orlStatsSQLStmtOrdByPhyReadsUnopt" "orlStatsSQLStmtOrdByExec" "orlStatsSQLStmtOrdByParseCalls" "orlStatsSQLStmtOrdBySharableMemory" "orlStatsSQLStmtOrdByVersionCount" "orlStatsSQLStmtOrdByClusterWaitTime" "alerthistory" "alertactions")
CSV_NAME=("src.csv" "trc.csv" "tprc.csv" "prc.csv" "urc.csv" "page_dump.csv" "orlStatsSnapTable.csv" "orlStatsSQLStmtOrdByElapsedTime.csv" "orlStatsSQLStmtOrdByCPUTime.csv" "orlStatsSQLStmtOrdByUsrIOTime.csv" "orlStatsSQLStmtOrdByGets.csv" "orlStatsSQLStmtOrdByReads.csv" "orlStatsSQLStmtOrdByPhyReadsUnopt.csv" "orlStatsSQLStmtOrdByExec.csv" "orlStatsSQLStmtOrdByParseCalls.csv" "orlStatsSQLStmtOrdBySharableMemory.csv" "orlStatsSQLStmtOrdByVersionCount.csv" "orlStatsSQLStmtOrdByClusterWaitTime.csv" "alertHistory.csv" "alertAction.csv")

#Drop the partition table
$NS_WDIR/bin/neu_drop_partition_table $TRNUM $PARTITION_NAME "ALL"

#Create the partition table
$NS_WDIR/bin/neu_ns_create_partition_table $TRNUM $PARTITION_NAME "ALL"

j=0
echo "Starting upload at `date`"

DIR="$BASE_DIR/TR$TRNUM/$PARTITION_NAME/reports/csv/"
for (( j = 0; j < ${#TABLE_NAME[@]}; j++ ))
do
  if [ -f "$DIR/${CSV_NAME[$j]}" ]; then
    if [ "$DISTRO" == "Ubuntu" ];then
      /usr/lib/postgresql/$POSTGRESQL_VERSION/bin/pg_bulkload -d test -U postgres -i "$DIR/${CSV_NAME[$j]}" -O "${TABLE_NAME[$j]}_${TRNUM}_$PARTITION_NAME" -l "/dev/null" -o $'PARSE_ERRORS=-1' -o $'DELIMITER=,' >/dev/null 2>&1
    else
      psql test cavisson <<+
        \COPY ${TABLE_NAME[$j]}_${TRNUM}_$PARTITION_NAME from $DIR/${CSV_NAME[$j]} DELIMITER ',' NULL AS '';
+
    fi
  fi
done

echo "Finished upload at `date`"

#Applying check constraints
echo "Started applying check constraints at `date`"

for (( j = 0; j < 6; j++ ))
do
  TIME=(`psql --user=cavisson -d test -t -c "SELECT MIN(starttime), MAX(endtime) FROM ${TABLE_NAME[$j]}_${TRNUM}_$PARTITION_NAME;"`)
 
  if [ "${TIME[0]}" == "|" ]; then
    echo "Could not apply check constraint as No record found in ${TABLE_NAME[$j]}_${TRNUM}_$PARTITION_NAME table."
  else
    $NS_WDIR/bin/neu_ns_create_check_constraint -TR $TRNUM -PT $PARTITION_NAME -ST "${TIME[0]}" -ET "${TIME[2]}" -CN "${CSV_NAME[$j]}"
  fi
done

echo "Finished applying check constraints at `date`"

echo "Going to analyze tables at `date`"

psql test cavisson <<+
analyze sessionrecord_${TRNUM}_$PARTITION_NAME;
analyze transactionrecord_${TRNUM}_$PARTITION_NAME;
analyze transpagerecord_${TRNUM}_$PARTITION_NAME;
analyze pagerecord_${TRNUM}_$PARTITION_NAME;
analyze urlrecord_${TRNUM}_$PARTITION_NAME;
analyze pagedumprecord_${TRNUM}_$PARTITION_NAME;
analyze alerthistory_${TRNUM}_$PARTITION_NAME;
analyze alertactions_${TRNUM}_$PARTITION_NAME;
+

if [ -f $NS_WDIR/logs/TR${TRNUM}/common_files/.oracle_sql_report ];then
psql test cavisson <<+
analyze orlStatsSnapTable_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByElapsedTime_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByCPUTime_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByUsrIOTime_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByGets_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByReads_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByPhyReadsUnopt_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByExec_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByParseCalls_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdBySharableMemory_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByVersionCount_${TRNUM}_$PARTITION_NAME;
analyze orlStatsSQLStmtOrdByClusterWaitTime_${TRNUM}_$PARTITION_NAME;
+
fi

echo "Finished analyzing tables at `date`"
