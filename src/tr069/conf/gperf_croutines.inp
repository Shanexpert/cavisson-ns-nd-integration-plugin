
// Index to Hash code mapping
extern int IndextoHashArray[];
extern int total_params;


// public interface to the hash() function that gperf makes
//hash is nothing but an index into the hash table
unsigned int
PublicHash (str, len)
     register const char *str;
     register unsigned int len;
{
  return hash (str, len);
}

//convert hash to an index in the original input array

int HashToIndex (unsigned int hash)
{
  int index;
  if (hash <= MAX_HASH_VALUE && hash >= 0)
  {
    if (*(wordlist[hash].name) != 0) {
      index = wordlist[hash].index;
      return (index);
    }
  }
  return(-1);
}

/*take a string  and give its index in the original array using its hash in the hash table
 * this allows us to quickly get to the string w/o searching the array, even when we 
 * have the entire array in memory
 */

int StringToIndex (char *s, unsigned int len)
{
  const struct paramNames *p;
  if ( p = in_word_set(s, len) ) {
    return(p->index);
  }
  return(-1);
}

#ifndef TR069_INDEX_TO_HASH_NOT_DONE
/* convert index in the original array of strings to the string. since we dont have the string, we cant 
 * use the hash. however, the index is stored in the hash table in our case. If we have the orignal array of
 * strings stored in memory, we can access the string directly, and this function is unnecessary.
 */
char *IndexToString (int index)
{
  if(index < 0 || index >= total_params)
  {
    fprintf(stderr, "Error: Invalid index (%d) passed in IndexToString(). Index should be between 0 aand %d\n", index, total_params - 1);
    return NULL;
  }

  return(wordlist[IndextoHashArray[index]].name);
}

int get_total_params()
{
  return(total_params);
}

#endif

//convert hash to the string in the original array

char *HashToString (unsigned int hash)
{
  if (hash <= MAX_HASH_VALUE && hash >= 0)
  {
    if (*(wordlist[hash].name) != 0) {
      return wordlist[hash].name;
    }
  }
  return(NULL);
}

/*
 * index refers to the original array that is passed into gperf
 * given the index, find the corresponding index or hash in the hash table
 */

int IndexToHash (int index)
{
  int i;
  for (i=0; i<= MAX_HASH_VALUE; i++) {
    if (*(wordlist[i].name) && wordlist[i].index== index) 
      return(i);
  }
  return(-1);    //changed to int so we can return -1 
}


#ifdef TEST

main()
{
int idx;

  for(idx = 0; idx < get_total_params(); idx++)
  {
    printf("Parameter Name[%d] = %s\n", idx, IndexToString(idx));
  }

  return(0);
}

#endif


