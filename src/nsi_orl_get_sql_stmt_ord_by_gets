#!/bin/sh

#######################################################################################################
# Name            : nsi_orl_get_sql_stmt_ord_by_gets  
#
# Synopsis        : 
#
#
# Examples        :
# 
# History         : 
#   
# Version 1.0
#   Author        : Ambuj 
#   Date          : 11-June-2014
#
#######################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################
                                                                                                       
# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

usage()
{
  echo
  echo "$*"
  echo
  echo "USAGE:"
  echo "====="
  echo
  echo "$0 --testrun <value> "

  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Missing mandatory option --testrun."
  fi

}

add_select()
{
  if [ "X$SELECT" == "X" ]; then
    SELECT="SELECT $NEWLINE " 
  else
    SELECT="$SELECT, $NEWLINE " 
  fi
}

add_from()
{
  if [ "X$FROM" == "X" ]; then
    FROM="FROM $NEWLINE " 
  else
    FROM="$FROM, $NEWLINE " 
  fi
}

add_where()
{
  if [ "X$WHERE" == "X" ]; then
    WHERE="WHERE $NEWLINE " 
  else
    WHERE="$WHERE $NEWLINE  AND" 
  fi
}


ARGS=$*
if [ "X$1" == "X" ]; then
  usage
fi


########################################################################################
# Parse the arguments
########################################################################################

while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--get_count")
        shift
        chk_args_of_option "--get_count" "$1"
        GET_COUNT=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--abs_starttime")
        shift
        chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--abs_endtime")
        shift
        chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    --*) usage "Invalid option $1";;
    *) usage ;;
  esac
  shift
done

handle_time_filters $TRNUM

if [ "X$ABS_STARTTIME" != "X" -a "X$STARTTIME" != "X" ];then
  usage "Only one of --abs_starttime and --starttime should be supplied"
  exit 1
fi

if [ "X$ABS_STARTTIME" != "X" -a "X$ENDTIME" != "X" ];then
  usage "Only one of --abs_starttime and --endtime should be supplied"
  exit 1
fi

add_select
SELECT="$SELECT orlStatsSnapTable_$TRNUM.SnapBeginID"
SELECT="$SELECT, $NEWLINE  orlStatsSnapTable_$TRNUM.SnapEndID"
SELECT="$SELECT, $NEWLINE  (orlStatsSnapTable_$TRNUM.StartTime + $CAV_EPOCH_TIME)*1000 \"StartTime\""
SELECT="$SELECT, $NEWLINE  (orlStatsSnapTable_$TRNUM.EndTime + $CAV_EPOCH_TIME)*1000 AS \"EndTime\""
SELECT="$SELECT, $NEWLINE  orlStatsSnapTable_$TRNUM.DBID"
SELECT="$SELECT, $NEWLINE  orlStatsSnapTable_$TRNUM.DBName"
SELECT="$SELECT, $NEWLINE  orlStatsSnapTable_$TRNUM.InstNum"
SELECT="$SELECT, $NEWLINE  orlStatsSnapTable_$TRNUM.InstanceName"
SELECT="$SELECT, $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.SnapID"
SELECT="$SELECT, $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.NormSQLID"
SELECT="$SELECT, $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.BufferGets AS \"Buffer Gets\""
SELECT="$SELECT, $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.Executions AS \"Executions\""
SELECT="$SELECT, $NEWLINE  ROUND((CASE WHEN orlStatsSQLStmtOrdByGets_$TRNUM.Executions <> 0 THEN ((orlStatsSQLStmtOrdByGets_$TRNUM.BufferGets / orlStatsSQLStmtOrdByGets_$TRNUM.Executions)) ELSE 0 END), 2) AS \"Gets per Exec\""
SELECT="$SELECT, $NEWLINE  ROUND((CASE WHEN orlStatsSnapTable_$TRNUM.TotalBufferGets <> 0 THEN ((orlStatsSQLStmtOrdByGets_$TRNUM.BufferGets / orlStatsSnapTable_$TRNUM.TotalBufferGets) * 100) ELSE 0 END), 2) AS \"%Total\""
SELECT="$SELECT, $NEWLINE  ROUND(orlStatsSQLStmtOrdByGets_$TRNUM.ElapsedTimeMS / 1000, 2) AS \"Elapsed Time (s)\""
SELECT="$SELECT, $NEWLINE  ROUND((CASE WHEN orlStatsSQLStmtOrdByGets_$TRNUM.ElapsedTimeMS <> 0 THEN ((orlStatsSQLStmtOrdByGets_$TRNUM.CPUTimeMS / orlStatsSQLStmtOrdByGets_$TRNUM.ElapsedTimeMS) * 100) ELSE 0 END), 2) AS \"%CPU\""
SELECT="$SELECT, $NEWLINE  ROUND((CASE WHEN orlStatsSQLStmtOrdByGets_$TRNUM.ElapsedTimeMS <> 0 THEN ((orlStatsSQLStmtOrdByGets_$TRNUM.IOTimeMS / orlStatsSQLStmtOrdByGets_$TRNUM.ElapsedTimeMS) * 100) ELSE 0 END), 2) AS \"%IO\""
SELECT="$SELECT, $NEWLINE  orlStatsSQLIDTable_$TRNUM.SQLID AS \"SQL Id\""
SELECT="$SELECT, $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.SQLModule AS \"SQL Module\""
SELECT="$SELECT, $NEWLINE  SUBSTRING(orlStatsSQLIDTable_$TRNUM.SQLText FROM 1 FOR 32) AS \"SQL Text\""

add_from
FROM="$FROM orlStatsSQLIDTable_$TRNUM"
FROM="$FROM, $NEWLINE  orlStatsSnapTable_$TRNUM"
FROM="$FROM, $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM"

add_where
WHERE="$WHERE orlStatsSQLStmtOrdByGets_$TRNUM.NormSQLID = orlStatsSQLIDTable_$TRNUM.NormSQLID"
WHERE="$WHERE $NEWLINE  AND orlStatsSQLStmtOrdByGets_$TRNUM.DBID = orlStatsSnapTable_$TRNUM.DBID"
WHERE="$WHERE $NEWLINE  AND orlStatsSQLStmtOrdByGets_$TRNUM.InstNum = orlStatsSnapTable_$TRNUM.InstNum"
WHERE="$WHERE $NEWLINE  AND orlStatsSQLStmtOrdByGets_$TRNUM.SnapID = orlStatsSnapTable_$TRNUM.SnapBeginID"

add_orl_stats_time_filter

ORDER="ORDER BY $NEWLINE  orlStatsSnapTable_$TRNUM.DBID"
ORDER="$ORDER,  $NEWLINE  orlStatsSnapTable_$TRNUM.InstNum"
ORDER="$ORDER,  $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.SnapID"
ORDER="$ORDER,  $NEWLINE  orlStatsSQLStmtOrdByGets_$TRNUM.BufferGets DESC"
ORDER="$ORDER,  $NEWLINE  \"%Total\""

if [ "X$LIMIT" != "X" ]; then
  LIMIT="LIMIT $LIMIT"
fi

if [ "X$OFFSET" != "X" ]; then
  OFFSET="OFFSET $OFFSET"
fi

set_query_files $TRNUM

if [ "X$GET_COUNT" != "X1" ]; then
  ns_run_query
else
  FROM="FROM $NEWLINE  ($NEWLINE  $SELECT $NEWLINE$FROM $NEWLINE$WHERE $NEWLINE$GROUP $NEWLINE  ) As \"Total\" "
  SELECT="SELECT $NEWLINE  Count(*) As \"Rows\" "
  WHERE=""
  GROUP=""
  ORDER=""
  ns_run_query
fi

show_query_result

exit 0

