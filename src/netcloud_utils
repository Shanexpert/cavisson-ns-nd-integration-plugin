#!/bin/bash
# Name: netcloud_utils -t <TR> -d -k -c <run command> -d <destination> -f <file name> 
# Purpose: Perform utility commands on generators from controller.
# Author: Gaurav Sharma

#RED=`tput setaf 1`
#GREEN=`tput setaf 2`
#BLUE=`tput setaf 4`
#BOLD=`tput bold`
#RESET=`tput sgr0`

usage()
{ 
  echo "$1"
  echo -e "Usage: netcloud_utils -t <Controller TR> -k -d -s <Scenario used on Controller>"
  echo "[-t]  takes controller TR as input. It is mandatory argument for all except -s"
  echo "[-s]  takes scenario path as proj/subproj/scenario, used with -l to show generators"
  echo "[-k]  to kill test on all generators"
  echo "[-d]  to display whether test running on generators or not"
  echo "[-l]  to show generators list"
  echo "Options Added:"
  echo "[-o]  <operation type 'command|file'> -f <File name/Gen_name:File_name> -D<Dest Path> -c<command name>"
  echo "[-f]  to get file (file op.) from all generators/specific generator on -D <path>"
  echo "[-c]  to run command (command op.) on generator writes output file on -D <path>"
  echo "[-D]  destination path"
  echo "[-u]  Provide User name of test assest"
  echo "[-p]  provide Profile name of test assest" 
  exit 2
}

debug_log()
{
  echo "`date +"%F %X"`|$1" >>$LOG_FILE
}

error_log()
{
  echo "`date +"%F %X"`|$1" >>$ERR_FILE
}

kill_generators_tr()
{ 
  GEN_IP=$1
  GEN_WDIR=$2
  GEN_TRUN=$3
  debug_log "Method kill_generators_tr() called, $GEN_IP|$GEN_WDIR|$GEN_TRUN"
  echo -n "$GEN_IP | "
  nsu_server_admin -i -g -s $GEN_IP -c "nsu_stop_test -f $GEN_TRUN env_var:NS_WDIR=$GEN_WDIR -C \"netcloud_utils\"" >>$LOG_FILE 2>&1
  if [ $? -ne 0 ];then
    echo "Not Running"
  else
    echo "TestRun: '$GEN_TRUN' Stopped"
  fi
}

display_gen_data()
{
  ID=$1
  FLAG=$2
  if [ "X$FLAG" = "X2" ];then
    echo "${Generator_name[$ID]}|${Generator_ip[$ID]}|${Generator_wdir[$ID]}"
  elif [ "X$FLAG" = "X1" ];then
    echo "${Generator_name[$ID]}|${Generator_trun[$ID]}|${Generator_ip[$ID]}|${Generator_wdir[$ID]}"
  else
    debug_log "ERROR: Wrong Input!!!"
    return -1
  fi
}

check_gen_tr_running()
{
  Gen_ip=$1
  Gen_wdir=$2
  Gen_trun=$3
  Gen_index=$4
  data=`nsu_server_admin -i -g -s $Gen_ip -c "$Gen_wdir/bin/nsu_show_netstorm -n $Gen_trun env_var:NS_WDIR=$Gen_wdir"`
  if [ "X$data" = "XActive" ];then
    echo "$Gen_index|Running" >> $tmp_file
  else
    echo "$Gen_index|Not Running" >> $tmp_file
  fi
}

get_gen_data_from_scenario()
{
  scenario_path=$1
  debug_log "Method called get_gen_data_from_scenario(), scenario_path = $scenario_path" 
  grep -w ^NS_GENERATOR $SCENARIO |awk -F ' ' '{print $2}' >$GEN_NAMES 2>/dev/null

  Gen_file=`grep -w ^NS_GENERATOR_FILE $SCENARIO |awk -F' ' '{print $2}'`
  if [ $? != 0 ];then
    #echo "ERROR: Generator file is either not found in scenario file or commented by #"
    Gen_file=$NS_WDIR/etc/.netcloud/generators.dat
    error_log "ERROR: Generator file is either not found in scenario file or commented by #.."
  fi

  if [ ! -f "$Gen_file" ];then
    echo "$Gen_file Generator file not exist!"
    error_log "ERROR: $Gen_file Generator file does not exist."
    rm $GEN_NAMES
    exit 1
  fi
  j=0
  if [ -s "$GEN_NAMES" ];then
    while read line
    do 
      echo "$line" | egrep -v "^#" | egrep -v "^$" >/dev/null
      if [ $? -ne 0 ];then
        continue
      fi
      grep -v "^#" $Gen_file |grep -w -m1 "$line" >/dev/null
      if [ $? -eq 0 ];then
        GET_GEN_LINE=`cat "$Gen_file" |egrep -v "^#" |grep -w -m1 "$line"`
        Generator_name[$j]=`echo "$GET_GEN_LINE" |awk -F'|' '{print $1}'`
        Generator_ip[$j]=`echo "$GET_GEN_LINE" |awk -F'|' '{print $2}'`
        Generator_wdir[$j]=`echo "$GET_GEN_LINE" |awk -F'|' '{print $5}'`
        j=$((j + 1))
      fi
    done<$GEN_NAMES
  fi
  rm $GEN_NAMES
}

get_gen_tr_from_controller_tr()
{
  #CONT_NC_FILE="$NS_WDIR/logs/TR$CONT_TR/NetCloud/NetCloud.data"
  CONT_NC_FILE=$1
  debug_log "Method get_gen_tr_from_controller_tr() called, Netcloud_data file = $CONT_NC_FILE"
  if [ ! -f "$CONT_NC_FILE" ];then
    echo "ERROR: $CONT_NC_FILE file does not exists"
    error_log "ERROR: $CONT_NC_FILE file does not exists:"
    return 1
  fi

  if [ ! -s "$CONT_NC_FILE" ];then
    echo "ERROR: $CONT_NC_FILE file is empty"
    error_log "ERROR: $CONT_NC_FILE file is empty.."
    return 1
  fi

  i=0
  while read line 
  do
    Generator_trun[$i]=`echo $line |awk -F'|' '{print $1}'|awk -F' ' '{print $2}'`
    Generator_name[$i]=`echo $line |awk -F'|' '{print $2}'`
    Generator_ip[$i]=`echo $line |awk -F'|' '{print $6}'| awk -F':' '{print $2}'`
    Generator_wdir[$i]=`echo "$line" | awk -F '|' '{print $5}'`
    Generator_status[$i]="${Generator_ip[$i]} | Not Running"
    i=$((i + 1))
  done<$CONT_NC_FILE
  
   debug_log "Method get_gen_tr_from_controller_tr() end."
  return 0
}

get_file_by_name()
{
  Gen_trun=$1
  Gen_name=$2
  Gen_ip=$3
  Gen_wdir=$4
  file_path=$5
  filename=`basename $file_path`

  debug_log "Method get_file_by_name() called, for $Gen_trun|$Gen_name|$Gen_ip|$Gen_wdir|$file_path|$filename"
   
  nsu_server_admin -i -g -s $Gen_ip -c "file $Gen_wdir/logs/TR$Gen_trun/$file_path env_var:NS_WDIR=$Gen_wdir" >>$LOG_FILE 2>&1
  if [ $? -eq 0 ];then
    nsu_server_admin -i -s $Gen_ip -G "$Gen_wdir/logs/TR$Gen_trun/$file_path" -f "$DEST_DIR"  >>$LOG_FILE
    if [ $? -ne 0 ];then
      error_log "Error: cannot download file $Gen_wdir/TR$Gen_trun/$file_path from $Gen_ip server."
    fi
    
    if [ -f "$DEST_DIR/$filename" ];then
      debug_log "Moving $DEST_DIR/$filename to $DEST_DIR/${Gen_name}_${filename}"
      mv "$DEST_DIR/$filename" "$DEST_DIR/${Gen_name}_${filename}"
    fi
  else
    echo "Error: $Gen_wdir/TR$Gen_trun/$GET_FILE file does not exists for $Gen_name"
    echo "filepath should be relative to TR"
    error_log "Error: $Gen_wdir/TR$Gen_trun/$GET_FILE file does not exists for $Gen_name"
  fi
  debug_log "Method get_file_by_name() end."
}

run_command_on_generator()
{
  Gen_trun=$1
  Gen_name=$2
  Gen_ip=$3
  Gen_wdir=$4
 
  debug_log "Method run_command_on_generator() called, for $Gen_trun|$Gen_name|$Gen_ip|$Gen_wdir|$RUN_CMD|$DEST_DIR"
  
  nsu_server_admin -i -g -s $Gen_ip -c "$RUN_CMD env_var:NS_WDIR=$Gen_wdir" >>"$DEST_DIR/${Gen_name}_output" 2>>$LOG_FILE
  if [ $? != 0 ];then
    error_log "Unable to run command on generator $Gen_name"
  fi
  echo "----------------------------------------------------------------------------------------" >>"$DEST_DIR/${Gen_name}_output"
  debug_log "Method run_command_on_generator() end."
}

GEN_NAMES=$NS_WDIR/gen_names.$$
LOG_FILE=/tmp/netcloud_utils.debug.$$
ERR_FILE=/tmp/netcloud_utils.error.$$
if [ ! -f ${LOG_FILE} ]; then
  touch ${LOG_FILE}
fi

if [ ! -f ${ERR_FILE} ]; then
  touch ${ERR_FILE}
fi

>$LOG_FILE
>$ERR_FILE

KILL_FLG=0
DISPLAY_FLG=0
GEN_TR_RUN_FLG=0
FLG=0
OPERATION=""
WAIT_TIME=60

while getopts t:s:c:f:D:o:u:p:w:kdl? ch
do
  case $ch in
    t) TR_NUM="$OPTARG" 
       FLG=1 ;;
    s) SCEN_PATH="$OPTARG" 
       FLG=2 ;;
    k) KILL_FLG=1 ;;
    l) DISPLAY_FLG=1 ;;
    d) GEN_TR_RUN_FLG=1 ;;
    o) OPERATION="$OPTARG" ;; 
    f) GET_FILE="$OPTARG" ;;
    D) DEST_DIR="$OPTARG" ;;
    c) RUN_CMD="$OPTARG" ;;
    u) USER_NAME="$OPTARG";;
    p) PROFILE_NAME="$OPTARG";;
    w) WAIT_TIME="$OPTARG";;
    *) usage "Invalid argument" ;;
   esac
done

if [ "XX" = "XX$NS_WDIR" ];then
  echo "ERROR: NS_WDIR env must be defined"
  exit 1
fi

if [ $OPTIND -le 3 ];then
  usage "Atleast 2 argument required"
fi

if [ "XX$TR_NUM" != "XX" -a "XX$SCEN_PATH" != "XX" ];then
  usage "Both -t and -s option cannot be given together."
fi

if [ "XX$USER_NAME" == "XX" ];then
  USER_NAME="admin"
fi

if [ "XX$PROFILE_NAME" == "XX" ];then
  PROFILE_NAME="default" 
fi

if [ "XX$TR_NUM" != "XX" ];then
  #check TR_NUM is an integer or not
  echo $TR_NUM |egrep '^[0-9]+$' >/dev/null
  if [ $? != 0 ];then
    echo "Test Run Number ($TR_NUM) can be Integer only."
    exit 1
  fi

  get_gen_tr_from_controller_tr "$NS_WDIR/logs/TR${TR_NUM}/NetCloud/NetCloud.data"
fi

if [ "XX$SCEN_PATH" != "XX" ];then
  NUM=`echo $SCEN_PATH |awk -F "/" '{print NF}'`
  NS_RTA_DIR="workspace/$USER_NAME/$PROFILE_NAME/cavisson"
  PRO_SUBPROJ=`dirname $SCEN_PATH`
  SCEN_NAME=`basename $SCEN_PATH`
  if [ $NUM == 1 ];then
    SCENARIO=$NS_WDIR/$NS_RTA_DIR/default/default/scenarios/$SCEN_NAME
  elif [ $NUM == 3 ];then
    SCENARIO=$NS_WDIR/$NS_RTA_DIR/$PRO_SUBPROJ/scenarios/$SCEN_NAME
  else
    echo "Error: '<Project>/<SubProject>/scenarios/<ScenarioName>' is not given in proper format."
    error_log "'<Project>/<SubProject>/scenarios/<ScenarioName>' is not given in proper format."
    exit 1
  fi

  if [ ! -f "$SCENARIO" ];then
     echo "ERROR: $SCENARIO scenario does not exists.."
     exit 1
  fi
 
  if [ ! -s "$SCENARIO" ];then
     echo "ERROR: $SCENARIO scenario file is empty.."
     exit 1
  fi

  if [ "X$DISPLAY_FLG" = "X0" ];then
    usage "-l is mandatory argument with -s"
  fi

  get_gen_data_from_scenario $SCEN_PATH
fi

if [ "X$DISPLAY_FLG" = "X1" ];then
  for (( i=0; i<${#Generator_name[@]}; i++ ))
  do
    display_gen_data $i $FLG
  done
fi

if [ "X$GEN_TR_RUN_FLG" = "X1" -a "X$FLG" = "X1" ];then
  tmp_file="/tmp/.netcloud_utils.$$"
  touch $tmp_file
  for (( i=0; i<${#Generator_name[@]}; i++ ))
  do
    check_gen_tr_running ${Generator_ip[$i]} ${Generator_wdir[$i]} ${Generator_trun[$i]} $i &
  done

  retry_count=0
  while [ ${retry_count} -lt $((WAIT_TIME)) ]
  do
    status_count=`cat $tmp_file |wc -l`
    if [ ${status_count} -lt ${#Generator_name[@]} ];then
      sleep 1
      retry_count=`expr ${retry_count} + 1`
    else
      break
    fi
  done

  while read line
  do
    g_index=`echo $line|cut -d '|' -f1`
    g_status=`echo $line|cut -d '|' -f2`
    Generator_status[$g_index]="${Generator_ip[$g_index]} | ${g_status}"
  done<$tmp_file

  for (( i=0; i<${#Generator_name[@]}; i++ ))
  do
    echo ${Generator_status[$i]}
  done
  rm $tmp_file
fi

if [ "X$KILL_FLG" = "X1" -a "X$FLG" = "X1" ];then
  for (( i=0; i<${#Generator_name[@]}; i++ ))
  do
    kill_generators_tr ${Generator_ip[$i]} ${Generator_wdir[$i]} ${Generator_trun[$i]}
  done
fi

#operation to get file from the generators
if [ "X$OPERATION" = "Xfile" -a "X$FLG" = "X1" ];then
  if [ ! -n "$GET_FILE" ];then
    echo "Error: Argument missing, -f <filepath from TR> required"
    error_log "Argument missing, requires -f <filepath from TR>"
    exit 1
  fi 

  if [ ! -n "$DEST_DIR" ];then
    echo "Error: Argument missing, requires -D <destination>"
    error_log "Argument missing, requires -D <destination>"
    exit 1
  fi

  debug_log "operation = $OPERATION, cmd = $GET_FILE, dest = $DEST_DIR"
  echo $GET_FILE | grep -o ':' >/dev/null
  if [ $? -eq 0 ];then
    specific_gen=`echo $GET_FILE |awk -F ':' '{print $1}'`
    specific_file=`echo $GET_FILE |awk -F ':' '{print $2}'`
    for (( i=0; i<${#Generator_name[@]}; i++ ))
    do
      if [ -n $specific_gen -a "X${Generator_name[$i]}" = "X$specific_gen" ];then
        get_file_by_name ${Generator_trun[$i]} ${Generator_name[$i]} ${Generator_ip[$i]} ${Generator_wdir[$i]} $specific_file
        exit 0
      fi
    done
  else
    for (( i=0; i<${#Generator_name[@]}; i++ ))
    do
      get_file_by_name ${Generator_trun[$i]} ${Generator_name[$i]} ${Generator_ip[$i]} ${Generator_wdir[$i]} $GET_FILE
    done
  fi
#run command on every generator and store its output in output file
elif [ "X$OPERATION" = "Xcommand" ];then
  if [ ! -n "$RUN_CMD" ];then
    echo "Error: Argument missing, requires -c <command>"
    error_log "Argument missing, requires -c <command>"
    exit 1
  fi

  if [ ! -n "$DEST_DIR" ];then
    echo "Error: Argument missing, requires -D <destination>."
    error_log "Argument missing, requires -D <destination>."
    exit 1
  fi

  debug_log "operation = $OPERATION, cmd = $RUN_CMD, dest = $DEST_DIR"
  for (( i=0; i<${#Generator_name[@]}; i++ ))
  do
    run_command_on_generator ${Generator_trun[$i]} ${Generator_name[$i]} ${Generator_ip[$i]} ${Generator_wdir[$i]}
  done
else
  if [ -n "$OPERATION" ];then
    echo "Error: Wrong Operation, -o <file|command>"
    error_log "Wrong Operation!!"
    exit 1
  fi
fi

pkill -g $$ &
exit 0
