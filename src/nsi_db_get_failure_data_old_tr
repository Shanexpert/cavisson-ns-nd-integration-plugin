#!/bin/bash

#######################################################################################################
# Name   : nsi_db_get_failure_data
# Example:
# Initial version : --
#   Author: --
#   Date: --
# Modified version:
#   Author: Nikita Pandey
#   Date: 15 April 2012
#   Modification Details:
#     (1) Change input style.
#           Synatx Before change input style--
#             nsi_db_get_failure_data <TR-NUM> <select-fields> <obj-type> <group-by> <[limit]> <[offset]>
#         Synatx After change input style--
#          nsi_db_get_failure_data --testrun <value> --field <value> --object <value> --group <value> [--runphase <value>]
#                        [-limit <limit>] [-offset <value>][--script <value>] [--starttime <value>] [--endtime <value>]
#                        [--responsetime <value>] [--resptimeqmode <value>] [--status <value>]
#           Note: here bracket [] show agrument is optional, and bracket <> show argument value
#     (2) Example
#       nsi_db_get_failure_data --testrun 11642 --object 0 --object_id -1 --location All --access All --runphase 0 --script 0 --starttime 0 --endtime 100000 --resptimeqmode 1 --responsetime 100
#########################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

# Set default values of variables
TRNUM=""
OBJECT=""
OBJECT_IDX=-1
LOCATION="All"
ACCESS="All"
BROWSER="All"
#RUNPHASE=""
STATUS=-1
SCRIPT=""
TRANS=""
PAGE=""
URL=""
STARTTIME_SEL=0
ENDTIME_SEL=0
RESPONSETIME_SEL=0
RESPTIMEQMODE_SEL=0
PHASEIDX_SEL=0
DEBUG=0 # 0 --> off
        # 1 --> on
#RPO=0
SELECT="select"

########################################################################
#                       Functions's Definitions
#######################################################################
debug_logs()
{
  if [ "X$DEBUG" != "X0" ];then
    echo "$*"
  fi
}

#nsi_db_get_failure_data --testrun 11642 --object 0 --location London --access Cable --script hpd_tours_DrillDownReporting --trans TxWithNoPageThkTm --page index.html --resptimeqmode 1 --responsetime 20
usage()
{
  echo "$*"
  echo "$0 --testrun <value> --object <value> --object_id <value> --location <value> --access <value> --script <value> --starttime <value> --endtime <value> --resptimeqmode <value> --responsetime <value> --status <value> --trans <value> --page <value> --url <value> --phaseidx<value> --browser<value>"
  echo ""
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --object can be 0,1,2 or 3, which is mandatory argument."
  echo "  --object_id -1: All , otherwise obj-id, which is mandatory argument."
  echo "  --limit is for limit (This is the number of results returned by query statment (e.g. 10 it will show first 10 records)), which is optional argument"
  echo " --offset is for offset (This is used to skip rows as specified by offset (e.g suppose you wanted to show results 11-20 then you can use offset 10)), which is optional argument"
  echo "  --location is for particular location selection, which is optional argument"
  echo "  --phaseidx is for particular phase selection, which is optional argument"
  echo "  --browser is for particular browser selection, which is optional argument"
  echo "  --access is for particular access selection, which is optional argument"
  echo "  --status is selecting particular staus (status is 0 for Success only, positive for the Failure code, -1 for all failures -2 for All (Success and all failures)), which is optional argument"
  echo "  --script is for selecting particular script result, which is optional argument"
  echo "  --trans is for selecting particular transaction result, which is optional argument"
  echo "  --page is for selecting particular page result, which is optional argument"
  echo "  --url is for selecting particular url result, which is optional argument"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, which is optional argument."
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is optional argument."
  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
  fi
  #if [ "X$OBJECT_IDX" == "X" ]; then
  #  usage "field selection is missing"
  #fi
  if [ "X$OBJECT" == "X" ]; then
    usage "object type is missing"
  fi
}

########################################################################
#                            calling functions
########################################################################

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    echo "Option $1 required a value."
    usage
    exit -1
  fi
}

#args: TR-NUM obj-type obj location access
if [ "X$1" == "X" ];then
  usage
fi

while [ "$1" != "" ];do
  debug_logs "ARGS=$1"
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--object")
        shift
        chk_args_of_option "--object" "$1"
        OBJECT=$1;;
    "--object_id")
        shift
        chk_args_of_option "--object_id" "$1"
        OBJECT_IDX=$1;;
    "--location")
        shift
        chk_args_of_option "--location" "$1"
        LOCATION=$1;;
    "--access")
        shift
        chk_args_of_option "--access" "$1"
        ACCESS=$1;;
    "--browser")
        shift
        chk_args_of_option "--browser" "$1"
        BROWSER=$1;;
    #"--runphase")
    #    shift
    #    chk_args_of_option "--runphase" "$1"
    #    RUNPHASE=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--script")
        shift
        chk_args_of_option "--script" "$1"
        SCRIPT=$1;;
    "--page")
        shift
        chk_args_of_option "--page" "$1"
        PAGE=$1;;
    "--trans")
        shift
        chk_args_of_option "--trans" "$1"
        TRANS=$1;;
    "--url")
        shift
        chk_args_of_option "--url" "$1"
        URL=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME_SEL=1
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME_SEL=1
        ENDTIME=$1;;
    "--abs_endtime")
        shift
        chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    "--abs_starttime")
        shift
        chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--responsetime")
        shift
        chk_args_of_option "--responsetime" "$1"
        RESPONSETIME_SEL=1
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
        chk_args_of_option "--resptimeqmode" "$1"
	RESPTIMEQMODE_SEL=1
        RESPTIMEQMODE=$1;;
    "--responsetime2")
        shift
        chk_args_of_option "--responsetime2" "$1"
        RESPONSETIME2=$1;;
    "--status")
        shift
        chk_args_of_option "--status" "$1"
        STATUS=$1;;
     "--phaseidx")
        shift
        chk_args_of_option "--phaseidx" "$1"
        PHASEIDX_SEL=1
        PHASEIDX=$1;;
     "--generatorid")
        shift
        chk_args_of_option "--generatorid" "$1"
        GENERATORID=$1;;

    --*) usage "Invalid options";;
    *) usage ;;
  esac
  shift
done

debug_logs "TRNUM = $TRNUM, OBJECT = $OBJECT, OBJECT_IDX = $OBJECT_IDX, RUNPHASE=$RUNPHASE, ACCESS = $ACCESS, LOCATION = $LOCATION"

handle_time_filters $TRNUM

#Cheking mantatory arguments
#chk_args

set_query_files $TRNUM

#if [ "X$RUNPHASE" != "X" ];then
#  RPO=$RUNPHASE
#fi

#NEED_SESS_REC=1

#if [ "X$LOCATION" == "XAll" -a "X$ACCESS" == "XAll" -a  "X$BROWSER" == "XAll" ];then
#  NEED_SESS_REC=0
#fi
 
# Check if limit argument is given or not. It will limit number of rows to max this number
if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

# Check if Offset argument is given or not. This is used to skip rows as specified by offset.
# For example, if offset is 1, then first row is skipped. If offset is 100, then first 100 rows are skipped
if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi
if [ $OBJECT -eq 0 ];then
  OBJ="UrlRecord_$TRNUM"
  IDX="UrlIndex"
  URLRECORD_TABLE_FLAG=1
elif [ $OBJECT -eq 1 ];then
  OBJ="PageRecord_$TRNUM"
  IDX="PageIndex"
  PAGERECORD_TABLE_FLAG=1
elif [ $OBJECT -eq 2 ];then
  OBJ="TransactionRecord_$TRNUM"
  IDX="TransactionIndex"
  TRANSACTIONRECORD_TABLE_FLAG=1
elif [ $OBJECT -eq 3 ];then
  OBJ="SessionRecord_$TRNUM"
  IDX="SessionIndex"
  SESSIONRECORD_TABLE_FLAG=1
else
  echo "ERROR:Undefined object-type $OBJECT, valid values 0-3"
  exit 1
fi

SELECT="SELECT $OBJ.Status AS \"Failure Type\", count(*) As \"Number Of Failures\""
FROM="FROM $OBJ"
WHERE="WHERE $OBJ.Status != 0"
GROUP="GROUP BY $OBJ.Status"

if [ $OBJECT_IDX -ne -1 ];then
    WHERE="$WHERE AND $OBJ.$IDX = $OBJECT_IDX"
fi

if [ "X$LOCATION" != "XAll" -a "X$ACCESS" != "XAll" -a  "X$BROWSER" != "XAll"  -a $OBJECT -ne 3 ];then
        WHERE="$WHERE AND $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance
        AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex" 
       FROM="$FROM,  SessionRecord_$TRNUM"
       SESSIONRECORD_TABLE_FLAG=1
fi

#Add Location/Access/Browser
if [ "X$LOCATION" != "XAll"  -a "X$LOCATION" != "XNO" ];then
    WHERE="$WHERE AND Location = ""'"$LOCATION"'"
fi

if [ "X$ACCESS" != "XAll" -a "X$ACCESS" != "XNO" ];then
    WHERE="$WHERE AND Access = ""'"$ACCESS"'"
fi

if [ "X$BROWSER" != "XAll" -a "X$BROWSER" != "XNO" ];then
    WHERE="$WHERE AND BROWSER = ""'"$BROWSER"'"
fi

#Add Phase index Selection
if [ $PHASEIDX_SEL -eq 1 ];then
  WHERE="$WHERE AND $OBJ.PhaseIndex = $PHASEIDX"
fi

set_where()
{
  if [ "XX$WHERE" != "XX" ];then
    WHERE="$WHERE AND"
  else
    WHERE="WHERE"
  fi
}


#Add status selection
NOF=`echo $STATUS |awk -F ',' '{print NF}'`
if [ $NOF -gt 1 ];then
  set_where
  WHERE="$WHERE $OBJ.Status in ($STATUS)"
else
  if [ $STATUS -eq -1 ];then
    set_where
    WHERE="$WHERE $OBJ.Status > 0"
  elif [ $STATUS -ne -2 ];then
    set_where
    WHERE="$WHERE $OBJ.Status = $STATUS"

  fi
fi



#Add Script selection

if [ "X$SCRIPT" != "X" ];then
  set_where
  WHERE="$WHERE SessionTable_$TRNUM.sessionindex= SessionRecord_$TRNUM.sessionindex AND SessionTable_$TRNUM.SessionName = ""'"$SCRIPT"'"
  FROM="$FROM,SessionTable_$TRNUM"

  if [ $OBJECT -ne 3 ];then
    FROM="$FROM,SessionRecord_$TRNUM"     
    SESSIONRECORD_TABLE_FLAG=1
  fi
fi

if [ "X$TRANS" != "X" ];then
  set_where
  WHERE="$WHERE TransactionTable_$TRNUM.TransactionName = ""'"$TRANS"'"
  set_where
  #WHERE="$WHERE TransactionTable_$TRNUM.TransactionIndex = TransactionRecord_$TRNUM.TransactionIndex"
  WHERE="$WHERE TransactionTable_$TRNUM.TransactionIndex = $OBJ.TransactionIndex"
  FROM="$FROM, TransactionTable_$TRNUM"
fi

#Add page selection
if [ "X$PAGE" != "X" ];then
  set_where
  WHERE="$WHERE  PageTable_$TRNUM.PageName = ""'"$PAGE"' " #AND PageTable_$TRNUM.PageIndex = PageRecord_$TRNUM.PageIndex"
  FROM="$FROM, PageTable_$TRNUM"
  if [ $OBJECT -ne 0 ];then
    WHERE=" $WHERE AND PageTable_$TRNUM.PageIndex = PageRecord_$TRNUM.PageIndex"
    if [ $OBJECT -ne 1 ]; then
      FROM="$FROM, PageRecord_$TRNUM"
      PAGERECORD_TABLE_FLAG=1
    fi
  fi
  if [ $OBJECT -eq 0 ];then
    WHERE="$WHERE AND PageTable_$TRNUM.PageIndex = UrlRecord_$TRNUM.PageIndex"
  fi
    
fi

#Add Url selection
if [ "X$URL" != "X" ];then
  FROM="$FROM,URLTable_$TRNUM"
  WHERE="$WHERE AND URLTable_$TRNUM.URLName = ""'"$URL"'"
fi



#if [ $SCRIPT -ge 0 ];then
#  set_where
#  WHERE="$WHERE  $OBJ.SessionIndex = $SCRIPT"
#fi

# match with other tables present
if [ "X$STARTTIME" != "X" -o "X$ENDTIME" != "X" -o "X$ABS_STARTTIME" != "X" -o "X$ABS_ENDTIME" != "X" ]; then
  timestamp_filter_match
fi

#if [ $STARTTIME -ge 0 -a $ENDTIME -ge 0 ];then
##  set_where
#  WHERE="$WHERE  ($OBJ.StartTime > $STARTTIME AND $OBJ.EndTime < $ENDTIME)"
#fi


#Add response time selection
if [ $RESPTIMEQMODE_SEL -eq 1 -a $RESPONSETIME_SEL -eq 1 ];then
  if [ $RESPTIMEQMODE -eq 1 ];then
    set_where
    WHERE="$WHERE ($OBJ.RespTime) <= $RESPONSETIME"
  elif [ $RESPTIMEQMODE -eq 2 ];then
    set_where
    WHERE="$WHERE ($OBJ.RespTime) >= $RESPONSETIME"
  elif [ $RESPTIMEQMODE -eq 3 ];then
    set_where
    WHERE="$WHERE ($OBJ.RespTime) >= $RESPONSETIME AND ($OBJ.RespTime) <= $RESPONSETIME2"
  fi
fi

if [ "X$GENERATORID" != "X" ]; then
  FROM="$FROM, $NEWLINE  GeneratorTable_$TRNUM"
  set_where
  WHERE="$WHERE $OBJ.GeneratorId = GeneratorTable_$TRNUM.GeneratorId"
  WHERE="$WHERE  AND GeneratorTable_$TRNUM.GeneratorId = $GENERATORID"
fi

log_query
run_query
show_query_result

exit 0
