#shell makes the tar of macys backup
# back $NS_WDIR/workspace dir
############################################################################



  if [ $# != 1 ]; then
    echo "Please specify back-up type"
      exit 0
  fi

####################################################################################################
WORKSPACE="workspace"
CORRELATION="workspace/admin/default/correlation"
####################################################################################################
BACKUP_TYPE=$1

CUR_DATE=`date +%m%d%y`
CUR_DATE_FORMATED=`date +%m/%d/%y`
CUR_TIME=`date +%H:%M:%S`
CUR_MACH=`uname -n`
#CUR_PATH=`pwd`

SLEEP_TIME_FOR_RETRY=300
if [ "XX$1" == "XXNS" ];then
  CUR_PATH="$NS_WDIR"
  WORKSPACE="workspace"
elif [ "XX$1" == "XXNO" ];then
  CUR_PATH="$HPD_ROOT"
  wrk_dir=`dirname $CUR_PATH` 
  CORRELATION="${wrk_dir}/workspace/admin/default/correlation"
  correlation_dir=`readlink ${CORRELATION}`
  CORRELATION=${wrk_dir}/workspace/admin/default/${correlation_dir}
elif [ "XX$1" == "XXTR" ];then
  CUR_PATH="$NS_WDIR/logs"  
fi

export TEMP_FILE=/tmp/ns_backup.tmp.$$

BACKUP_DIR=$CUR_PATH/backups

TAR_FILE_NAME=$BACKUP_DIR/${BACKUP_TYPE}_backup.$CUR_MACH.$CUR_DATE.tar.gz
export BACK_LOG_FILE=$BACKUP_DIR/${BACKUP_TYPE}_backup.$CUR_MACH.$CUR_DATE.log

export SYS_FILE_BACKUP_DIR=sysfilesbak
SYS_FILES="/etc/hosts /etc/rc.local /etc/resolv.conf /etc/sysconfig/network-scripts/*"

#We need to get shell/file from server and copy here
export SERVER_FILE_BACKUP_DIR=serverbak

mkdir -p $CUR_PATH/backups

#########################################################################
## Function defind area
#########################################################################
function log()
{
  echo $* >> $BACK_LOG_FILE
}



function log_and_show()
{
  echo $* >> $BACK_LOG_FILE
  echo $*
}

function show()
{
  echo $*
}

#EMAIL_LIST=mcom.performance@macys.com
EMAIL_LIST=neeraj@cavisson.com

# need to setup mail in all NS/NO machines
function send_mail()
{
SUBJECT="$CUR_MACH: $BACKUP_TYPE backup alert ($CUR_DATE_FORMATED $CUR_TIME) - $*"
  #mail -s "$SUBJECT" $EMAIL_LIST

  #echo "Mail to be send for $SUBJECT"

}

function exit_backup()
{
  log_and_show "Exiting backup"
  exit -1
}
#log_and_show "Starting $BACKUP_TYPE backup at `date`"

#Note that /etc/rc.local -> rc.d/rc.local

#Copy all important system files in backup dir so that
# we can take backup of these files
function copy_sys_file()
{
  log_and_show "Copying system files to $SYS_FILE_BACKUP_DIR"

  mkdir -p $SYS_FILE_BACKUP_DIR
 
  cp $SYS_FILES $SYS_FILE_BACKUP_DIR
  ifconfig -a > $SYS_FILE_BACKUP_DIR/ifconfig_a.txt
  netstat -anr > $SYS_FILE_BACKUP_DIR/netstat_anr.txt
  df > $SYS_FILE_BACKUP_DIR/df.txt
  free > $SYS_FILE_BACKUP_DIR/free.txt
  uname -a > $SYS_FILE_BACKUP_DIR/uname_a.txt
  cat /proc/cpuinfo > $SYS_FILE_BACKUP_DIR/cpu_info.txt
}


#DF_EXCLUDE_LIST
DF_FREE_ALERT=90

function check_disk_space()
{

DF_FILE=/tmp/df_file.$$

  log_and_show "Checking disk space"
  if [ "$DF_EXCLUDE_LIST" != "" ] ; then
    df -PH | grep -vE "^Filesystem|tmpfs|cdrom|${DF_EXCLUDE_LIST}" | awk '{print $5 " " $6}' > $DF_FILE
  else
    df -PH | grep -vE "^Filesystem|tmpfs|cdrom" | awk '{print $5 " " $6}' > $DF_FILE
  fi

  while read output
  do
    #echo $output
    pct_used=$(echo $output | awk '{ print $1}' | cut -d'%' -f1)
    partition=$(echo $output | awk '{print $2}')
    if [ $pct_used -ge $DF_FREE_ALERT ] ; then
     log_and_show "Running out of space in file system partition $partition, pct used = ${pct_used}%"
     send_mail "Running out of space in file system partition $partition, pct used = ${pct_used}%"
     exit_backup
    fi
  done < $DF_FILE

  rm -f $DF_FILE
}



function check_if_tr_running()
{

  log_and_show "Checking if any test is running or not"
  while [ 1 ]
  do
    RUNNING_TEST=`$NS_WDIR/bin/nsu_show_netstorm | awk '{print $1}' |  grep -v "TestRun" 2> /dev/null`
    if [ $? == 0 ];then
      log_and_show "Following Test Run(s) are running:"
      log_and_show $RUNNING_TEST
      log_and_show "Sleeping for $SLEEP_TIME_FOR_RETRY seconds"

      send_mail "Test run is running. Will retry after $SLEEP_TIME_FOR_RETRY seconds"

      sleep $SLEEP_TIME_FOR_RETRY
    else
      break
    fi
  done

}

function make_tar_file()
{
  log_and_show "Making tar file. It may take time, please wait ..."

  #if ns
   if [ $1 == "NS" ]; then
   cd $NS_WDIR
  log_and_show "Making tar file for ${BACKUP_TYPE}... It may take time, please wait ..."
  
  ####
  #  first check all the dir if does not exeist do not put into tar cmd .. Nikita
  #  
  ####
  #ALL_BKP_DIRS="scenarios webapps/scripts sys mprof templates users server data macys $SYS_FILE_BACKUP_DIR $SERVER_FILE_BACKUP_DIR"
  ALL_BKP_DIRS="" 
  if [ -d "${WORKSPACE}" ];then
    ALL_BKP_DIRS="$ALL_BKP_DIRS ${WORKSPACE}"
  else
    echo "Creating successfully but this file $NS_WDIR/${WORKSPACE} does not exist"
    #exit 1
  fi
  
  if [ -d sys ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS sys"
   else
     echo " Creating successfully but this file $NS_WDIR/sys does not exist"
     #exit 1
  fi
  
  if [ -d mprof ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS mprof"
  else
    echo "Creating successfully but this file $NS_WDIR/mprof does not exist"
   # exit 1
  fi
  
  if [ -d templates ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS templates"
  else
     echo "Creating successfully but this file $NS_WDIR/templates does not exist"
    # exit 1
  fi
  
  if [ -d users ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS users"
  else
     echo "Creating successfully but this file $NS_WDIR/users does not exist"
     #exit 1
  fi

  if [ -d server ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS server"
  else
      echo "Creating successfully but this file $NS_WDIR/server does not exist"
      #exit 1
  fi
  
  if [ -d data ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS data"
  else 
     echo "Creating successfully but this file $NS_WDIR/data does not exist"
     #exit 1
  fi

  if [ -d macys ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS macys"
  else
     echo "Creating successfully but this file $NS_WDIR/macys does not exist"
    # exit 1
  fi
   
  if [ -d $SYS_FILE_BACKUP_DIR ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS $SYS_FILE_BACKUP_DIR"
  else
     echo " Creating successfully but this file $NS_WDIR/$SYS_FILE_BACKUP_DIR  does not exist"
     #exit 1
  fi

  if [ -d $SERVER_FILE_BACKUP_DIR ];then
     ALL_BKP_DIRS="$ALL_BKP_DIRS $SERVER_FILE_BACKUP_DIR"
  else
    echo "Creating successfully but this file $NS_WDIR/$SERVER_FILE_BACKUP_DIR does not exist"
    #exit 1
  fi
  

  tar cvzf $TAR_FILE_NAME $ALL_BKP_DIRS >> $BACK_LOG_FILE 2>&1

  #else no
  else
  if [ $1 == "NO" ]; then
    cd $HPD_ROOT
    log_and_show "Making tar file for ${BACKUP_TYPE}... It may take time, please wait ..."
    if [ ! -d conf -o ! -d ${CORRELATION} -o ! -d control ]; then 
    echo "one of the file from conf ${CORRELATION} control  does not exist ";
      exit 1
    fi
    #correlation is soft link to cavisson dir
    tar cvzf $TAR_FILE_NAME conf ${CORRELATION} control >> $BACK_LOG_FILE 2>&1
 #else tr
   else
    if [ $1 == "TR" ]; then
   log_and_show "Making tar file for ${BACKUP_TYPE}... It may take time, please wait ..."
  FILE_NAMES=`find $NS_WDIR/logs/ -name summary.top -exec grep -H "|R|"  '{}' \; | awk -F'/summary.top:' '{printf " "$1}'`
  if [ "xx$FILE_NAMES" == "xx" ]; then
     echo "there is no TR which has the  read only property ";
     exit 1
  fi
  tar cvzf $TAR_FILE_NAME $FILE_NAMES
  fi
 fi
fi
  if [ $? != 0 ]
  then
    send_mail "Error in making backup tar file"
    exit_backup
  fi
}

#function delete_old_file()
#{
#log_and_show "Deleting backup files older than 60 days"
#find $BACKUP_DIR -mtime +60 >$TEMP_FILE  ##find list of older files
#if [ $? != 0 ];then
#  log_and_show "Error in finding older file.."
#else
  #log_and_show "path is in $TEMP_FILE"
#fi

#while read line
#do
#  log_and_show "Deleting $line"
#  rm -r $line           ##remove the older file before 2 months
#done < $TEMP_FILE

#rm -f $TEMP_FILE

#send_mail "Backup done - $TAR_FILE_NAME"
#}
#

############################################################

#cd $NS_WDIR

     if [ $BACKUP_TYPE == "ns" -o $BACKUP_TYPE == "NS" ]; then
       check_if_tr_running
       send_mail "Starting backup"
       check_disk_space
       copy_sys_file
       make_tar_file "NS"
       log_and_show ""
       log_and_show "Backup and log file names are:"
       log_and_show "`ls -lh $TAR_FILE_NAME`"
       log_and_show "`ls -lh $BACK_LOG_FILE`"
       log_and_show ""
       log_and_show "Please copy backup file to Netocean machine using following command"

#TODO: Automate using expect/pexpect shell
       log_and_show "scp $TAR_FILE_NAME netstorm@$<NO_IP>:$BACKUP_DIR"
       log_and_show ""
       log_and_show "Backup done"
       send_mail "Backup done - $TAR_FILE_NAME"
       #delete_old_file
       exit 0
  else
    if [ $BACKUP_TYPE == "no" -o $BACKUP_TYPE == "NO" ]; then
       send_mail "Starting backup"
       check_disk_space
       make_tar_file "NO"
       log_and_show ""
       log_and_show "Backup and log file names are:"
       log_and_show "`ls -lh $TAR_FILE_NAME`"
       log_and_show "`ls -lh $BACK_LOG_FILE`"
       log_and_show ""
       log_and_show "Please copy backup file to Netocean machine using following command"
#TODO: Automate using expect/pexpect shell
       log_and_show "scp $TAR_FILE_NAME netstorm@$<NO_IP>:$BACKUP_DIR"
       log_and_show ""
       log_and_show "Backup done"
       send_mail "Backup done - $TAR_FILE_NAME"
       #delete_old_file
       exit 0
  else
    if [ $BACKUP_TYPE == "tr" -o $BACKUP_TYPE == "TR" ]; then


   check_if_tr_running
       send_mail "Starting backup"
       check_disk_space
       make_tar_file "TR"
       log_and_show ""
       log_and_show "Backup and log file names are:"
       log_and_show "`ls -lh $TAR_FILE_NAME`"
       log_and_show "`ls -lh $BACK_LOG_FILE`"
       log_and_show ""
       log_and_show "Please copy backup file to Netocean machine using following command"
#TODO: Automate using expect/pexpect shell
       log_and_show "scp $TAR_FILE_NAME netstorm@$<NO_IP>:$BACKUP_DIR"
       log_and_show ""
       log_and_show "Backup done"
       send_mail "Backup done - $TAR_FILE_NAME"
       #delete_old_file
       exit 0
   else
      echo "Back up type is not in correct formate. Back up type should be NS, NO or TR..."
      fi
     fi
    fi

