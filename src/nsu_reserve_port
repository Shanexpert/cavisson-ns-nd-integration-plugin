#!/bin/bash
#############################################################################################################

# File name  :  nsu_reserved_port.sh									      
# Requirment :  There was a requirement to reserve ports/ port-range for processes like LPS,NDC etc, such that                                   ports specified are not accquired by any other running process. 
 
# Purpose    :  This tool reserves port by making entry of specified port(s) in /proc/sys/net/ipv4/ip-local_reserved-ports.                      To preserve this entry on reboot, these ports are added to /etc/sysctl.conf. 

# Input      :   Constraints: port must be above 1024 and below 65535					                                          case1 : Range to reserve port 								                                           8000-8010   									                                            case2 : Specific ports to reserve							      
#                        8000,8005,9000,.......              					      
													      
# Output     :  It will modify the file of system at kernal level                                            
#                /etc/sysctl.conf									      
#                case1:net.ipv4.ip_local_reserved_ports=20000-30000					      
#                case2:net.ipv4.ip_local_reserved_ports=56437,65543,58764,......      			     
 
# Author     :  NITESH KUMAR
 
# Date       :  12  Nov 2016   									              
                                                                                                            
# Copyright  :  (c) Cavisson Systems,2016        							      
                                                              	      					      
#Mod. History:
                                                                                     	      
##############################################################################################################

#Taking variables for use in below script
EXISTING_PORTS=`cat /proc/sys/net/ipv4/ip_local_reserved_ports`
USER_ID=`id -u`
min_range=1024
max_range=65535
FORCE_OPTION=0
APPEND_RESERVE_PORTS=0
RESERVE_PORT_LIST=0
exclude_ports_range=0
exclude_mul_ports=0
i=0

#check for root owner
if [ $USER_ID -ne 0 ];then
   echo "You must run this command through root."
   exit 1
fi

#Usage of this tool
Usage()
{
  echo "Usage:"
  echo "nsu_reserve_port [-f | -a| -l] -p <port1,port2...|PortStartRange-PortEndRange>"
  echo "Where:"
  echo "  -p is used to specify ports. Port can be given comma sepraed or in range (<value1-value2>). Or both the format can be given at same time." 
  echo "  Example:"
  echo "    ./nsu_reserve_port -p 55464,61254,4567"
  echo "    ./nsu_reserve_port -p 28766-34876"
  echo "    ./nsu_reserve_port -p 2000,3000,4000,10000-20000,40000-45000"
  echo "  -f is used to reserve port forcefully even if some ports are already reserved." 
  echo "  Example:"
  echo "    ./nsu_reserve_ports -f -p range "
  echo "  -a is used to append new port with previous reserved ports."
  echo "  Example"
  echo "    ./nsu_reserve_port -a -f -p range"
  echo "  -l option lists already reserved ports in machine"
  echo "  Example"
  echo "    ./nsu_reserve_port -l "
  exit -1
}


#check the reserved port entry is empty or not 
check_reserved_port_entry () 
{
  # If ports/portRange is matching exactly to already reserved ports/portRange
  if [ "X$RESERVE_PORTS" == "X$EXISTING_PORTS" ]; then
    echo "These ports are already reserved."
    exit 1
  fi
  # If some ports is already reserved and force option is not used, then do not reserve new ports, give msg and exit 
  if [ "X$EXISTING_PORTS" != "X" -a $FORCE_OPTION -ne 1 ] ; then
    echo "Ports $EXISTING_PORTS is already reserved. Hence not reserving given ports. If port reservation is still needed kindly use -f force option"
    exit 1
  fi
}

#Function which will reserved the ports and it will also make entry in sysctl file
sysctl_entry () 
{
  sysctl -w net.ipv4.ip_local_reserved_ports="$1" >/dev/null
  sed -i "/local_reserved_ports.*/d" /etc/sysctl.conf
  reserverd_port=`cat /proc/sys/net/ipv4/ip_local_reserved_ports`
  echo "net.ipv4.ip_local_reserved_ports=$reserverd_port" >> /etc/sysctl.conf
}

append_sysctl_entry ()
{
  sysctl -w net.ipv4.ip_local_reserved_ports="$1","$2" >/dev/null
  sed -i "/local_reserved_ports.*/d" /etc/sysctl.conf
  reserverd_port=`cat /proc/sys/net/ipv4/ip_local_reserved_ports`
  echo "net.ipv4.ip_local_reserved_ports=$reserverd_port" >> /etc/sysctl.conf
}

#Function which will vallidate the port is in the range or not
range_vallidation() 
{
  if [ "$1" -ge "$min_range"  -a  "$2" -le "$max_range" ]; then
    return 0
  else
    echo "$1 and $2 is not in the range of $min_range to $max_range"
    return 1
  fi
}

#this function will vallidate the range of each "," seperated ports
specific_range_vallidation () 
{
  if [ "$1" -ge "$min_range"  -a  "$1" -le "$max_range" ]; then
    return 0
  else
    echo "$1 is not in the range of $min_range to $max_range"
    return 1
  fi
}

#This function will reserved multiple specific ports with also multiple ranges
vallidate_ports () 
{
  if [ "X$1" == "X" ]; then
    Usage
  fi
  for i in $(echo $1 | sed "s/,/ /g")
    do
      range=$(echo "$i" | grep "-")
      if [ "$i" == "$range" ]; then
        val1=$(echo $i | cut -f1 -s -d'-')
        val2=$(echo $i | cut -f2 -s -d'-')
        #vallidate it using range_vallidation
        range_vallidation "$val1" "$val2"
        if [ "$?" -eq 0 ]; then
          continue
        else
          Usage
        fi
      else
        #individual "," seperated port vallidation
        specific_range_vallidation "$i"
        if [ "$?" -eq 0 ]; then
          continue
        else
          Usage
        fi
      fi
    done
}

#Taking input from user to reserve ports
while getopts p:alf? options
do
  case $options in
    p) RESERVE_PORTS=$OPTARG;;
    a) APPEND_RESERVE_PORTS=1;;
    l) RESERVE_PORT_LIST=1;;
    f) FORCE_OPTION=1
       echo "nsu_reserve_port is executed with force option!!!";;
    *) Usage ;;
    ?) Usage ;; 
  esac
done
  
#vallidate argument is present or not
if [ $OPTIND -eq 1 ]; then
  echo "No argument is present please refer usage"
  Usage
fi

#list the reserved ports
if [ $RESERVE_PORT_LIST -eq 1 ]; then
   echo " $EXISTING_PORTS "
   exit 1
fi
#check the reserved_port_entry function called
check_reserved_port_entry
#check each port is vallid or not and if ports are vallid reserve them
   vallidate_ports "$RESERVE_PORTS"
   #after vallidate ports reserve the ports 
   if [ "$APPEND_RESERVE_PORTS" -eq 1 ]; then
     #it will append the reserve port list with new ports
     append_sysctl_entry "$RESERVE_PORTS" "$EXISTING_PORTS"
   else
   #If some ports are already reserved the replace the reserved ports with current ports
     sysctl_entry "$RESERVE_PORTS"
   fi
sysctl -p 1>2 & 


