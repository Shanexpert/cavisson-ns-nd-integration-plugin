#!/bin/bash

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

OBJECT=""
SESS_REC_FLAG=0
SET_SES_CHILD=0
ST_FLAG=0

usage()
{
 echo "$*"
  echo "Usage:"
  echo "$0 --testrun <value> --fields <value> --object <value> [--group <name(s)>] [--order <name(s)>][--limit <limit>] [--offset <value>] [--location <name>] [--access<name>] [--status<value>] [--script <name>][--scriptidx <value>][--page <name>] [--pageidx <value>] [--trans <name>][--transidx <value>] [--url <name>] [--urlidx <value> ] [--get_count <value(0/1)>] [--starttime <value> --endtime <value] [--resptimeqmode<value> --responsetime<value>] --phaseidx <value> --browser <value>"
  echo ""
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --fields is the field selection(all, tried, success ....), which is mandatory argument."
  echo "  --object is object selection(0-URL, 1-Page, 2-Transaction, 3-Session), which is mandatory argument."
  echo "  --group is for group by option, which is optional argument."
  echo "  --limit is for limit (This is the number of results returned by query statment (e.g. 10 it will show first 10 records)), which is optional argument"
  echo "  --offset is for offset (This is used to skip rows as specified by offset (e.g suppose you wanted to show results 11-20 then you can use offset 10)), which is optional argument"
  echo "  --location is for particular location selection, which is optional argument"
  echo "  --access is for particular access selection, which is optional argument"
  echo "  --browser is for particular browser selection, which is optional argument"
  echo "  --phaseidx is for particular phase index selection, which is optional argument"
  echo "  --status is selecting particular staus (status is 0 for Success only, positive for the Failure code, -1 for all failures -2 for All (Success and all failures)), which is optional argument"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, which is optional argument."
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is optional argument."
  echo "  --responsetime is for giving perticular responsetime for different response time mode, which is optional argument."

  echo "  --order is for order by option, which is optional argument."
  echo "  --get_count is for getting count of total rows of query executed (0-do not count 1-getting count ,which is optional argument" 
  exit 1
}

add_obj_name()
{
  if [ $OBJECT -eq 0 ];then
    OBJ="URlRecord_$TRNUM"
    INQ_FROM="  FROM $OBJ"
    URLRECORD_TABLE_FLAG=1
  elif [ $OBJECT -eq 1 ];then
    OBJ="PageRecord_$TRNUM"
    INQ_FROM="  FROM $OBJ"
    PAGERECORD_TABLE_FLAG=1
  elif [ $OBJECT -eq 2 ];then
    OBJ="TransPageRecord_$TRNUM"
    TRANSPAGERECORD_TABLE_FLAG=1
    INQ_FROM="  FROM $OBJ"
  elif [ $OBJECT -eq 3 ];then
    OBJ="SessionRecord_$TRNUM"
    SESS_REC_FLAG=1
    INQ_FROM="  FROM $OBJ"
    SESSIONRECORD_TABLE_FLAG=1


  else
    echo "Invalid object-type (valid values 0-3)"
    exit 1
  fi

}

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    echo "Option $1 required a value."
    usage
    exit -1
  fi
}


chk_args()
{
  #debug_logs "Method debug_logs called."
  if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
  fi
  if [ "X$OBJECT" == "X" ]; then
    usage "object type is missing"
  fi
}

#netstorm.report.percentile.scaling=0/1
init_percentile_scaling()
{
  # Here adding tail -1, if netstorm.report.Percentile.scaling define more then once in webapps/sys/config.ini file then
  # we are picking the last one
  percentile_scaling=`grep "^netstorm.report.Percentile.scaling" $NS_WDIR/webapps/sys/config.ini | tail -1 |  awk -F'=' '{print $2}'|dos2unix | tr -d ' ' | awk '/^[0-1]+$/'`

  #Doing this as if there is no keyword in config.ini file then
  #percentile_scaling becomes blank and gives error in if conditions
  if [ "X$percentile_scaling" == "X" ]; then
    percentile_scaling=1
  fi
}

#Calculating Scale value
calculate_percentile_scale()
{
  ns_run_query "SELECT $NEWLINE  MAX($OBJ.RespTime) $NEWLINE$INQ_FROM $NEWLINE$INQ_WHERE"

  MAX_RESP_TIME=`head -2 $QUERY_OUT_FILE| tail -1`

  if [ "X$MAX_RESP_TIME" = "X" ];then
    SCALE=1
  else
    MAX_RESP_TIME=`expr $MAX_RESP_TIME - 1`
    #120000 is the number of indexes in percentile_add function in percentile.c file.
    #Any change here should reflect in that file also. Look for PERC_ARRAY_SIZE macro definition in that file.
    SCALE=`expr $MAX_RESP_TIME / 120000 + 1`
  fi
}


if [ "X$1" == "X" ];then
  usage
fi

set_where()
{
  if [ "XX$INQ_WHERE" != "XX" ];then
    INQ_WHERE="$INQ_WHERE AND"
  else
    INQ_WHERE="WHERE"
  fi
}

set_ses_child()
{

  if [ $SET_SES_CHILD -eq 1 ];then
   return
  fi
  if [ $OBJECT -ne 3 ];then
    set_where
    INQ_WHERE="$INQ_WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance"
    set_where
    INQ_WHERE="$INQ_WHERE $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex "
    SESS_REC_TAB=1
    SET_SES_CHILD=1
  fi
}

set_location()
{
  if [ "X$INNER_QUERY" == "X" ]; then
    INNER_QUERY="SELECT $NEWLINE    Location As \"Location\""
  else
    INNER_QUERY="$INNER_QUERY,$NEWLINE    Location As \"Location\""
  fi
  if [ "X$SESS_REC_FLAG" == "X0" ];then
    INQ_FROM="$INQ_FROM, SessionRecord_$TRNUM"
    SESSIONRECORD_TABLE_FLAG=1
    SESS_REC_FLAG=1
  fi
  set_ses_child
}

set_access()
{
  if [ "X$INNER_QUERY" == "X" ]; then
    INNER_QUERY="SELECT $NEWLINE    Access As \"Access\""
  else
    INNER_QUERY="$INNER_QUERY, $NEWLINE    Access As \"Access\""
  fi
  if [ $SESS_REC_FLAG -eq 0 ];then
    INQ_FROM="$INQ_FROM, SessionRecord_$TRNUM"
    SESSIONRECORD_TABLE_FLAG=1
    SESS_REC_FLAG=1
  fi
 set_ses_child
}


set_browser()
{
  INNER_QUERY="$INNER_QUERY,$NEWLINE    Browser As \"Browser\""
  if [ $SESS_REC_FLAG -eq 0 ];then
    INQ_FROM="$INQ_FROM, SessionRecord_$TRNUM"
    SESSIONRECORD_TABLE_FLAG=1
    SESS_REC_FLAG=1
  fi
  set_ses_child
}

set_status()
{
  INNER_QUERY="$INNER_QUERY,$NEWLINE    $OBJ.Status As \"Status\""
}

add_inner_where()
{
  if [ "X$INNER_QUERY" == "X" ];then
    INNER_QUERY="SELECT $NEWLINE"
  else
    INNER_QUERY="$INNER_QUERY,$NEWLINE"
  fi
}

set_sel_seg()
{
  if [ "X$GROUPBY" == "X" ];then
    case $OBJECT in
      0)add_inner_where
        INNER_QUERY="$INNER_QUERY    count(distinct $OBJ.PageIndex) As \"Page Count\""
        add_inner_where
        INNER_QUERY="$INNER_QUERY    count(distinct $OBJ.SessionIndex) As \"Session Count\"";;
      1)add_inner_where
        INNER_QUERY="$INNER_QUERY    count(distinct $OBJ.SessionIndex) As \"Session Count\"";;
      2)add_inner_where
        INNER_QUERY="$INNER_QUERY    count(distinct $OBJ.SessionIndex) As \"Session Count\"";;
    esac
  else
    for x in ${arr[@]}
    do
      case $x in
        access)INQ_GROUPBY="$INQ_GROUPBY,Access"
              set_access;;
        browser)INQ_GROUPBY="$INQ_GROUPBY,Browser"
              set_browser;;
        status)INQ_GROUPBY="$INQ_GROUPBY,\"Status\""
              set_status;;
       location)INQ_GROUPBY="GROUP BY Location"
                set_location;;

      esac
    done
  fi
}

# Add Location selection
location_selection()
{
  if [ "X$LOCATION" != "XALL" -a "X$LOCATION" != "X" ];then
    if [ "X$SESS_REC_FLAG" == "X0" ];then
      INQ_FROM="$INQ_FROM, SessionRecord_$TRNUM"
      SESSIONRECORD_TABLE_FLAG=1
      SESS_REC_FLAG=1
    fi
    set_where
    INQ_WHERE="$INQ_WHERE  LOCATION = ""'"$LOCATION"'"
    set_ses_child
  fi
}

#Add Access selection
access_selection()
{
  if [ "X$ACCESS" != "XALL" -a "X$ACCESS" != "X" ];then
  if [ "X$SESS_REC_FLAG" == "X0" ];then
    INQ_FROM="$INQ_FROM, SessionRecord_$TRNUM"
    SESSIONRECORD_TABLE_FLAG=1
    SESS_REC_FLAG=1
  fi
  set_where
  INQ_WHERE="$INQ_WHERE ACCESS = ""'"$ACCESS"'"
  set_ses_child
  fi
}

#Add Browser 
browser_selection()
{
  if [ "X$BROWSER" != "XALL" -a "X$BROWSER" != "X" ];then
     if [ $SESS_REC_FLAG -eq 0 ];then
       INQ_FROM="$INQ_FROM, SessionRecord_$TRNUM"
       SESSIONRECORD_TABLE_FLAG=1
       SESS_REC_FLAG=1
     fi
     set_where
     INQ_WHERE="$INQ_WHERE  BROWSER = ""'"$BROWSER"'"
     set_ses_child
  fi
}

add_select_elements()
{
VALUE="$OBJ.RespTime"

SCALED_VALUE="$VALUE / $1"

    if [ $(($FIELD & 1)) -ne 0 ];then
      if [ "X$INNER_QUERY" == "X" ]; then
        INNER_QUERY="SELECT $NEWLINE    count(*) AS \"Tried\""
      else
        INNER_QUERY="$INNER_QUERY, $NEWLINE    count(*) AS \"Tried\""
      fi
    fi
    if [ $(($FIELD & 4)) -ne 0 ];then
          INNER_QUERY="$INNER_QUERY, $NEWLINE    count(*)-count(nullif($OBJ.Status, 0)) AS \"Success\""
    fi
    if [ $(($FIELD & 2)) -ne 0 ];then
      INNER_QUERY="$INNER_QUERY, $NEWLINE    count(nullif($OBJ.Status, 0)) AS \"Fail\""
    fi
    if [ $ST_FLAG -eq 0 ]; then
      if [ $(($FIELD & 8)) -ne 0 ];then
            INNER_QUERY="$INNER_QUERY, $NEWLINE    CASE WHEN count(*) > 0 THEN (count(nullif($OBJ.Status, 0))*100/count(*)) ELSE 0 END AS \"%Fail\""
      fi
    fi

  if [ $(($FIELD & 16)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    min($VALUE) AS \"Min\""
  fi
  if [ $(($FIELD & 32)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    round(avg($VALUE)) AS \"Average\""
  fi
  if [ $(($FIELD & 64)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    max($VALUE) AS \"Max\""
  fi
  if [ $(($FIELD & 128)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    median_percentile($SCALED_VALUE) * $1 AS \"Median\""
  fi
  if [ $(($FIELD & 256)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    eighty_percentile($SCALED_VALUE) * $1 AS \"80%\""
  fi
  if [ $(($FIELD & 4096)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    eighty_five_percentile($SCALED_VALUE) * $1 AS \"85%\""
  fi
  if [ $(($FIELD & 512)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    ninety_percentile($SCALED_VALUE) * $1 AS \"90%\""
  fi
  if [ $(($FIELD & 1024)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    ninety_five_percentile($SCALED_VALUE) * $1 AS \"95%\""
  fi
  if [ $(($FIELD & 2048)) -ne 0 ];then
    INNER_QUERY="$INNER_QUERY, $NEWLINE    ninety_nine_percentile($SCALED_VALUE) * $1 AS \"99%\""
  fi
}

setd()
{
  if [ $SET_D_CALL -eq 0 ];then
    case $OBJECT in
      0)INNER_QUERY="$INNER_QUERY, $NEWLINE    count(distinct $OBJ.PageIndex) As \"Page Count\""
        INNER_QUERY="$INNER_QUERY, $NEWLINE    count(distinct $OBJ.SessionIndex) As \"Session Count\"";;
      1)INNER_QUERY="$INNER_QUERY, $NEWLINE    count(distinct $OBJ.SessionIndex) As \"Session Count\"";;
      2)INNER_QUERY="$INNER_QUERY, $NEWLINE    count(distinct $OBJ.SessionIndex) As \"Session Count\"";;
    esac
  fi
  debug_logs "object = $OBJECT******"
  SET_D_CALL=1
}


while [ "$1" != "" ];do
 # debug_logs "ARGS=$1"
  case $1 in
    "--testrun")
        shift
                                chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--fields")
        shift
                                chk_args_of_option "--fields" "$1"
        FIELD=$1;;
    "--object")
        shift
        chk_args_of_option "--object" "$1"
        OBJECT=$1;;
    "--group")
        shift
                                chk_args_of_option "--group" "$1"
        GROUPBY=$1;;
    "--limit")
        shift
        chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
        chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--status")
        shift
        chk_args_of_option "--status" "$1"
        STATUS=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--abs_starttime")
        shift
        chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--abs_endtime")
        shift
        chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    "--location")
        shift
        chk_args_of_option "--location" "$1"
        LOCATION=$1;;
    "--access")
        shift
              chk_args_of_option "--access" "$1"
        ACCESS=$1;;
    "--browser")
        shift
        chk_args_of_option "--browser" "$1"
        BROWSER=$1;;
    "--get_count")
        shift
        chk_args_of_option "--get_count" "$1"
        GET_COUNT=$1;;
    "--order")
        shift
        chk_args_of_option "--order" "$1"
        ORDERBY=$1;;
    "--responsetime")
        shift
        chk_args_of_option "--responsetime" "$1"
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
        chk_args_of_option "--resptimeqmode" "$1"
        RESPTIMEQMODE=$1;;
    "--responsetime2")
        shift
        chk_args_of_option "--responsetime2" "$1"
        RESPONSETIME2=$1;;
    "--aggregate")
        shift
        chk_args_of_option "--aggregate" "$1"
        AGGREGATE=$1;;
    --*) usage "Invalid options";;
    *) usage ;;
  esac
  shift
done

chk_args

set_query_files $TRNUM
handle_time_filters_in_ms $TRNUM

if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi

if [ "X$GROUPBY" != "X" ]; then
  NOGBY=`echo $GROUPBY | awk -F ',' '{print NF}'`

  for (( i=1 ; i<=$NOGBY ; i++ )) ; do
     GB=`echo $GROUPBY | awk -v j=$i -F',' '{print $j}'`
     arr[$i]=$GB
     case $GB in
        access)ACC_FLAG=1;;
        location)LOC_FLAG=1;;
        status)ST_FLAG=1;;
     esac
  done
fi

add_obj_name

set_sel_seg

#Add Status selection
NOF=`echo $STATUS |awk -F ',' '{print NF}'`
if [ $NOF -gt 1 ];then
  set_where
  INQ_WHERE="$INQ_WHERE $OBJ.Status in ($STATUS)"
else
  if [ $STATUS -eq -1 ];then
     set_where
    INQ_WHERE="$INQ_WHERE $OBJ.Status > 0"
  elif [ $STATUS -ne -2 ];then
     set_where
    INQ_WHERE="$INQ_WHERE $OBJ.Status = $STATUS"

  fi
fi

#Add response time selection
if [ "X$RESPONSETIME" != "X" ];then
 if [ $RESPTIMEQMODE -eq 1 ];then
   set_where
   INQ_WHERE="$INQ_WHERE $OBJ.RespTime <= $RESPONSETIME "
 elif [ $RESPTIMEQMODE -eq 2 ];then
   set_where
   INQ_WHERE="$INQ_WHERE $OBJ.RespTime >= $RESPONSETIME"
 elif [ $RESPTIMEQMODE -eq 3 ];then
   set_where
   INQ_WHERE="$INQ_WHERE $OBJ.RespTime BETWEEN $RESPONSETIME AND $RESPONSETIME2"
 fi
fi

location_selection
access_selection
browser_selection

#Add Start time and End time selection
if [ "X$STARTTIME" != "X" ]; then

  if [ "X$URLRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE URLRecord_$TRNUM.EndTime >= $STARTTIME"
  fi

  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE PageRecord_$TRNUM.EndTime >= $STARTTIME"
  fi

  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE TransPageRecord_$TRNUM.EndTime >= $STARTTIME"
  fi

  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE SessionRecord_$TRNUM.EndTime >= $STARTTIME"
  fi

fi

if [ "X$ENDTIME" != "X" ]; then

  if [ "X$URLRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE URLRecord_$TRNUM.EndTime <= $ENDTIME"
  fi

  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE PageRecord_$TRNUM.EndTime <= $ENDTIME"
  fi

  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE TransPageRecord_$TRNUM.EndTime <= $ENDTIME"
  fi

  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE SessionRecord_$TRNUM.EndTime <= $ENDTIME"
  fi

fi

#Add Absoulte Start time and Absoulte End time selection
if [ "X$ABS_STARTTIME" != "X" ];then

  if [ "X$URLRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE URLRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi

  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE PageRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi

  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE TransPageRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi

  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE SessionRecord_$TRNUM.EndTime >= $ABS_STARTTIME"
  fi

fi

if [ "X$ABS_ENDTIME" != "X" ];then

  if [ "X$URLRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE URLRecord_$TRNUM.EndTime <= $ABS_ENDTIME"
  fi

  if [ "X$PAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE PageRecord_$TRNUM.EndTime <= $ABS_ENDTIME"
  fi

  if [ "X$TRANSPAGERECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE TransPageRecord_$TRNUM.EndTime <= $ABS_ENDTIME"
  fi

  if [ "X$SESSIONRECORD_TABLE_FLAG" == "X1" ]; then
    set_where
    INQ_WHERE="$INQ_WHERE SessionRecord_$TRNUM.EndTime <= $ABS_ENDTIME"
  fi

fi

init_percentile_scaling

# calculate SCALE only when the percentile scaling is enabled, otherwise use scale value 1
if [ "X$percentile_scaling" == "X1" ]; then
  calculate_percentile_scale
fi

add_select_elements $SCALE

if [ $GET_COUNT -eq 0 ];then
  ns_run_query
else
  INNER_QUERY="$SELECT $NEWLINE$FROM $NEWLINE$INNER_QUERY"
  SELECT="SELECT Count(*) As \"Rows \" "
  FROM="FROM ("
  OFFSET="$OFFSET ) As \"Total \""
  ns_run_query
fi

show_query_result

#debug_logs "$SELECT $INNER_QUERY $FROM   $WHERE $ORDER_BY"

exit 0
