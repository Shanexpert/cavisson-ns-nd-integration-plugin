#!/bin/bash
#This shell is used for TAG the release if cvs -n update has no update, modified or conflict file.
# & also increment the version by 1, if not given as argument.
#echo R3_2_3_N9_G7_H2_M4_Feb27_2009


usage()
{
 echo "Usage:"
 echo "nsi_tag_release -I or -N <X.Y.Z>]"
 echo "     -I => Increment release."
 echo "     -N => Give new release e.g. 3.4.9." 
 exit -1
}

validate_usr_id_pwd_machine()
{
  MACHINE=0
  MACHINE=`ifconfig -a  | grep -c 10.10.30.95 2>/dev/null`
  if [ "XX$MACHINE" == "XX0" ];then
    echo "You can tag release only from 95 machine (10.10.30.95)."
    exit -1
  fi

  USER=`whoami 2>/dev/null`
  if [ "XX$USER" != "XXbuild" ];then
    echo "You should be login as build to tag release." 
    exit -1
  fi
  CUR_DIR=`pwd` 
  if [ "XX$CUR_DIR" != "XX/home/build/NSCVS/cavisson/src" ];then
    echo "You should be in /home/build/NSCVS/cavisson/src directory to tag release." 
    exit -1
  fi
}


function get_input()
{
  input=""
  while [ "${input}x" == "x" ]
  do
    read input
  done
  echo $input
}

chk_file_exists()
{
  if [ ! -f $1 ];then
    echo "$1 does not exist."
  fi
}

function get_cur_version()
{
  chk_file_exists etc/version
  VER=`grep -w 'VERSION' etc/version | awk '{print $2}'`
  TAG_RELEASE=`echo $VER | sed -e 's/\./_/g'` 

  NS_VERSION=`grep -w 'BUILD' etc/version | awk '{print $2}'`
  chk_file_exists gui/etc/version
  GUI_VERSION=`grep -w 'BUILD' gui/etc/version | awk '{print $2}'`
  chk_file_exists hpdd/etc/version
  HPD_VERSION=`grep -w 'BUILD' hpdd/etc/version | awk '{print $2}'`
  chk_file_exists cavmon/etc/version
  CMON_VERSION=`grep -w 'BUILD' cavmon/etc/version | awk '{print $2}'`

  if [ "XX$NS_VERSION" == "XX0" -o "XX$GUI_VERSION" == "XX0" -o "XX$HPD_VERSION" == "XX0" -o "XX$CMON_VERSION" == "XX0" ];then 
    echo "Build number for netstorm, gui, hpd & cmon must be greater then 0 !"
    exit -1
  fi

  TAG_DATE=`date +"%b%d_%Y"`
  
  TAG_NAME="R"$TAG_RELEASE"_N"$NS_VERSION"_G"$GUI_VERSION"_H"$HPD_VERSION"_M"$CMON_VERSION"_"$TAG_DATE

  echo "Current release/version details:"
  echo -e "\tRelease          = $TAG_RELEASE"
  echo -e "\tNetStorm Verison = $NS_VERSION"
  echo -e "\tGUI Version      = $GUI_VERSION"
  echo -e "\tHPD Version      = $HPD_VERSION"
  echo -e "\tCMON_Version     = $CMON_VERSION"
  echo -e "\tTAG Name         = $TAG_NAME"

  echo "Current directory is `pwd`"
  echo "User is '`whoami`'"
}

function check_if_any_file_not_committed()
{
  CVS_UPDATE_OUT_FILE=/tmp/cvs_update_out.log
  CVS_UPDATE_ERR_FILE=/tmp/cvs_update_err.log

  echo "Checking if any file is not committed ..."
  cvs -n update 1>$CVS_UPDATE_OUT_FILE 2>$CVS_UPDATE_ERR_FILE
  if [ $? != 0 ]; then
    echo "Error in cvs -n update. Check error in $CVS_UPDATE_ERR_FILE and output in $CVS_UPDATE_OUT_FILE"
    exit -1
  fi

  NON_COMMITEED_FILE_COUNT=`egrep -c "^U|^C|^M|^P" $CVS_UPDATE_OUT_FILE`
  if [ $NON_COMMITEED_FILE_COUNT != 0 ];then
    echo "There are few files ($NON_COMMITEED_FILE_COUNT) which are not committed/updated."
    echo "Release cannot be tagged. Please commit/update, verify build and try again."
    echo "Non commited/updated files are in $CVS_UPDATE_OUT_FILE as shown below:"
    cat $CVS_UPDATE_OUT_FILE | grep -v "^?"
    exit -1
  fi

}

function tag_release()
{
  TAG_OUT_FILE=/tmp/cvs_tag.log
  echo "Starting cvs tag. It will take time. Tag output is in $TAG_OUT_FILE."
  echo "Please wait ..."
  cvs tag $TAG_NAME >$TAG_OUT_FILE 2>&1
  if [ $? != 0 ]; then
    echo "cvs tag $TAG_NAME failed please try again later."
    exit -1
  fi
  echo "cvs tagging is complete"
}

function change_version()
{
  echo "Change version to next version in all etc/version files."

  if [ $I_FLAG == 0 ];then
    VERSION_STRING="VERSION $NEW_RELEASE_STRING \nBUILD 0"
  else
    VERSION_STRING="`echo -e $VER |  awk -F'.' '{print "VERSION "$1"."$2"."$3+1}'`\nBUILD 0"
  fi
  echo -e $VERSION_STRING | tee etc/version hpdd/etc/version gui/etc/version cavmon/etc/version  lps/etc/version
}

############################################################################################

I_FLAG=0
if [ $# == 0 ];then
  usage
fi

while getopts IN:? arg
do
  case $arg in
    I) I_FLAG=1;;
    N) NEW_RELEASE_STRING="$OPTARG";;
    ?) usage ;;
    *) usage ;;
  esac
done

validate_usr_id_pwd_machine

echo "Starting cvs tag of the release and changing of version files"

get_cur_version

echo "Make sure this release is uploaded to ftp.cavisson.com"
echo "Make sure you are running this shell from US build machine(10.10.30.21) using build id and in src directory."
#echo "Are you sure you want to the tag the release ? (y/n)"

#ans=`get_input`

#if [ "XX$ans" != "XXy" ];then
#  echo "Tagging release aborted."
#  exit -1
#fi

check_if_any_file_not_committed
tag_release
change_version

echo "Completed cvs tag and changing of version files."

exit 0

