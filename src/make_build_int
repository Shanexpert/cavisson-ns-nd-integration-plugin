#!/bin/bash
>/tmp/Error_Log
START_AUTOMATION_FLAG=$2
TAG_BUILD_FLAG=$3
COPY_BUILD_TO_CLOUD_FLAG=1
CUR_PWD=`pwd`
BUILD_VERSION=`./build_version -r`
mkdir -p ../builds_log/$BUILD_VERSION
CUR_DATE=`date +"%B_%d_%Y"`
CUR_TIME=`date +"%T"`
BUILD_LOG_FILE="$CUR_PWD/../builds_log/$BUILD_VERSION/build_$CUR_DATE.$CUR_TIME.log"
BUILD_ERR_FILE="$CUR_PWD/../builds_log/$BUILD_VERSION/build_$CUR_DATE.$CUR_TIME.err"
CONFLICT_FILES="$CUR_PWD/../builds_log/$BUILD_VERSION/build_$CUR_DATE.$CUR_TIME.conflict"
CVS_DIFF="$CUR_PWD/../builds_log/$BUILD_VERSION/cvs_diff_$CUR_DATE.$CUR_TIME.log"
CVS_CHECK_OUT="$CUR_PWD/../builds_log/$BUILD_VERSION/cvs_checkout_$CUR_DATE.$CUR_TIME.log"
CVS_DIFF_AFTER_CHECK_OUT="$CUR_PWD/../builds_log/$BUILD_VERSION/cvs_diff_after_checkout_$CUR_DATE.$CUR_TIME.log"
BRIFE_BUILD_ERR_FILE="$CUR_PWD/../builds_log/$BUILD_VERSION/build_$CUR_DATE.$CUR_TIME.err.brief"
MACHINE_TYPE=`nsi_get_linux_release_ex -r`
#BUILD=`cat $CUR_PWD/etc/version |tail -1 |cut -d ' ' -f2 `
echo "build_log_file is=$BUILD_LOG_FILE"
echo "cvs_diff_file is=$CVS_DIFF"
echo "error_log_file is=$BUILD_ERR_FILE"
echo "conflict_file is=$CONFLICT_FILES"
automation()
{
CUR_PWD=`pwd`
#BUILD_VERSION=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 `
#BUILD=`cat $CUR_PWD/etc/version |tail -1 |cut -d ' ' -f2 `
BUILD_VERSION=`ls -ltrh $CUR_PWD/../export/builds | grep netstorm_all | cut -d . -f 2-4 | head -1`
BUILD=`ls -ltrh $CUR_PWD/../export/builds | grep netstorm_all | cut -d . -f 5 | head -1`
#sshpass -p 'cavisson97' ssh cavisson@10.10.30.97 'nohup bash /home/cavisson/work/automation_trigger.sh -r ${Release} -b ${Build}'
#sshpass -p 'cavisson97' ssh cavisson@10.10.30.97 'nohup bash /home/cavisson/work/automation_trigger.sh -r $BUILD_VERSION -b $Build'
nohup sshpass -p 'cavisson97' ssh cavisson@10.10.30.97 "nohup bash /home/cavisson/work/automation_trigger.sh -r ${BUILD_VERSION} -b ${BUILD}" &> /tmp/automation_trigger.log &
nohup sshpass -p 'cavisson' ssh cavisson@10.10.30.96 "nohup bash /home/cavisson/work/automatic_build_upgrade.sh -r ${BUILD_VERSION} -b ${BUILD}"&> /tmp/hpd_upgrade.log &
nohup sshpass -p 'cavisson' ssh cavisson@10.10.30.190 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.190.log&
nohup sshpass -p 'cavisson12' ssh cavisson@10.10.30.26 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.26.log&
#nohup sshpass -p 'cavisson' ssh cavisson@10.10.30.29 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.29.log&
nohup sshpass -p 'cavisson' ssh cavisson@10.10.30.12 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.12.log&
nohup sshpass -p 'cavisson' ssh cavisson@10.10.30.10 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.10.log&
nohup sshpass -p 'C0mpass!' ssh cavisson@10.10.30.3 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.3.log&
nohup sshpass -p 'cavisson123' ssh cavisson@10.10.30.113 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.113.log&
#nohup sshpass -p 'Caviss0n!' ssh cavisson@10.10.30.3 "nohup bash /home/cavisson/work/automation_trigger.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/automation10.10.30.3.log&
nohup sshpass -p 'C@VAdmin' ssh root@10.10.30.16 "nohup bash /home/netstorm/work/copy_build_to_82buildhub.sh ${BUILD_VERSION} ${BUILD}" &> /tmp/copy_build_to_10.20.0.82_.log&
nohup sshpass -p 'devops@123' ssh build@10.10.30.95 "nohup bash /home/build/NV.sh_bck" &> /tmp/nv.logs&
nohup sshpass -p 'devops@123' ssh build@10.10.30.95 "nohup bash /home/build/NSCVS/cavisson/src/Netvision_upgrade.sh" &> /tmp/nv_up.logs
} 
debug_logs()
{
  echo "`date +"%F %X"`|$*" | tee -a  $BUILD_LOG_FILE
}

error_logs()
{
  echo "`date +"%F %X"`|$*" | tee -a $BUILD_ERR_FILE
  #cat $BUILD_ERR_FILE
}

cvs_update_and_diff()
{
  if [ -e $CONFLICT_FILES ];then
    rm -f $CONFLICT_FILES 
  fi
  send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "Build $BUILD_VERSION started"
  send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m 'Taking cvs diff'
  debug_logs "Taking cvs diff"
  echo "Cvs diff on date:`date`" >>$CVS_DIFF 
  cvs diff -r1 1>>$CVS_DIFF 2>>$CVS_DIFF
  echo -e "`date +"%F %X"`|Please see file \033[1;34;49m$CVS_DIFF\033[0m for cvs diff"  

  cd $CUR_PWD/../../

  debug_logs "cvs checkout start..."
  cvs co cavisson/src 1>>$CVS_CHECK_OUT 2>>$CVS_CHECK_OUT
  cvs co cavisson/thirdparty 1>>$CVS_CHECK_OUT 2>>$CVS_CHECK_OUT
  cvs co cavisson/firefox/ 1>>$CVS_CHECK_OUT 2>>$CVS_CHECK_OUT
  cvs co cavisson/chrome/ 1>>$CVS_CHECK_OUT 2>>$CVS_CHECK_OUT

  cat $CVS_CHECK_OUT | grep "^C " >$CONFLICT_FILES
  if [ $? == 0 ];then
    echo -e "`date +"%F %X"`|There are some conflict files. For detail please see file \033[1;31;49m$CONFLICT_FILES\033[0m" 
    Cur_usr_id=`id | awk -F' ' '{print $1}'| awk -F'(' '{print $2}'|awk -F')' '{print $1}'`
    if [ "X$Cur_usr_id" == "Xbuild" ];then
      exit -1
    fi
  fi
  debug_logs "cvs checkout complete."
  send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m 'cvs checkout complete'
  echo -e "`date +"%F %X"`|Please see file \033[1;34;49m$CVS_CHECK_OUT\033[0m for cvs checkout"  

  cd - >/dev/null 2>&1

  #echo "Verify cvs diff after cvs check out" >>$CVS_DIFF_AFTER_CHECK_OUT
  #cvs diff -r1 1>>$CVS_DIFF_AFTER_CHECK_OUT 2>>$CVS_DIFF_AFTER_CHECK_OUT
}

copy_browser_build()
{
  ### Now Browser build will be bundled with NetStorm build
  Release=$1
  #coping Build of Browser's Extension
  debug_logs "Making Browser's Extension build."

  Chrome_Build_Name=`ls -l  ../export/builds/chrome_extension* | awk -F ' ' '{print $9}'`
  if [ $? != 0 ];then
    echo "Error: Unable to make chrome build, as chrome extension bin not found."
  else
    echo "Chrome_Build_Name = $Chrome_Build_Name"
    echo "Going to copy chrome build"
    $CUR_PWD/tools/nsi_copy_build -n $Chrome_Build_Name -r $Release | tee -a /tmp/build_copy
  fi

  Firefox_Build_Name=`ls -l ../export/builds/firefox_extension* | awk -F ' ' '{print $9}'`
  if [ $? != 0 ];then
    echo "Error: Unable to make firefox build, as firefox extension bin not found."
  else
    echo "Firefox_Build_Name = $Firefox_Build_Name"
    echo "Going to copy firefox build"
    $CUR_PWD/tools/nsi_copy_build -n $Firefox_Build_Name -r $Release | tee -a /tmp/build_copy
  fi  
}

copy_rbu_build()
{

  debug_logs "Method called, copy_rbu_build()"
  Release=$1   
 
  RBU_Build_Name=`ls -l  ../export/builds/rbu/rbu_setup.*.bin | awk -F ' ' '{print $9}'`
  if [ $? != 0 ];then
    echo "Error: Unable to make RBU setup build, as binary file  not found at path `pwd`/../export/builds/rbu"
  else
    echo "RBU_Build_Name = $RBU_Build_Name"
    echo "Going to copy RBU setup build '$RBU_Build_Name' into build machine."
    $CUR_PWD/tools/nsi_copy_build -n $RBU_Build_Name -r $Release | tee -a /tmp/build_copy
  fi
}

copy_build()
{
export NS_WDIR='/home/cavisson/work'
CUR_PWD=`pwd`
#Build_File=`cat $BUILD_LOG_FILE |tail -3 |head -2 |tail -1 |cut -d '"' -f2`
Build_File=`egrep 'Self-extractible archive "../export/builds/netstorm_all[0-9.]+.Ubuntu[0-9]+*' $BUILD_LOG_FILE | cut -d '"' -f2`
echo "Build file is:$Build_File"
echo "Going to make download directory"
Version1=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $1}'`
Version2=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $2}'`
Version3=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $3}'`

Release=$Version1.$Version2.$Version3
echo "Directory is made:$Release"
  
  if [[ "X$BUILD_OPT" == "X2" || "X$BUILD_OPT" == "X6" ]]; then  
## Copy third_Party_build 
  copy_third_party_build $Release

## Copy ns_all_build
  copy_netstorm_build $Release

## Copy redHat build
  #copy_redHat_build $Release
    
 
## Copy cmon_rmp build file  
  copy_cmon_rpm_file $Release

##copy netdiagnostics build file
  copy_netdiagnostics_build $Release
  
  #copy_migration_tool $Release
  fi
  
  if [[ "X$BUILD_OPT" == "X1" || "X$BUILD_OPT" == "X8" ]]; then
  ## Copy ns_all_build
  copy_netstorm_build $Release
  #copy_migration_tool $Release
  fi 

  if [ "X$BUILD_OPT" = "X7" ];then
   copy_rbu_build $Release
  fi

 
  # Remotely update the index of build hub server
  #nsu_server_admin -i -s 10.10.30.16 -c 'remote_regenerate_index'

  echo "build copied successfully:/home/netstorm/Builds/$Release"
  send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m 'Netstorm and Thirdparty build is uploaded on buildhub'

}

copy_netstorm_build(){
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1
  echo "Build_File=$Build_File"
  if  [ "XX$Build_File" != "XX" ]; then #NS build is given
    echo "Going to copy NS_all build"
    $CUR_PWD/tools/nsi_copy_build  -n $Build_File -r $Release |tee -a /tmp/build_copy
  fi 

}
copy_netdiagnostics_build(){
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1
  netdiagnostics_build=$(ls ${CUR_PWD}/../export/builds | grep "netdiagnostics.*.tar.gz")
  netdiagnostics_build="${CUR_PWD}/../export/builds/$netdiagnostics_build"

  echo "netdiagnostics_build=$netdiagnostics_build"
  if  [ "XX$netdiagnostics_build" != "XX" ]; then #ND build is given
    echo "Going to copy netdiagnotics build"
    $CUR_PWD/tools/nsi_copy_build  -y $netdiagnostics_build -r $Release |tee -a /tmp/build_copy
  fi

}
copy_third_party_build(){
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1
  echo "Third_Party_Build = $Third_Party_Build"
  if  [ "XX$Third_Party_Build" != "XX" ]; then #Thirdparty build is given
    echo "Going to copy third_party build"
    $CUR_PWD/tools/nsi_copy_build  -t $Third_Party_Build -r $Release | tee -a /tmp/build_copy
  fi

}


copy_redHat_build(){
  export NS_WDIR='/home/netstorm/work'
  CUR_PWD=`pwd`
  Release=$1
  red_hat=`ls ${CUR_PWD}/../export/builds| egrep "netstorm_all[0-9.]+.Redhat_[0-9]+*"`

  if  [ "XX$red_hat" != "XX" ]; then #RedHat build is given
    echo "Going to copy RedHat build"
    $CUR_PWD/tools/nsi_copy_build  -o "$CUR_PWD/../export/builds/$red_hat" -r $Release |tee -a /tmp/build_copy
  else
    echo "RedHat build not made"
  fi

}


copy_hpi_build(){
nohup bash /home/build/NV.sh_bck &>/tmp/nv.logs &
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1
  hpi_file=`ls ${CUR_PWD}/../export/gui/sampleApps| egrep "^netstorm.|.hpi$"`

  if [ "XX$hpi_file" != "XX" ]; then #Copy hpi build
     echo "Going to copy hpi build on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -h "$CUR_PWD/../export/gui/sampleApps/$hpi_file" -r $Release |tee -a /tmp/build_copy
  else
    echo "hpi build not made"
  fi

}

copy_NF_build(){
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1
  NFfile=`ls -1tr ${CUR_PWD}/../export/netforest/| grep "nfalert.*"| tail -1`
  echo "$NFfile"
  echo $Release

  if [ "XX$NFfile" != "XX" ]; then #Copy netforest  build
     echo "Going to copy nfalert build on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -f "$CUR_PWD/../export/netforest/$NFfile" -r $Release |tee -a /tmp/build_copy
  else
    echo "nfalert build not made"
  fi
  NFfile2=`ls -1tr ${CUR_PWD}/../export/netforest/| grep "nfdb.*"| tail -1`

  if [ "XX$NFfile2" != "XX" ]; then #Copy netforest  build
     echo "Going to copy nfdb build on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -f "$CUR_PWD/../export/netforest/$NFfile2" -r $Release |tee -a /tmp/build_copy
  else
    echo "nfdb build not made"
  fi
  NFfile3=`ls -1tr ${CUR_PWD}/../export/netforest/| grep "NetForest.*"| tail -1`

  if [ "XX$NFfile3" != "XX" ]; then #Copy netforest build
     echo "Going to copy NetForest build on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -f "$CUR_PWD/../export/netforest/$NFfile3" -r $Release |tee -a /tmp/build_copy
  else
    echo "NetForest build not made"
  fi



}

copy_cmon_rpm_file()
{
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1

  cmon_nf=`ls -ltr ${CUR_PWD}/cavmon/rpm/RPMS/x86_64 | tail -1 | awk '{print $9}'`

  if [ "XX$cmon_nf" != "XX" ]; then #Copy cmon_nf
     echo "Going to copy cmon-nf on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -m "$CUR_PWD/cavmon/rpm/RPMS/x86_64/$cmon_nf" -r $Release |tee -a /tmp/build_copy
  else
     echo "cmon-nf not made"
  fi

  cmon_nd_nf=`ls -ltr ${CUR_PWD}/cavmon/rpm/RPMS/x86_64 | tail -2 | head -1 | awk '{print $9}'`

  if [ "XX$cmon_nd_nf" != "XX" ]; then #Copy cmon_nd_nf
    echo "Going to copy cmon-nd-nf on Server machine"
    $CUR_PWD/tools/nsi_copy_build  -m "$CUR_PWD/cavmon/rpm/RPMS/x86_64/$cmon_nd_nf" -r $Release |tee -a /tmp/build_copy
  else
    echo "cmon-nd-nf not made"
  fi

  cmon_nd=`ls -ltr ${CUR_PWD}/cavmon/rpm/RPMS/x86_64 | tail -3 | head -1 | awk '{print $9}'`

  if [ "XX$cmon_nd" != "XX" ]; then #Copy cmon_nd
     echo "Going to copy cmon-nd on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -m "$CUR_PWD/cavmon/rpm/RPMS/x86_64/$cmon_nd" -r $Release |tee -a /tmp/build_copy
  else
    echo "cmon-nd not made"
  fi

  cmon=`ls -ltr ${CUR_PWD}/cavmon/rpm/RPMS/x86_64 | tail -4 | head -1 | awk '{print $9}'`

  if [ "XX$cmon" != "XX" ]; then #Copy cmon
     echo "Going to copy cmon on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -m "$CUR_PWD/cavmon/rpm/RPMS/x86_64/$cmon" -r $Release |tee -a /tmp/build_copy
  else
     echo "cmon not made"
  fi

  cmon_nd_nf_aix=`ls -ltr ${CUR_PWD}/cavmon/rpm/RPMS/ppc | tail -1 | awk '{print $9}'`

  if [ "XX$cmon_nd_nf_aix" != "XX" ]; then #Copy cmon_nd_nf_aix
    echo "Going to copy cmon-nd-nf-aix on Server machine"
    $CUR_PWD/tools/nsi_copy_build  -m "$CUR_PWD/cavmon/rpm/RPMS/ppc/$cmon_nd_nf_aix" -r $Release |tee -a /tmp/build_copy
  else
    echo "cmon-nd-nf-aix not made"
  fi


}

copy_migration_tool(){
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Release=$1
  
  migration_tool=`egrep 'Self-extractible archive "../export/builds/ControllerMigration.[0-9.]+.Ubuntu[0-9].+*.bin' $BUILD_LOG_FILE | cut -d '"' -f2`
  echo "migration_tool_file = $migration_tool"
  if [ "XX$migration_tool" != "XX" ]; then #Copy cmon_nf
     echo "Going to copy migration_tool on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -s "$migration_tool" -r $Release |tee -a /tmp/build_copy
  else
     echo "migration tool not made"
  fi

}

check_cav_upload(){
export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Version1=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $1}'`
  Version2=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $2}'`
  Version3=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $3}'`

  Release=$Version1.$Version2.$Version3
  echo "Directory is made:$Release"
  version=`cat $CUR_PWD/etc/version |tail -1 | awk -F ' ' '{print $2}'`
  cav_file=`ls ${CUR_PWD}/../export/builds|egrep "^Cav$Release.$version.*.bin"`

  if [ "XX$cav_file" != "XX" ]; then #Copy cav build
     echo "Going to copy Cav_Bin build on Server machine"
     $CUR_PWD/tools/nsi_copy_build  -h "$CUR_PWD/../export/builds/$cav_file" -r $Release |tee -a /tmp/build_copy
     #nsu_server_admin -i -s 10.10.30.16 -c 'remote_regenerate_index'
  else
    echo "cavbin not made"
   
  fi

}


log_error_module()
{
echo "Going to log error in file"
    for prod in thirdparty ns gui hpd cavmon lps ndc ndp statsc complete cvs 
    do
        Error_Prod=$(egrep -o "Error in making $prod build" $BUILD_ERR_FILE)
        if [ "$prod" == "cvs" ]; then
	    Cvs_Err=$(egrep -o "There are some conflict files" $$BUILD_ERR_FILE)

        	if [ ! -z "$Cvs_Err" ];then
            	cvs_err=$prod
            	echo "ERROR_PROD=$cvs_err" >/tmp/Error_Log
            	exit 1
        	fi
        fi
        if [ ! -z "${Error_Prod}" ]; then
            ERROR_PROD=$prod
            echo "ERROR_PROD=$ERROR_PROD" >/tmp/Error_Log
            exit 1
        fi
    done
}

function start_automation() {
echo "Statr automation is:"$START_AUTOMATION_FLAG

if [ "XX$START_AUTOMATION_FLAG" = "XX1" ]; then
    Cur_dir=`pwd`
    echo "Inside Automation:$Cur_dir"

    Current_Build_Version=`ls -l  ../../export/builds/netstor* |awk -F '.' '{print $9}' |tail -1`
    echo "Current_Build_Version is =$Current_Build_Version" 
    
    cat IpFile|while read line
    do
        Build_Update_Status=`nsu_server_admin -g -i -s $line -c 'cat /home/cavisson/work/etc/version'| tail -1 |awk '{print $2}'`
        echo "Build_Update_Status is =$Build_Update_Status"

	if [ "XX$Build_Update_Status" == "XX$Current_Build_Version" ]; then
	    echo "Inside final loop:$Cur_dir"
	       
	    if  [ "$line" == "10.10.30.52" ]; then
                echo "Going to start NS automation 52 Machine"
		nohup sh Automation_Start $line $Cur_dir $TAG_BUILD_FLAG 1>/tmp/nohup.auto_U12.log 2>&1 &    
	    #elif [ "$line" == "10.10.30.29" ];then
            #    echo "Going to start ND automation"
            #    nohup bash ndi_regression_daemon 1>/tmp/nd.auto.log 2>&1 &
            elif [ "$line" == "10.10.30.37" ];then
                echo "Going to start NS RBU on 37 machine"
                nohup bash Rbu_Start $line $Cur_dir 1>/tmp/rbu.ns.log 2>&1 &
	    else
                echo "$line @NO server upgraded successfully"
	    fi
	else
	    echo "Build is not updated successfully on $line"
	fi
    done
else
    echo "Automation is not triggered in this build: "$Build_Name
fi

cd ../
}

function check_is_test_running(){
  #Check release on 10.10.30.52 machine
  release=`nsu_server_admin -g -i -s '10.10.30.52' -c 'cat /home/cavisson/work/etc/version'|awk 'FNR == 1 {print $2}'`

  test_run=`nsu_server_admin -g -i -s '10.10.30.52' -c 'pgrep ts_run'`
  if ! [[ "$test_run" =~ ^[0-9]+$ ]];then
    echo "NO test are running on 10.10.30.52 machine"
    [ -z "$(grep '10.10.30.52' tools/IpFile)" ] && echo "10.10.30.52" >>tools/IpFile
  else

    current_release=`awk 'FNR == 1 {print $2}' etc/version |awk -F'.' '{print $1"."$2"."$3}'`
    if [ "${release/ /}" == "${current_release/ /}" ];then
      #Stop test on 10.10.30.52 machine and upgrade latest build and start automation test
      ant_pid=`nsu_server_admin -g -i -s '10.10.30.52' -c 'ps -ef'|grep ant|awk '{print $2 " "  $3}'`
      nsu_server_admin -g -i -s '10.10.30.52' -c "kill -9 $ant_pid $test_run"
      [ -z "$(grep '10.10.30.52' tools/IpFile)" ] && echo "10.10.30.52" >>tools/IpFile
      echo "Stopped test on 10.10.30.52 machine and upgrade latest build and start automation test"

    else
      echo "release on 10.10.30.52 is $release and current build release is $current_release \n So dont upgrade and run"
      sed -i '/10.10.30.52/d' tools/IpFile
    fi
  fi

}
function start_automation2() {
echo "Statr automation is:"$START_AUTOMATION_FLAG

if [ "XX$START_AUTOMATION_FLAG" = "XX1" ]; then
    Cur_dir=`pwd`
    echo "Inside Automation:$Cur_dir"

    Current_Build_Version=`ls -l  ../../export/builds/netstor* |awk -F '.' '{print $9}' |tail -1`
    echo "Current_Build_Version is =$Current_Build_Version" 
    
    cat IpFile2|while read line
    do
        Build_Update_Status=`nsu_server_admin -g -i -s $line -c 'cat /home/cavisson/work/etc/version'| tail -1 |awk '{print $2}'`
        echo "Build_Update_Status is =$Build_Update_Status"

	if [ "XX$Build_Update_Status" == "XX$Current_Build_Version" ]; then
	    echo "Inside final loop:$Cur_dir"
	       
	    if  [ "$line" == "10.10.30.97" ]; then
                echo "Going to start NS automation on 97 Machine"
		nohup sh Automation_Start2 $line $Cur_dir $TAG_BUILD_FLAG 1>/tmp/nohup.auto_U16.log 2>&1 &    
            elif [ "$line" == "10.10.30.190" ];then
                echo "Going to start ND automation"
                nohup bash ndi_regression_daemon 1>/tmp/nd.auto.log 2>&1 &
            elif [ "$line" == "10.10.30.102" ];then
                echo "Going to start NS RBU on 102 machine"
                nohup bash Rbu_Start $line $Cur_dir 1>/tmp/rbu.ns.log 2>&1 &
	    else
                echo "$line @NO server upgraded successfully"
	    fi
	else
	    echo "Build is not updated successfully on $line"
	fi
    done
else
    echo "Automation is not triggered in this build: "$Build_Name
fi

cd ../
}
#if we make build make from backend flag should be disabled 
function copy_build_to_cloud_machine_ub12(){
  if [ $COPY_BUILD_TO_CLOUD_FLAG -eq 1 ];then
    cd tools
    nohup bash copy_build_to_cloud.sh $CUR_PWD "cloudIPFile_ub12" &>/tmp/copy_build_to_cloud.log &
    cd ..
  fi
}

function copy_build_to_cloud_machine_ub16(){
  if [ $COPY_BUILD_TO_CLOUD_FLAG -eq 1 ];then
    cd tools
	nohup bash NCMON_build_upgrade.sh &>/tmp/ncmon_upgrade.log &
        nohup bash NCMON_AGENT__build_upgrade.sh &>/tmp/ncmon_child.log &
        nohup bash /home/build/NSCVS/cavisson/src/Netvision_upgrade.sh &>/tmp/NV_up.logs &
    nohup bash copy_build_to_cloud.sh $CUR_PWD "cloudIPFile_ub16" &>/tmp/copy_build_to_cloud.log &
    cd ..
  fi
}

function start_tag {
    cd tools
    nohup bash start_tag.sh  &>/tmp/start_tag.log &
    cd ..
    
    CUR_PWD=`pwd`
    echo $CUR_PWD
    Version1=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 `
    Version2=`cat $CUR_PWD/etc/version |tail -1 |cut -d ' ' -f2 `

    Release=$Version1.$Version2
    echo $Release

    cd /tmp
    nohup python tag_build.py -r $Release &> /tmp/tag_$Release &
    cd -

}
upgrade_automation_server()
{
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Version1=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $1}'`
  Version2=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $2}'`
  Version3=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $3}'`

  Release=$Version1.$Version2.$Version3

  cd tools 
  
  if  [ "XX$Third_Party_Build" != "XX" ]; then #Thirdparty build is given
          # nsi_build_upgrade -UB $Third_Party_Build_Upgrade  -f  IpFile         
          python copyBuild.py -f IpFile_Python -b $Third_Party_Build_Upgrade
  fi
 
  if  [ "XX$Build_File" != "XX" ]; then #NS build is given
          # nsi_build_upgrade -UB $Build_File_Name -f IpFile
          python copyBuild.py -f IpFile_Python -b $Build_File_Name
  fi
  echo "calling start>>automtion shell"
  start_automation
}

upgrade_automation_server2(){
  export NS_WDIR='/home/cavisson/work'
  CUR_PWD=`pwd`
  Version1=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $1}'`
  Version2=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $2}'`
  Version3=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $3}'`

  Release=$Version1.$Version2.$Version3
  cd tools

  if  [ "XX$Third_Party_Build" != "XX" ]; then #Thirdparty build is given
           #nsi_build_upgrade -UB $Third_Party_Build_Upgrade  -f  IpFile2
           python copyBuild.py -f IpFile2_Python -b $Third_Party_Build_Upgrade
  fi

  if  [ "XX$Build_File" != "XX" ]; then #NS build is given
           #nsi_build_upgrade -UB $Build_File_Name -f IpFile2
           python copyBuild.py -f IpFile2_Python -b $Build_File_Name
  fi
  echo "calling start>>automtion shell"
  start_automation2

}

make_ns_build()
{
  debug_logs "Cleaning ns"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making ns build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making ns build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making ns build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"

    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  
  debug_logs "ns build made succefully."
  debug_logs "Releasing ns build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing ns build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "ns build released successfully."
  #debug_logs "Making migration tool."
  #make build_migration_tool 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  #if [ $? != 0 ];then
   # error_logs "Error in making migration tool"
    #echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    #exit 1
  #fi
}

make_gui_build()
{
  cd gui
  debug_logs "cleaning gui"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making gui build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making gui build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making gui build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "gui build made successfully."
 
  debug_logs "Releasing gui build start..." 
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing gui build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "gui build released successfully."
  cd ..
}

make_hpi_build()
{
export NS_WDIR='/home/cavisson/work'
CUR_PWD=`pwd`  
Version1=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $1}'`
Version2=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $2}'`
Version3=`cat $CUR_PWD/etc/version |head -1 |cut -d ' ' -f2 |awk -F '.' '{print $3}'`

Release=$Version1.$Version2.$Version3
echo "Directory is made:$Release"

  cd gui/jenkinPlugin
  debug_logs "cleaning hpi"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making hpi build start..."
  make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making hpi build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making hpi build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    log_error_module
    exit 1
  fi
  debug_logs "hpi build made successfully."
   
  cd ../..
  ## Copy hpi build file 
  copy_hpi_build $Release 
  # Remotely update the index of build hub server
  nsu_server_admin -i -s 10.10.30.16 -c 'remote_regenerate_index'

# Remotely update the index of 82 build hub server

  nsu_server_admin -i -s 10.20.0.82 -c 'remote_regenerate_index'
  echo "build copied successfully:/home/cavisson/downloads/$Release"
  
}

make_hpd_build()
{
  cd hpdd
  debug_logs "cleaning hpd"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making hpd build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making hpd build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making hpd build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "hpd build made successfully."

  debug_logs "Releasing hpd build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing hpd build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "hpd build released successfully."
  
  cd ..
}


make_cavmon_build()
{
  cd cavmon
  debug_logs "cleaning cavmon"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making cmon build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making cavmon build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making cavmon build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "cmon build made successfully."

  debug_logs "Releasing cmon build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing cavmon build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "cmon build released successfully."
  cd ..
}

make_lps_build()
{
  cd netdiagnostics/core/ndc/lps
  debug_logs "cleaning lps"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making lps build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making lps build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "lps build made successfully."

  debug_logs "Releasing lps build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing lps build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "lps build released successfully."
  cd ../../../..
}

make_ndc_build()
{
  cd netdiagnostics/core/ndc/
  debug_logs "cleaning ndc"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making ndc build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making ndc build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "ndc build made successfully."

  debug_logs "Releasing ndc build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing ndc build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making ndc build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "ndc build released successfully."
  cd ../../..
}

make_statsc_build()
{
  cd statsc
  debug_logs "cleaning statsc"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making statsc build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making statsc build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "statsc build made successfully."

  debug_logs "Releasing statsc build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing statsc build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "statsc build released successfully."
  cd ..
}


make_ndp_build()
{
  cd netdiagnostics/core/ndp/
  debug_logs "cleaning ndp"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making ndp build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making ndp build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making ndp build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "ndp build made successfully."

  debug_logs "Releasing ndp build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing ndp build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "ndp build released successfully."
  cd ../../..
}

make_complete_build()
{
  debug_logs "Making complete build start..."
  make complete_bin 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making complete build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making complete build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  echo "complete build made successfully.Build is:"  

  ### Changes for rhel  ###############
  debug_logs "Making rhel complete build start..."
  make complete_rhel_bin 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making rhel complete build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making rhel build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  echo "rhel complete build made successfully."
 
  ### Changes for build migration tool  ###############
  #echo "going to make build migration tool "
  #make build_migration_tool 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  #echo "build migration tool made successfully"
  copy_build
  cat $BUILD_LOG_FILE | tail -3
  egrep -v "cvs diff:|deprecated API|unchecked or unsafe operations|deprecation for details|unchecked for details|ar: creating" $BUILD_ERR_FILE > $BRIFE_BUILD_ERR_FILE 
    
  echo "For complete logs see log file $BUILD_LOG_FILE"
  echo "For complete errors see error file $BUILD_ERR_FILE"
  echo "For brief of errors see error file $BRIFE_BUILD_ERR_FILE"

}
make_cmon_nd_rpm()
{
  debug_logs "Making CMON-ND rpm start..."
  make build_rpm 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making rpm"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    log_error_module
    exit 1
  fi
  debug_logs "CMON-ND rpm made successfully."
}

#adding to make nf-build 
make_nf_build(){ 
    export JAVA_HOME=/apps/java/jdk1.8.0_121
    export PATH=$JAVA_HOME/bin:$PATH    
    cd netforest 
    debug_logs "Cleaning nf" 
    make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE 
    debug_logs "Making nf build start..."  
    make build_all 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE 
    if [ $? != 0 ];then  
        error_logs "Error in making nf build"
        send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making nf build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>" 
        echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
        log_error_module 
        exit 1 
    fi  
    debug_logs "nf build made successfully." 
    debug_logs "Releasing nf build start..."  
    make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE 
    if [ $? != 0 ];then    
        error_logs "Error in releasing nf build" 
        echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m" 
        exit 1  
    fi 
    debug_logs "nf build released successfully."
   export JAVA_HOME=/apps/java/jdk1.7.0_71
   export PATH=$JAVA_HOME/bin:$PATH
    cd ..
	copy_NF_build $Release 
   
}

make_product_build()
{
  make_ns_build
  #gui build is making netdiagnostics build also so no need to make netdiagnostics build.
  make_gui_build
  make_hpd_build
  make_lps_build
  make_statsc_build
  make_ndc_build
  make_cavmon_build
  make_browser_ext_build
  make_cmon_nd_rpm
  make_complete_build
}

make_thirdparty_build_only()
{
  cd thirdparty 
  debug_logs "cleaning thirdparty"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making thirdparty build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making thirdparty build"
    send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Error in making thirdparty build</b></br><b>Note:for error logs please refer to the mail<b></br><b>Autogenerated message</b>"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "thirdparty build made successfully."

  debug_logs "Releasing build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing thirdparty build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "Releasing redhat build start..."
  make release_rhel 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing redhat thirdparty build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi

  debug_logs "thirdparty build released successfully."
  Third_Party_Build=$(ls ${CUR_PWD}/../export/builds/thirdparty| egrep "thirdparty.[0-9.]+_Ubuntu[0-9]+_64.bin")
  Third_Party_Build="${CUR_PWD}/../export/builds/thirdparty/$Third_Party_Build"
  echo "Third_Party_Build=$Third_Party_Build"
  Third_Party_Build_Upgrade="$Third_Party_Build"
  cd ..
  #copy_build
}

make_browser_ext_build()
{ 
  Browser_Build=1
  debug_logs "Method called, make_browser_ext_build()."

  ####Chrome
  debug_logs "Chrome extension build is about to start ..."
  cd ../chrome/extensions/
  make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making Chrome extension's build."
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "Chrome extension's build released successfully."
  cd - #Come back to src

  ####Firefox
  debug_logs "Firefox extension build is about to start ..."
  cd ../firefox/extensions/
  make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making firefox extension's build."
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "Firefox extension's build released successfully."

  cd ../../src/

  #Copy build in 10.10.30.16
  #if [ "X$BUILD_OPT" = "X7" ];then
  #  copy_build
  #fi
}

make_rpm_build()
{
  cd thirdparty/FC14/rpms 
  debug_logs "cleaning rpms"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making rpm build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making rpm build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "rpm build made successfully."

  debug_logs "Releasing build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing rpm build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "rpm build released successfully."
  cd - >/dev/null 2>&1
}

make_help_build_only()
{
  cd gui/help 
  debug_logs "cleaning help"
  make clean 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE

  debug_logs "Making help build start..."
  make build 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making help build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "help build made successfully."

  debug_logs "Releasing build start..."
  make release 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in releasing help build"
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "Help build released successfully."
  cd - >/dev/null 2>&1
}

make_rbu_build()
{
  debug_logs "Method called, make_rbu_build()"

  MAKESELF="tools/makeself.sh"
  RBU_RELEASE_DIR="../export/builds/rbu"
  GET_BUILD_RELEASE="build_version"
  GET_LINUX_RELEASE="tools/nsi_get_linux_release_ex"
  
  DISTRO=`$GET_LINUX_RELEASE -d`
  RELEASE=`$GET_LINUX_RELEASE -r`
  ARCH_BITS=`$GET_LINUX_RELEASE -b`
  NSRELEASE=$DISTRO$RELEASE"_"$ARCH_BITS

  mkdir -p $RBU_RELEASE_DIR
  rm -rf $RBU_RELEASE_DIR/*

  ####Chrome
  
  #create chrome_native_host
  NATIVE_HOST="../chrome/extensions/chrome_native_host.c" 
  gcc $NATIVE_HOST -o $RBU_RELEASE_DIR/chrome_native_host -Wall -g  
  #NATIVE_MSG_HOST_MANIFEST="../chrome/extensions/cavisson_service.native_host.json"
  #cp $NATIVE_MSG_HOST_MANIFEST $RBU_RELEASE_DIR/

  #CHR40 and 51 commented, Bug 31794 - RBU- Need to remove older version of chrome and Firefox.
  #debug_logs "Chromium 40 build is about to start ..."
 
  #if [ "X$RELEASE" == "X1604" ];then
  #  echo "NS Chromium 40 is not supported in Ubuntu 1604"
  #else 
    #cd ../chrome/chromium40
    #debug_logs "In chromium40 directory, chromium 40 build is about to start ...."
    #make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
    #if [ $? != 0 ];then
    #  error_logs "Error in making chromium 40 installation build."
    #  echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    #  exit 1
    #fi
    #debug_logs "Chromium 40 build, released successfully."

    #cd - #Come back to src
  #fi
  
  debug_logs "Chromium 51 build is about to start ..."

  if [ "X$RELEASE" == "X1604" ];then
    echo "NS Chromium 51 is not supported in Ubuntu 1604"
  else
    cd ../chrome/chromium51
    debug_logs "In chromium51 directory, chromium 51 build is about to start ...."
    make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
    if [ $? != 0 ];then
      error_logs "Error in making chromium 51 build."
      echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
      exit 1
    fi
    debug_logs "Chromium 51 build, released successfully."

    cd - 
  fi
  
  debug_logs "Chromium 60 build is about to start ..."

  cd ../chrome/chromium60
  debug_logs "In chromium60 directory, chromium 60 build is about to start ...."
  make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making chromium 60 installation build."
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "Chromium 60 build, released successfully."

  cd -

  debug_logs "Chromium 68 build is about to start ..."

  if [ "X$RELEASE" == "X1204" ];then
    echo "NS Chromium 68 is not supported in Ubuntu 1204"
  else
    cd ../chrome/chromium68
    debug_logs "In chromium68 directory, chromium 68 build is about to start ...."
    make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
    if [ $? != 0 ];then
      error_logs "Error in making chromium 68 build."
      echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
      exit 1
    fi
    debug_logs "Chromium 68 build, released successfully."

    cd - 
  fi

  #CHR40 and 51 commented, Bug 31794 - RBU- Need to remove older version of chrome and Firefox. 
  ####Firefox

  #debug_logs "Firefox 31 installation build is about to start...."

  #cd ../firefox/ffx31/
  #debug_logs "In ffx31 directory, Firefox 31 installation build is about to start ...."
  #make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  #if [ $? != 0 ];then
  #  error_logs "Error in making Firefox 31 installation build."
  #  echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
  #  exit 1
  #fi
  #debug_logs "Firefox 31 installation build, released successfully."

  #cd -
 
  #debug_logs "Firefox 32 installation build is about to start...."
  
  #cd ../firefox/ffx32/
  #debug_logs "In ffx32 directory, Firefox 32 installation build is about to start ...."
  #make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  #if [ $? != 0 ];then
  #  error_logs "Error in making Firefox 32 installation build."
  #  echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
  #  exit 1
  #fi
  #debug_logs "Firefox 32 installation build, released successfully."

  #cd -

  #debug_logs "Firefox 42 installation build is about to start...."    

  #cd ../firefox/ffx42/
  #debug_logs "In ffx42 directory, Firefox 42 installation build is about to start ...."
  #make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  #if [ $? != 0 ];then
  #  error_logs "Error in making Firefox 42 installation build."
  #  echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
  #  exit 1
  #fi
  #debug_logs "Firefox 42 installation build, released successfully."

  #cd -

  debug_logs "Firefox 43 installation build is about to start...."

  cd ../firefox/ffx43/
  debug_logs "In ffx43 directory, Firefox 43 installation build is about to start ...."
  make 1>>$BUILD_LOG_FILE 2>>$BUILD_ERR_FILE
  if [ $? != 0 ];then
    error_logs "Error in making Firefox 43 installation build."
    echo -e "`date +"%F %X"`|For detail see the file \033[1;31;49m$BUILD_ERR_FILE\033[0m"
    exit 1
  fi
  debug_logs "Firefox 43 installation build, released successfully."

  cd -

  chmod +x rbu_setup.sh
  cp $GET_LINUX_RELEASE rbu_setup.sh  $RBU_RELEASE_DIR

  #Make RBU setup build
  $MAKESELF --current $RBU_RELEASE_DIR $RBU_RELEASE_DIR/rbu_setup.`./$GET_BUILD_RELEASE -r`.`./$GET_BUILD_RELEASE -b`_$NSRELEASE.bin "rbu_setup.`./$GET_BUILD_RELEASE -r`.`./$GET_BUILD_RELEASE -b`" ./rbu_setup.sh 1>> $BUILD_LOG_FILE 2>> $BUILD_ERR_FILE

  #Redhat
  $MAKESELF --current $RBU_RELEASE_DIR $RBU_RELEASE_DIR/rbu_setup.`./$GET_BUILD_RELEASE -r`.`./$GET_BUILD_RELEASE -b`_Redhat_64.bin "rbu_setup.`./$GET_BUILD_RELEASE -r`.`./$GET_BUILD_RELEASE -b`" ./rbu_setup.sh 1>> $BUILD_LOG_FILE 2>> $BUILD_ERR_FILE
 
  #Copy build in 10.10.30.16
  if [ "X$BUILD_OPT" = "X7" ];then
    copy_build
  fi
}  

function get_input()
{
  input=""
  while [ "${input}x" == "x" ]
  do
    read input
  done
  echo $input
}

usages()
{
  echo "Please select one options from following..."
  echo -e "\033[1;34;49m1 [product]\033[0m         - for product build. Product build contain ns, cmon, lps, statsc, gui hpd ,nf and browser builds."
  echo -e "\033[1;34;49m2 [all]\033[0m             - for all build. All build contain thirdparty, help, ns, cmon, lps, statsc, gui ,nf and hpd builds."
  echo -e "\033[1;34;49m3 [thirdparty]\033[0m      - for only thirdparty build."
  echo -e "\033[1;34;49m4 [help]\033[0m            - for only help build."
  echo -e "\033[1;34;49m5 [thirdparty_help]\033[0m - for thirdparty and help only."
  echo -e "\033[1;34;49m6 [cavBin]\033[0m          - for CavBin."
  echo -e "\033[1;34;49m7 [rbuBin]\033[0m          - for rbuBin containing: all NSBrowser binaries, reqiured extensions, sample profiles etc."
  echo -e "\033[1;34;49m8 [CavProd]\033[0m         - for CavBin: all NSBrowser binaries, reqiured extensions, Cav_bin etc."
}

set_opt()
{
  if [ "X$1" = "Xproduct" ];then
    BUILD_OPT=1
  elif [ "X$1" = "Xall" ];then
    BUILD_OPT=2
  elif [ "X$1" = "Xthirdparty" ];then
    BUILD_OPT=3
  elif [ "X$1" = "Xhelp" ];then
    BUILD_OPT=4
  elif [ "X$1" = "Xthirdparty_help" ];then
    BUILD_OPT=5
  elif [ "X$1" = "XcavBin" ];then
    BUILD_OPT=6
  elif [ "X$1" = "XrbuBin" ];then
    BUILD_OPT=7
  elif [ "X$1" = "XCavProd" ];then
    BUILD_OPT=8
  fi 
}

UPDATE_CVS=1
if [ "X$1" = "X-nocvs" ]; then
   UPDATE_CVS=0
   shift
fi

if [ "X$1" = "X" ];then
  usages
  BUILD_OPT=`get_input`
  set_opt $BUILD_OPT
else
  #defalut detting 
  BUILD_OPT=$1
  set_opt $BUILD_OPT
fi


if [ "X$BUILD_OPT" = "X1" -o "X$BUILD_OPT" = "X2" -o "X$BUILD_OPT" = "X3" -o "X$BUILD_OPT" = "X4" -o "X$BUILD_OPT" = "X5" -o "X$BUILD_OPT" = "X6" -o "X$BUILD_OPT" = "X7" -o "X$BUILD_OPT" = "X8" -o "X$BUILD_OPT" = "X9" -o "X$BUILD_OPT" = "X10" ];then
  if [ "$UPDATE_CVS" = "1" ]; then
    cvs_update_and_diff
  fi
else
  echo "'$BUILD_OPT' is invalid option."
  exit 0
fi

if [ "X$BUILD_OPT" = "X1" ];then 
  make_product_build
elif [ "X$BUILD_OPT" = "X2" ];then
  make_thirdparty_build_only
  make_help_build_only
  make_product_build
elif [ "X$BUILD_OPT" = "X3" ];then
  make_thirdparty_build_only
elif [ "X$BUILD_OPT" = "X4" ];then
  make_help_build_only
elif [ "X$BUILD_OPT" = "X5" ];then
  make_thirdparty_build_only
  make_help_build_only
elif [ "X$BUILD_OPT" = "X6" ];then
  make_thirdparty_build_only
  #make_rpm_build 
  make_help_build_only
  make_product_build
  make complete
  make complete_rhel 
elif [ "X$BUILD_OPT" = "X7" ];then
  make_rbu_build
elif [ "X$BUILD_OPT" = "X8" ];then
  #make_thirdparty_build_only
  #make_rpm_build 
  make_help_build_only
  make_product_build
  make complete 
  make complete_rhel
elif [ "X$BUILD_OPT" = "X9" ];then
  make_rbu_build
  make_thirdparty_build_only
  make_help_build_only
  make_product_bui
elif [ "X$BUILD_OPT" = "X10" ];then
  make_rbu_build
  make_thirdparty_build_only
  #make_rpm_build 
  make_help_build_only
  make_product_build
  make complete
  make complete_rhel 
fi

# Added for build copying and upgrading QA servers
#Build_File=`cat $BUILD_LOG_FILE |tail -3 |head -2 |tail -1 |cut -d '"' -f2`

# Added by Niraj Panda
# Reason for modification:
# As we have added make_browser_ext_build module in 4.1.6
# to make firefox extension build which would be logged at the end of log file
# Previous Build_File command was unable to return exact file in that case
# Which is replaced by regex match in current code


hostip=$(hostname -I| awk '{print $1}')
if [ $hostip == "10.10.30.19" ]; then
  Build_File=$(egrep 'Self-extractible archive "../export/builds/netstorm_all[0-9.]+.Ubuntu1204_64.bin' ${BUILD_LOG_FILE} | head -1 |cut -d '"' -f2 )
  Build_File_Name="../$Build_File"
elif [ $hostip == "10.10.30.95" ]; then
  Build_File=$(egrep 'Self-extractible archive "../export/builds/netstorm_all[0-9.]+.Ubuntu1604_64.bin' ${BUILD_LOG_FILE} | head -1|cut -d '"' -f2 )
  Build_File_Name="../$Build_File"
fi

Build_Name=`cat $BUILD_LOG_FILE|tail -3 |head -1 |cut -d '/' -f6 |cut -d '"' -f1`
echo "Build name is=$Build_File" 

if [ $hostip == "10.10.30.95" ]; then
     check_cav_upload
     make_hpi_build
     make_nf_build
else
    check_cav_upload
    make_hpi_build
fi


if [ $hostip == "10.10.30.19" ];then
  copy_build_to_cloud_machine_ub12
  check_is_test_running
  upgrade_automation_server

# Added by Ranjeet
# Reason : Upgrade build and start automation on 97 machine 

elif [ $hostip == "10.10.30.95" ]; then
#  start_tag
  automation 
  copy_build_to_cloud_machine_ub16
  send_skype_msg -u 'djsethi1997@gmail.com' -p 'yoyo98765' -g 'Cavisson Build Updates' -m "<b>Builds are made and uploaded</b><br/><b>Tagging is now started</b>"
  start_tag
  upgrade_automation_server2
fi

#if [ $hostip == "10.10.30.95" ]; then 
 #    check_cav_upload
  #   make_hpi_build
   #  make_nf_build
#else 
 #   check_cav_upload
  #  make_hpi_build 
#fi 

exit 0
