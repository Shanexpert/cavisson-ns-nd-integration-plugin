#!/bin/bash
#######################################################################################################
# Name   : nsi_db_get_error_codes
# Syntax : nsi_db_get_error_codes --testrun <value> [--object <value>] 
# 
#   Author : Ankit Agarwal
#   Date :   26 April 2012
#   Purpose : This shell will take data from error code table(ect.csv) of a 
#             particular test ,if  that table does not exist then it will 
#             use nsu_get_errors shell internally.
#             It will return only used error codes (No Undef error will come)
#  Note: Here bracket [] show agrument is optional, and bracket <> show 
#        argument value
#
# Example : nsi_db_get_error_codes --testrun 3776 --object 0
#
#
#########################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################
#Set default values of variables
TRNUM=""
OBJECT=""
ERCODE=""
ERNAME=""
OBTY=""
FILE_PATH=""
ALL="0"


########################################################################
#                       Functions's Definitions
#######################################################################

#Function for displaying usage
usage()
{
  echo "$*"
  echo "Usage:"
  echo "$0 --testrun <value> --object<value>"
  echo ""
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --object is object selection(0-URL, 1-Page, 2-Transaction, 3-Session), which is optional argument."
  exit -1
}

#Function for checking mandatory arguments
check_arg()
{
   if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
   fi
}


########################################################################
#                            calling functions
########################################################################

#Parsing the arguments
while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        TRNUM=$1;;
    "--object")
        shift
        OBJECT=$1;;
    --*) usage "Invalid options";;
    *) usage ;;
  esac
  shift
done

#Checking mendatory arguments
check_arg


#Checking if Test run exist or not
if [ ! -d $NS_WDIR/logs/TR$TRNUM ]; then
   usage "Test run do not exist"
fi


#Checking Object type 
if [ "X$OBJECT" == "X" ]; then
  ALL=1
elif [ $OBJECT -gt 3 -o $OBJECT -lt 0 ];then
  usage "Invalid object type"
fi


#Setting file path
FILE_PATH=$NS_WDIR/logs/TR$TRNUM/reports/csv/ect.csv

#Checking if ect.csv file exist 
if [ -f $FILE_PATH ];then
  echo "Object|ErrorCode|ErrorName"
  #parsing the ect.csv file
  while read line;do
    OBTY=`echo $line | cut -d',' -f1`
    ERNAME=`echo $line | cut -d',' -f3`
    ECODE=`echo $line | cut -d',' -f2`
    case $ERNAME in
      Undef*)continue;;
      *)if [ $ALL -eq 1 ];then
          echo "$OBTY|$ECODE|$ERNAME"
        elif [ $OBTY -eq $OBJECT ];then
          echo "$OBTY|$ECODE|$ERNAME"
        else
          continue
        fi;;
    esac
  done <$FILE_PATH
#If ect.csv do not exist
else
  if [ $ALL -eq 1 ];then
     for i in 0 1 2 3 
       do
         $NS_WDIR/bin/nsu_get_errors $i 1 0 1 >tmp1 
         while read line;do
           echo "$i $line" >>tmp2
         done <tmp1
         rm tmp1
       done
  else
    $NS_WDIR/bin/nsu_get_errors $OBJECT 1 0 1 >tmp1
    while read line;do
      echo "$OBJECT $line" >>tmp2
    done <tmp1
    rm tmp1
       
  fi
  echo "Object|ErrorCode|ErrorName"
    while read line;do
      OBTY=`echo $line |awk '{print $1}'`
      ERNAME=`echo $line |awk '{print $4}'`
      ECODE=`echo $line |awk '{print $2}'`
      echo "$OBTY|$ECODE|$ERNAME"
    done<tmp2
    rm tmp2
fi

