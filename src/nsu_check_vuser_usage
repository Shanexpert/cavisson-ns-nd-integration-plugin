#!/bin/sh

#----------------------------------------------------------------------
# Name    :    nsu_check_vuser
# Author  :    Jagannath Dora
# Purpose :    This shell will calculate the Avg.,max vuser,Avg vuser/hour,Max vuser/hour and Page download compled/sec max and per hour
# Usage   :    nsu_check_vuser_usage -d  <No of Days> 
# Modification History:
#   22/06/20:  Jagannath
#   04/09/20:  Jagannath
# jq must be installed on the machine . jq is used here to  convert json .data
#Tomcat Must be running on the blade
#----------------------------------------------------


IP=$(grep NSAdminIP /home/cavisson/etc/cav.conf |awk -F '[ /]' '{print $2}')
PORT=$(nsu_show_all_netstorm |grep $(echo $NS_WDIR|awk -F '/' '{print $4}')|awk -F '|' '{print $22}'|tail -1)
rm .data > /dev/null 2>&1
usage()
{
 echo "
 Pass the arguments with shell as and tomcat must be running:
 $0 -m <00:00:00> -d <No of Days> For last N number of days
 $0 -m <00:00:00> -x <MM/DD/YYYY-HH:MM:SS MM/DD/YYYY-HH:MM:SS> For provided Time" 
 exit 1
}


#Read data from F
read_graph_data(){
max=$(cat .data|jq -r '[.Samples[].graphValue]|max' 2> /dev/null)
avg=$(cat .data|jq -r '[.Samples[].graphValue]|add/length' 2> /dev/null)
rm .data > /dev/null 2>&1
if [[ $max == '' ]]
then
continue
fi
if [[ $(echo "$max < 0"|bc -l) -eq 1 ]]
then
max=0
fi
}

generate_data(){
read_graph_data
avuser=`echo $avg`
dp=$(printf "%.3f" $(echo $i|awk -F '|' '{print $3}'|awk -F ':' '{print $1 + $2 / 60 + $3 / 3600}'))
avuh=`printf "%.3f" $(echo "$dp * $avuser"|bc)`
avum=$(echo "$dp * $max"|bc)
mvu=`echo $max`
}


generate_pdc(){
read_graph_data
apdc=`echo $avg`
apdch=`printf "%.3f" $(echo "$dp * $apdc"|bc)`
pdcm=`printf "%.3f" $(echo "3600 * $max"|bc)`
maxpvs=`echo $max`
}

################################################################################
#if [[ "$1" = "-d" ]] && [[ "$2" =~ ^[0-500]+$ ]]; then
	if [[ "$1" = "-m" ]] && [[ "$2" != '' ]] && [[ "$3" = "-d" ]] && echo "$4" | grep -qE '^[0-9]+$' ;
	then
	nsu_show_test_logs -s $4 -d $2-23:30:00 -r|grep -vw "Scenario Name" |awk -F '|' '{print $3"|"$6"|"$7}' > $NS_WDIR/raw_test_run.txt
	echo Showing Data of $4 day where IP is $IP port is $PORT
	elif [[ "$1" = "-m" ]] && [[ "$2" != '' ]] && [[ "$3" = "-x" ]] && [[ "$4" != '' ]] && [[ "$5" != '' ]]
	then 
	nsu_show_test_logs  -d $2-23:00:00 -x "$4 $5" -r|grep -vw "Scenario Name" |awk -F '|' '{print $3"|"$6"|"$7}' > $NS_WDIR/raw_test_run.txt
	else 
	usage	
	fi
if [ -s $NS_WDIR/raw_test_run.txt ]
then
    echo ""
else
	echo "No TR has been Found"
fi
#nsu_show_test_logs -s $2 -d 00:00:60-23:30:00 -r|grep -v "Scenario" |awk -F '|' '{print $3"|"$6"|"$7}' > $NS_WDIR/raw_test_run.txt
#nsu_show_test_logs -r|grep 28454| awk -F '|' '{print $3"|"$6"|"$7}' > $NS_WDIR/raw_test_run.txt
sed -i "s/ /|/g" $NS_WDIR/raw_test_run.txt #remove blank space
sed -i "s/||/|/g" $NS_WDIR/raw_test_run.txt #replace blank space with | because some TNAME are having spaces 
awk -F '[| ]' '{print $1"|"$3"|"$4"|"$2}' $NS_WDIR/raw_test_run.txt > $NS_WDIR/valid_run_log_test   
echo "Date      |TR    |DURATION|AVU |MVU |AVUH | MVUH |PVS    |PVH   "|tee $NS_WDIR/vuser_data.report 
for i in `cat $NS_WDIR/valid_run_log_test`
do
tr=$(echo $i|awk -F '|' '{print $1}')        #TR
start_time=$(echo $i|awk -F '|' '{print $2}') #
start_date=$(date -d $(echo $i|awk -F '|' '{print $4}') +%m/%d/%Y)
ste=$(date -d "$start_time $start_date" +%s)
dseconds=$(echo $(echo $i|awk -F '|' '{print $3}') | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 + 3600 }') #Duration in seconds
#echo $dseconds
end_time_in_sec=$(($ste + $dseconds))
end_time=$(date -d @$end_time_in_sec +%H:%M:%S)
end_date=$(date -d @$end_time_in_sec +%m/%d/%Y)
#Vector Controller>EOverall>EOverall
#PG is for Pagedownload with same vector 
wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=1&graphId=1&vectorName=Controller%3EOverall%3EOverall&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs 
gzip -d .data.gz 
generate_data
PG=1				
#Vector Controller>Overall
if [[ $avuser == -1 ]]
then
	#rm .data
	wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=1&graphId=1&vectorName=Controller%3EOverall&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
	gzip -d .data.gz
	generate_data
	PG=2
	if [[ $avuser == -1 ]]
	then
		#Vector Controller  NS
		#rm .data
		wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=1&graphId=1&vectorName=&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
		gzip -d .data.gz
		generate_data
		PG=3
		if [[ $avuser == -1 ]]
		then	
			#Vector Controller  NS Group based
			#rm .data
			wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=1&graphId=1&vectorName=Overall&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
			gzip -d .data.gz
			generate_data
			PG=4
		fi
	fi
fi

#####Page Download Completed /sec
if [[ $PG == 1 ]]
then 
	wget -O .data.gz "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=4&graphId=10&vectorName=Controller%3EOverall%3EOverall&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
	gzip -d .data.gz
	generate_pdc

elif [[ $PG == 2 ]]
then
        #Non group NC
        wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=4&graphId=10&vectorName=Controller%3EOverall&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
        gzip -d .data.gz
        generate_pdc	
########NS######	
elif [[ $PG == 3 ]]
then
	wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=4&graphId=10&vectorName=&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
	gzip -d .data.gz
	generate_pdc
else 
	#PVS
	wget -O .data.gz  "http://$IP:$PORT/DashboardServer/web/dev/checkGraphDatav1?testRun=$tr&startTime=$start_date%20$start_time&endTime=$end_date%20$end_time&groupId=4&graphId=10&vectorName=Overall&mode=2&strict=false&isLongFormat&token=" --no-check-certificate 2>>$NS_WDIR/wget_logs
	gzip -d .data.gz
	generate_pdc
fi


echo  "$start_date|$tr|$(echo $i|awk -F '|' '{print $3}')|$avuser|$mvu|$avuh|$avum|$maxpvs|$pdcm"
#echo  "$start_date|$tr|$(echo $i|awk -F '|' '{print $3}')|$avuser|$max|${avuh%.2}|${avum%.*}|${maxp%.*}|${pdcm%.2}"
done 2>&1 |tee -a $NS_WDIR/vuser_data.report
#done 2>&1 |tee .vuser_data 
#cat .vuser_data >> $NS_WDIR/vuser_data.report
