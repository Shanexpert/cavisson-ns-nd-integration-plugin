/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_ns_5fnvm_5fmsg_5fdef_2eproto__INCLUDED
#define PROTOBUF_C_ns_5fnvm_5fmsg_5fdef_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _NsMsg1Int NsMsg1Int;
typedef struct _NsMsg1UInt NsMsg1UInt;
typedef struct _NsMsg1Str NsMsg1Str;
typedef struct _NsMsg1Double NsMsg1Double;
typedef struct _NsMsg1Long NsMsg1Long;
typedef struct _NsMsg2IS NsMsg2IS;
typedef struct _NsMsg2SI NsMsg2SI;
typedef struct _NsMsg2II NsMsg2II;
typedef struct _NsMsg2SS NsMsg2SS;
typedef struct _NsMsg2SD NsMsg2SD;
typedef struct _NsMsg2SUI NsMsg2SUI;
typedef struct _NsMsg3III NsMsg3III;
typedef struct _NsMsg3IIS NsMsg3IIS;
typedef struct _NsMsg3ISI NsMsg3ISI;
typedef struct _NsMsg3ISS NsMsg3ISS;
typedef struct _NsMsg3SII NsMsg3SII;
typedef struct _NsMsg3SIS NsMsg3SIS;
typedef struct _NsMsg3SSI NsMsg3SSI;
typedef struct _NsMsg3SSS NsMsg3SSS;
typedef struct _NsMsg3IID NsMsg3IID;
typedef struct _NsMsg4SSSS NsMsg4SSSS;
typedef struct _NsMsg4SSSI NsMsg4SSSI;
typedef struct _NsMsgFormApi NsMsgFormApi;
typedef struct _NsMsgStartUser NsMsgStartUser;
typedef struct _NsMsg9SSISSSSSS NsMsg9SSISSSSSS;
typedef struct _NsMsg9ISISSSIII NsMsg9ISISSSIII;


/* --- enums --- */


/* --- messages --- */

struct  _NsMsg1Int
{
  ProtobufCMessage base;
  int32_t field1;
};
#define NS_MSG1__INT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg1__int__descriptor) \
    , 0 }


struct  _NsMsg1UInt
{
  ProtobufCMessage base;
  uint32_t field1;
};
#define NS_MSG1__UINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg1__uint__descriptor) \
    , 0 }


struct  _NsMsg1Str
{
  ProtobufCMessage base;
  char *field1;
};
#define NS_MSG1__STR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg1__str__descriptor) \
    , NULL }


struct  _NsMsg1Double
{
  ProtobufCMessage base;
  double field1;
};
#define NS_MSG1__DOUBLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg1__double__descriptor) \
    , 0 }


struct  _NsMsg1Long
{
  ProtobufCMessage base;
  uint64_t field1;
};
#define NS_MSG1__LONG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg1__long__descriptor) \
    , 0 }


struct  _NsMsg2IS
{
  ProtobufCMessage base;
  int32_t field1;
  char *field2;
};
#define NS_MSG2__IS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg2__is__descriptor) \
    , 0, NULL }


struct  _NsMsg2SI
{
  ProtobufCMessage base;
  char *field1;
  int32_t field2;
};
#define NS_MSG2__SI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg2__si__descriptor) \
    , NULL, 0 }


struct  _NsMsg2II
{
  ProtobufCMessage base;
  int32_t field1;
  int32_t field2;
};
#define NS_MSG2__II__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg2__ii__descriptor) \
    , 0, 0 }


struct  _NsMsg2SS
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
};
#define NS_MSG2__SS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg2__ss__descriptor) \
    , NULL, NULL }


struct  _NsMsg2SD
{
  ProtobufCMessage base;
  char *field1;
  double field2;
};
#define NS_MSG2__SD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg2__sd__descriptor) \
    , NULL, 0 }


struct  _NsMsg2SUI
{
  ProtobufCMessage base;
  char *field1;
  uint32_t field2;
};
#define NS_MSG2__SUI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg2__sui__descriptor) \
    , NULL, 0 }


struct  _NsMsg3III
{
  ProtobufCMessage base;
  int32_t field1;
  int32_t field2;
  int32_t field3;
};
#define NS_MSG3__III__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__iii__descriptor) \
    , 0, 0, 0 }


struct  _NsMsg3IIS
{
  ProtobufCMessage base;
  int32_t field1;
  int32_t field2;
  char *field3;
};
#define NS_MSG3__IIS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__iis__descriptor) \
    , 0, 0, NULL }


struct  _NsMsg3ISI
{
  ProtobufCMessage base;
  int32_t field1;
  char *field2;
  int32_t field3;
};
#define NS_MSG3__ISI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__isi__descriptor) \
    , 0, NULL, 0 }


struct  _NsMsg3ISS
{
  ProtobufCMessage base;
  int32_t field1;
  char *field2;
  char *field3;
};
#define NS_MSG3__ISS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__iss__descriptor) \
    , 0, NULL, NULL }


struct  _NsMsg3SII
{
  ProtobufCMessage base;
  char *field1;
  int32_t field2;
  int32_t field3;
};
#define NS_MSG3__SII__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__sii__descriptor) \
    , NULL, 0, 0 }


struct  _NsMsg3SIS
{
  ProtobufCMessage base;
  char *field1;
  int32_t field2;
  char *field3;
};
#define NS_MSG3__SIS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__sis__descriptor) \
    , NULL, 0, NULL }


struct  _NsMsg3SSI
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  int32_t field3;
};
#define NS_MSG3__SSI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__ssi__descriptor) \
    , NULL, NULL, 0 }


struct  _NsMsg3SSS
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  char *field3;
};
#define NS_MSG3__SSS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__sss__descriptor) \
    , NULL, NULL, NULL }


struct  _NsMsg3IID
{
  ProtobufCMessage base;
  int32_t field1;
  int32_t field2;
  double field3;
};
#define NS_MSG3__IID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg3__iid__descriptor) \
    , 0, 0, 0 }


struct  _NsMsg4SSSS
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  char *field3;
  char *field4;
};
#define NS_MSG4__SSSS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg4__ssss__descriptor) \
    , NULL, NULL, NULL, NULL }


struct  _NsMsg4SSSI
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  char *field3;
  int32_t field4;
};
#define NS_MSG4__SSSI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg4__sssi__descriptor) \
    , NULL, NULL, NULL, 0 }


struct  _NsMsgFormApi
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  int32_t field3;
  int32_t field4;
  size_t n_fieldn;
  char **fieldn;
};
#define NS_MSG__FORM_API__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg__form_api__descriptor) \
    , NULL, NULL, 0, 0, 0,NULL }


struct  _NsMsgStartUser
{
  ProtobufCMessage base;
  int32_t user_id;
  int32_t sess_idx;
  int32_t sess_inst;
  char *script_name;
  int32_t num_ka_pct;
  int32_t num_ka_min;
  int32_t max_ka;
  char *ua_string;
  uint32_t group_id;
  char *runlogic_name;
  char *package_name;
};
#define NS_MSG__START_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg__start_user__descriptor) \
    , 0, 0, 0, NULL, 0, 0, 0, NULL, 0, NULL, NULL }


struct  _NsMsg9SSISSSSSS
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  int32_t field3;
  char *field4;
  char *field5;
  char *field6;
  char *field7;
  char *field8;
  char *field9;
};
#define NS_MSG9__SSISSSSSS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg9__ssissssss__descriptor) \
    , NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _NsMsg9ISISSSIII
{
  ProtobufCMessage base;
  int32_t field1;
  char *field2;
  int32_t field3;
  char *field4;
  char *field5;
  char *field6;
  int32_t field7;
  int32_t field8;
  int32_t field9;
};
#define NS_MSG9__ISISSSIII__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_msg9__isisssiii__descriptor) \
    , 0, NULL, 0, NULL, NULL, NULL, 0, 0, 0 }


/* NsMsg1Int methods */
void   ns_msg1__int__init
                     (NsMsg1Int         *message);
size_t ns_msg1__int__get_packed_size
                     (const NsMsg1Int   *message);
size_t ns_msg1__int__pack
                     (const NsMsg1Int   *message,
                      uint8_t             *out);
size_t ns_msg1__int__pack_to_buffer
                     (const NsMsg1Int   *message,
                      ProtobufCBuffer     *buffer);
NsMsg1Int *
       ns_msg1__int__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg1__int__free_unpacked
                     (NsMsg1Int *message,
                      ProtobufCAllocator *allocator);
/* NsMsg1UInt methods */
void   ns_msg1__uint__init
                     (NsMsg1UInt         *message);
size_t ns_msg1__uint__get_packed_size
                     (const NsMsg1UInt   *message);
size_t ns_msg1__uint__pack
                     (const NsMsg1UInt   *message,
                      uint8_t             *out);
size_t ns_msg1__uint__pack_to_buffer
                     (const NsMsg1UInt   *message,
                      ProtobufCBuffer     *buffer);
NsMsg1UInt *
       ns_msg1__uint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg1__uint__free_unpacked
                     (NsMsg1UInt *message,
                      ProtobufCAllocator *allocator);
/* NsMsg1Str methods */
void   ns_msg1__str__init
                     (NsMsg1Str         *message);
size_t ns_msg1__str__get_packed_size
                     (const NsMsg1Str   *message);
size_t ns_msg1__str__pack
                     (const NsMsg1Str   *message,
                      uint8_t             *out);
size_t ns_msg1__str__pack_to_buffer
                     (const NsMsg1Str   *message,
                      ProtobufCBuffer     *buffer);
NsMsg1Str *
       ns_msg1__str__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg1__str__free_unpacked
                     (NsMsg1Str *message,
                      ProtobufCAllocator *allocator);
/* NsMsg1Double methods */
void   ns_msg1__double__init
                     (NsMsg1Double         *message);
size_t ns_msg1__double__get_packed_size
                     (const NsMsg1Double   *message);
size_t ns_msg1__double__pack
                     (const NsMsg1Double   *message,
                      uint8_t             *out);
size_t ns_msg1__double__pack_to_buffer
                     (const NsMsg1Double   *message,
                      ProtobufCBuffer     *buffer);
NsMsg1Double *
       ns_msg1__double__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg1__double__free_unpacked
                     (NsMsg1Double *message,
                      ProtobufCAllocator *allocator);
/* NsMsg1Long methods */
void   ns_msg1__long__init
                     (NsMsg1Long         *message);
size_t ns_msg1__long__get_packed_size
                     (const NsMsg1Long   *message);
size_t ns_msg1__long__pack
                     (const NsMsg1Long   *message,
                      uint8_t             *out);
size_t ns_msg1__long__pack_to_buffer
                     (const NsMsg1Long   *message,
                      ProtobufCBuffer     *buffer);
NsMsg1Long *
       ns_msg1__long__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg1__long__free_unpacked
                     (NsMsg1Long *message,
                      ProtobufCAllocator *allocator);
/* NsMsg2IS methods */
void   ns_msg2__is__init
                     (NsMsg2IS         *message);
size_t ns_msg2__is__get_packed_size
                     (const NsMsg2IS   *message);
size_t ns_msg2__is__pack
                     (const NsMsg2IS   *message,
                      uint8_t             *out);
size_t ns_msg2__is__pack_to_buffer
                     (const NsMsg2IS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg2IS *
       ns_msg2__is__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg2__is__free_unpacked
                     (NsMsg2IS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg2SI methods */
void   ns_msg2__si__init
                     (NsMsg2SI         *message);
size_t ns_msg2__si__get_packed_size
                     (const NsMsg2SI   *message);
size_t ns_msg2__si__pack
                     (const NsMsg2SI   *message,
                      uint8_t             *out);
size_t ns_msg2__si__pack_to_buffer
                     (const NsMsg2SI   *message,
                      ProtobufCBuffer     *buffer);
NsMsg2SI *
       ns_msg2__si__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg2__si__free_unpacked
                     (NsMsg2SI *message,
                      ProtobufCAllocator *allocator);
/* NsMsg2II methods */
void   ns_msg2__ii__init
                     (NsMsg2II         *message);
size_t ns_msg2__ii__get_packed_size
                     (const NsMsg2II   *message);
size_t ns_msg2__ii__pack
                     (const NsMsg2II   *message,
                      uint8_t             *out);
size_t ns_msg2__ii__pack_to_buffer
                     (const NsMsg2II   *message,
                      ProtobufCBuffer     *buffer);
NsMsg2II *
       ns_msg2__ii__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg2__ii__free_unpacked
                     (NsMsg2II *message,
                      ProtobufCAllocator *allocator);
/* NsMsg2SS methods */
void   ns_msg2__ss__init
                     (NsMsg2SS         *message);
size_t ns_msg2__ss__get_packed_size
                     (const NsMsg2SS   *message);
size_t ns_msg2__ss__pack
                     (const NsMsg2SS   *message,
                      uint8_t             *out);
size_t ns_msg2__ss__pack_to_buffer
                     (const NsMsg2SS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg2SS *
       ns_msg2__ss__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg2__ss__free_unpacked
                     (NsMsg2SS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg2SD methods */
void   ns_msg2__sd__init
                     (NsMsg2SD         *message);
size_t ns_msg2__sd__get_packed_size
                     (const NsMsg2SD   *message);
size_t ns_msg2__sd__pack
                     (const NsMsg2SD   *message,
                      uint8_t             *out);
size_t ns_msg2__sd__pack_to_buffer
                     (const NsMsg2SD   *message,
                      ProtobufCBuffer     *buffer);
NsMsg2SD *
       ns_msg2__sd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg2__sd__free_unpacked
                     (NsMsg2SD *message,
                      ProtobufCAllocator *allocator);
/* NsMsg2SUI methods */
void   ns_msg2__sui__init
                     (NsMsg2SUI         *message);
size_t ns_msg2__sui__get_packed_size
                     (const NsMsg2SUI   *message);
size_t ns_msg2__sui__pack
                     (const NsMsg2SUI   *message,
                      uint8_t             *out);
size_t ns_msg2__sui__pack_to_buffer
                     (const NsMsg2SUI   *message,
                      ProtobufCBuffer     *buffer);
NsMsg2SUI *
       ns_msg2__sui__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg2__sui__free_unpacked
                     (NsMsg2SUI *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3III methods */
void   ns_msg3__iii__init
                     (NsMsg3III         *message);
size_t ns_msg3__iii__get_packed_size
                     (const NsMsg3III   *message);
size_t ns_msg3__iii__pack
                     (const NsMsg3III   *message,
                      uint8_t             *out);
size_t ns_msg3__iii__pack_to_buffer
                     (const NsMsg3III   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3III *
       ns_msg3__iii__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__iii__free_unpacked
                     (NsMsg3III *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3IIS methods */
void   ns_msg3__iis__init
                     (NsMsg3IIS         *message);
size_t ns_msg3__iis__get_packed_size
                     (const NsMsg3IIS   *message);
size_t ns_msg3__iis__pack
                     (const NsMsg3IIS   *message,
                      uint8_t             *out);
size_t ns_msg3__iis__pack_to_buffer
                     (const NsMsg3IIS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3IIS *
       ns_msg3__iis__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__iis__free_unpacked
                     (NsMsg3IIS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3ISI methods */
void   ns_msg3__isi__init
                     (NsMsg3ISI         *message);
size_t ns_msg3__isi__get_packed_size
                     (const NsMsg3ISI   *message);
size_t ns_msg3__isi__pack
                     (const NsMsg3ISI   *message,
                      uint8_t             *out);
size_t ns_msg3__isi__pack_to_buffer
                     (const NsMsg3ISI   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3ISI *
       ns_msg3__isi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__isi__free_unpacked
                     (NsMsg3ISI *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3ISS methods */
void   ns_msg3__iss__init
                     (NsMsg3ISS         *message);
size_t ns_msg3__iss__get_packed_size
                     (const NsMsg3ISS   *message);
size_t ns_msg3__iss__pack
                     (const NsMsg3ISS   *message,
                      uint8_t             *out);
size_t ns_msg3__iss__pack_to_buffer
                     (const NsMsg3ISS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3ISS *
       ns_msg3__iss__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__iss__free_unpacked
                     (NsMsg3ISS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3SII methods */
void   ns_msg3__sii__init
                     (NsMsg3SII         *message);
size_t ns_msg3__sii__get_packed_size
                     (const NsMsg3SII   *message);
size_t ns_msg3__sii__pack
                     (const NsMsg3SII   *message,
                      uint8_t             *out);
size_t ns_msg3__sii__pack_to_buffer
                     (const NsMsg3SII   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3SII *
       ns_msg3__sii__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__sii__free_unpacked
                     (NsMsg3SII *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3SIS methods */
void   ns_msg3__sis__init
                     (NsMsg3SIS         *message);
size_t ns_msg3__sis__get_packed_size
                     (const NsMsg3SIS   *message);
size_t ns_msg3__sis__pack
                     (const NsMsg3SIS   *message,
                      uint8_t             *out);
size_t ns_msg3__sis__pack_to_buffer
                     (const NsMsg3SIS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3SIS *
       ns_msg3__sis__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__sis__free_unpacked
                     (NsMsg3SIS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3SSI methods */
void   ns_msg3__ssi__init
                     (NsMsg3SSI         *message);
size_t ns_msg3__ssi__get_packed_size
                     (const NsMsg3SSI   *message);
size_t ns_msg3__ssi__pack
                     (const NsMsg3SSI   *message,
                      uint8_t             *out);
size_t ns_msg3__ssi__pack_to_buffer
                     (const NsMsg3SSI   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3SSI *
       ns_msg3__ssi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__ssi__free_unpacked
                     (NsMsg3SSI *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3SSS methods */
void   ns_msg3__sss__init
                     (NsMsg3SSS         *message);
size_t ns_msg3__sss__get_packed_size
                     (const NsMsg3SSS   *message);
size_t ns_msg3__sss__pack
                     (const NsMsg3SSS   *message,
                      uint8_t             *out);
size_t ns_msg3__sss__pack_to_buffer
                     (const NsMsg3SSS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3SSS *
       ns_msg3__sss__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__sss__free_unpacked
                     (NsMsg3SSS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg3IID methods */
void   ns_msg3__iid__init
                     (NsMsg3IID         *message);
size_t ns_msg3__iid__get_packed_size
                     (const NsMsg3IID   *message);
size_t ns_msg3__iid__pack
                     (const NsMsg3IID   *message,
                      uint8_t             *out);
size_t ns_msg3__iid__pack_to_buffer
                     (const NsMsg3IID   *message,
                      ProtobufCBuffer     *buffer);
NsMsg3IID *
       ns_msg3__iid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg3__iid__free_unpacked
                     (NsMsg3IID *message,
                      ProtobufCAllocator *allocator);
/* NsMsg4SSSS methods */
void   ns_msg4__ssss__init
                     (NsMsg4SSSS         *message);
size_t ns_msg4__ssss__get_packed_size
                     (const NsMsg4SSSS   *message);
size_t ns_msg4__ssss__pack
                     (const NsMsg4SSSS   *message,
                      uint8_t             *out);
size_t ns_msg4__ssss__pack_to_buffer
                     (const NsMsg4SSSS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg4SSSS *
       ns_msg4__ssss__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg4__ssss__free_unpacked
                     (NsMsg4SSSS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg4SSSI methods */
void   ns_msg4__sssi__init
                     (NsMsg4SSSI         *message);
size_t ns_msg4__sssi__get_packed_size
                     (const NsMsg4SSSI   *message);
size_t ns_msg4__sssi__pack
                     (const NsMsg4SSSI   *message,
                      uint8_t             *out);
size_t ns_msg4__sssi__pack_to_buffer
                     (const NsMsg4SSSI   *message,
                      ProtobufCBuffer     *buffer);
NsMsg4SSSI *
       ns_msg4__sssi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg4__sssi__free_unpacked
                     (NsMsg4SSSI *message,
                      ProtobufCAllocator *allocator);
/* NsMsgFormApi methods */
void   ns_msg__form_api__init
                     (NsMsgFormApi         *message);
size_t ns_msg__form_api__get_packed_size
                     (const NsMsgFormApi   *message);
size_t ns_msg__form_api__pack
                     (const NsMsgFormApi   *message,
                      uint8_t             *out);
size_t ns_msg__form_api__pack_to_buffer
                     (const NsMsgFormApi   *message,
                      ProtobufCBuffer     *buffer);
NsMsgFormApi *
       ns_msg__form_api__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg__form_api__free_unpacked
                     (NsMsgFormApi *message,
                      ProtobufCAllocator *allocator);
/* NsMsgStartUser methods */
void   ns_msg__start_user__init
                     (NsMsgStartUser         *message);
size_t ns_msg__start_user__get_packed_size
                     (const NsMsgStartUser   *message);
size_t ns_msg__start_user__pack
                     (const NsMsgStartUser   *message,
                      uint8_t             *out);
size_t ns_msg__start_user__pack_to_buffer
                     (const NsMsgStartUser   *message,
                      ProtobufCBuffer     *buffer);
NsMsgStartUser *
       ns_msg__start_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg__start_user__free_unpacked
                     (NsMsgStartUser *message,
                      ProtobufCAllocator *allocator);
/* NsMsg9SSISSSSSS methods */
void   ns_msg9__ssissssss__init
                     (NsMsg9SSISSSSSS         *message);
size_t ns_msg9__ssissssss__get_packed_size
                     (const NsMsg9SSISSSSSS   *message);
size_t ns_msg9__ssissssss__pack
                     (const NsMsg9SSISSSSSS   *message,
                      uint8_t             *out);
size_t ns_msg9__ssissssss__pack_to_buffer
                     (const NsMsg9SSISSSSSS   *message,
                      ProtobufCBuffer     *buffer);
NsMsg9SSISSSSSS *
       ns_msg9__ssissssss__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg9__ssissssss__free_unpacked
                     (NsMsg9SSISSSSSS *message,
                      ProtobufCAllocator *allocator);
/* NsMsg9ISISSSIII methods */
void   ns_msg9__isisssiii__init
                     (NsMsg9ISISSSIII         *message);
size_t ns_msg9__isisssiii__get_packed_size
                     (const NsMsg9ISISSSIII   *message);
size_t ns_msg9__isisssiii__pack
                     (const NsMsg9ISISSSIII   *message,
                      uint8_t             *out);
size_t ns_msg9__isisssiii__pack_to_buffer
                     (const NsMsg9ISISSSIII   *message,
                      ProtobufCBuffer     *buffer);
NsMsg9ISISSSIII *
       ns_msg9__isisssiii__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_msg9__isisssiii__free_unpacked
                     (NsMsg9ISISSSIII *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NsMsg1Int_Closure)
                 (const NsMsg1Int *message,
                  void *closure_data);
typedef void (*NsMsg1UInt_Closure)
                 (const NsMsg1UInt *message,
                  void *closure_data);
typedef void (*NsMsg1Str_Closure)
                 (const NsMsg1Str *message,
                  void *closure_data);
typedef void (*NsMsg1Double_Closure)
                 (const NsMsg1Double *message,
                  void *closure_data);
typedef void (*NsMsg1Long_Closure)
                 (const NsMsg1Long *message,
                  void *closure_data);
typedef void (*NsMsg2IS_Closure)
                 (const NsMsg2IS *message,
                  void *closure_data);
typedef void (*NsMsg2SI_Closure)
                 (const NsMsg2SI *message,
                  void *closure_data);
typedef void (*NsMsg2II_Closure)
                 (const NsMsg2II *message,
                  void *closure_data);
typedef void (*NsMsg2SS_Closure)
                 (const NsMsg2SS *message,
                  void *closure_data);
typedef void (*NsMsg2SD_Closure)
                 (const NsMsg2SD *message,
                  void *closure_data);
typedef void (*NsMsg2SUI_Closure)
                 (const NsMsg2SUI *message,
                  void *closure_data);
typedef void (*NsMsg3III_Closure)
                 (const NsMsg3III *message,
                  void *closure_data);
typedef void (*NsMsg3IIS_Closure)
                 (const NsMsg3IIS *message,
                  void *closure_data);
typedef void (*NsMsg3ISI_Closure)
                 (const NsMsg3ISI *message,
                  void *closure_data);
typedef void (*NsMsg3ISS_Closure)
                 (const NsMsg3ISS *message,
                  void *closure_data);
typedef void (*NsMsg3SII_Closure)
                 (const NsMsg3SII *message,
                  void *closure_data);
typedef void (*NsMsg3SIS_Closure)
                 (const NsMsg3SIS *message,
                  void *closure_data);
typedef void (*NsMsg3SSI_Closure)
                 (const NsMsg3SSI *message,
                  void *closure_data);
typedef void (*NsMsg3SSS_Closure)
                 (const NsMsg3SSS *message,
                  void *closure_data);
typedef void (*NsMsg3IID_Closure)
                 (const NsMsg3IID *message,
                  void *closure_data);
typedef void (*NsMsg4SSSS_Closure)
                 (const NsMsg4SSSS *message,
                  void *closure_data);
typedef void (*NsMsg4SSSI_Closure)
                 (const NsMsg4SSSI *message,
                  void *closure_data);
typedef void (*NsMsgFormApi_Closure)
                 (const NsMsgFormApi *message,
                  void *closure_data);
typedef void (*NsMsgStartUser_Closure)
                 (const NsMsgStartUser *message,
                  void *closure_data);
typedef void (*NsMsg9SSISSSSSS_Closure)
                 (const NsMsg9SSISSSSSS *message,
                  void *closure_data);
typedef void (*NsMsg9ISISSSIII_Closure)
                 (const NsMsg9ISISSSIII *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ns_msg1__int__descriptor;
extern const ProtobufCMessageDescriptor ns_msg1__uint__descriptor;
extern const ProtobufCMessageDescriptor ns_msg1__str__descriptor;
extern const ProtobufCMessageDescriptor ns_msg1__double__descriptor;
extern const ProtobufCMessageDescriptor ns_msg1__long__descriptor;
extern const ProtobufCMessageDescriptor ns_msg2__is__descriptor;
extern const ProtobufCMessageDescriptor ns_msg2__si__descriptor;
extern const ProtobufCMessageDescriptor ns_msg2__ii__descriptor;
extern const ProtobufCMessageDescriptor ns_msg2__ss__descriptor;
extern const ProtobufCMessageDescriptor ns_msg2__sd__descriptor;
extern const ProtobufCMessageDescriptor ns_msg2__sui__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__iii__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__iis__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__isi__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__iss__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__sii__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__sis__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__ssi__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__sss__descriptor;
extern const ProtobufCMessageDescriptor ns_msg3__iid__descriptor;
extern const ProtobufCMessageDescriptor ns_msg4__ssss__descriptor;
extern const ProtobufCMessageDescriptor ns_msg4__sssi__descriptor;
extern const ProtobufCMessageDescriptor ns_msg__form_api__descriptor;
extern const ProtobufCMessageDescriptor ns_msg__start_user__descriptor;
extern const ProtobufCMessageDescriptor ns_msg9__ssissssss__descriptor;
extern const ProtobufCMessageDescriptor ns_msg9__isisssiii__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_ns_5fnvm_5fmsg_5fdef_2eproto__INCLUDED */
