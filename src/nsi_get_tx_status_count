#!/bin/sh
#
# Name: nsi_get_tx_status_count
# Author: Neeraj Jain
# Purpsose: To error break down for one or all transactions
#           Called from nsu_gen_rep to generate data file used by Tran Detail GUI
#           If Done for all transactions, then combined total for all transactions is also given 
#           with transaction name as "ALL" (See below for sample output)
#
# Data will be sorted by trans name
# Ouput is in the following format:
# Command: nsi_get_tx_status_count --testrun 45768 --transidx 0 (For one transaction id 0) --starttime 12344 --endtime 12233
#Transaction Name|Status Code|Count
#trans1|64|15739
#
# Command: nsi_get_tx_status_count --testrun 45768 (For all transactions)
#Transaction Name|Status Code|Count
#trans1|64|15739
#trans10|73|15739
#trans11|74|15739
#trans12|75|15739
#trans13|76|15739
#trans14|77|15739
#trans15|78|15739
#trans16|79|15739
#trans17|80|15739
#trans18|81|15739
#trans19|82|15739
#trans2|65|15739
#trans20|83|15739
#trans21|84|15739
#trans22|85|15739
#trans23|86|15739
#trans24|87|15739
#trans25|88|15739
#trans26|89|15739
#trans27|90|15739
##trans28|91|15739
#trans29|92|15739
#trans3|66|15739
#trans30|93|15739
#trans31|94|15739
#trans32|95|15739
#trans4|67|15739
#trans5|68|15739
#trans6|69|15739
#trans7|70|15739
#trans8|71|15739
#trans9|72|15739
#ALL|64|15739
#ALL|65|15739
#ALL|66|15739
#ALL|67|15739
#ALL|68|15739
#ALL|69|15739
#ALL|70|15739
#ALL|71|15739
#ALL|72|15739
#ALL|73|15739
#ALL|74|15739
#ALL|75|15739
#ALL|76|15739
#ALL|77|15739
#ALL|78|15739
#ALL|79|15739
#ALL|80|15739
#ALL|81|15739
#ALL|82|15739
#ALL|83|15739
#ALL|84|15739
#ALL|85|15739
#ALL|86|15739
#ALL|87|15739
#ALL|88|15739
#ALL|89|15739
#ALL|90|15739
#ALL|91|15739
#ALL|92|15739
#ALL|93|15739
#ALL|94|15739
#ALL|95|15739
#
# 
# Exit Values: 
#  0 - Sucessful
#  -1 - Usage Error
#  1 - Query error
#
# Time taken by this program to get all transaction data is 20 seconds on QANS1 (192.168.1.36), 4 Gig memory
#   Duration : 5 Minutes
#   Transaction Report:  min  0.001 sec, avg  0.003 sec, max  0.586 sec, stddev  0.010 sec    TOT: completed 503,648/succ 0/TxErr64: 15,739/TxErr65: 15,739/TxErr66: 15,739/TxErr67: 15,739/TxErr68: 15,739/TxErr69: 15,739/TxErr70: 15,739/TxErr71: 15,739/TxErr72: 15,739/TxErr73: 15,739/TxErr74: 15,739/TxErr75: 15,739/TxErr76: 15,739/TxErr77: 15,739/TxErr78: 15,739/TxErr79: 15,739/TxErr80: 15,739/TxErr81: 15,739/TxErr82: 15,739/TxErr83: 15,739/TxErr84: 15,739/TxErr85: 15,739/TxErr86: 15,739/TxErr87: 15,739/TxErr88: 15,739/TxErr89: 15,739/TxErr90: 15,739/TxErr91: 15,739/TxErr92: 15,739/TxErr93: 15,739/TxErr94: 15,739/TxErr95: 15,739
#
# nsi_get_tx_status_count 45768
#   real    0m20.603s
#   user    0m0.018s
#   sys     0m0.014s
#
# Modification History:
#   02/09/11: Neeraj - Initial Version
# 

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

usage()
{
  if [ "X$1" != "X" ]; then
    echo "$1"
  fi
  echo ""
  echo "Usage: $0 --testrun <trnum> --transidx <trans index> --starttime <start timestamp> --endtime <end timestamp> --abs_starttime <absolute timestamp> --abs_endtime <absolute timestamp>"
  echo "Where:"
  echo "  <trnum> is the test run number for which data is required (e.g. 1234). It is mandatory argument."
  echo "  <trans index> is the numeric id of the transaction (optional). Default is all transactions."
  echo "  <start timestamp> and <end timestamp> are the timestamps (relative)"
  echo "  <absolute timestamp> and <absolute timestamp> are the timestamps (absolute)"
  echo ""

  exit -1
}

while [ "$1" != "" ];do
  case $1 in
    "--testrun")
        shift
        chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--starttime")
        shift
        chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
        chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--abs_starttime")
        shift
        chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--abs_endtime")
        shift
        chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    "--transidx")
        shift
        chk_args_of_option "--transidx" "$1"
        TRANSIDX=$1;;
    --*) usage "Invalid options";;
    *) usage ;;
  esac
  shift
done

handle_time_filters_in_ms $TRNUM

set_testrun_version_and_build 
if [ \( $VERSION -lt 414 \) -o \( $VERSION -eq 414 -a $BUILD -le 20 \) ]; then
  $0_old_tr $ALL_ARG
  exit 0
fi

# Setting query files
set_query_files $TRNUM


debug_logs()
{
  if [ "X$DEBUG" != "X0" ];then
    echo "$*"
  fi
}


if [ "X$TRANSIDX" == "X" ]; then
  TRANSIDX=All
fi


set_query_for_trans_errors_rpt()
{
  # To get count of a single tansaction by error codes
  SELECT="SELECT TransactionName AS \"Transaction Name\", TransactionRecord_$TRNUM.Status AS \"Status Code\", count(*) As \"Count\""

  FROM="FROM TransactionRecord_$TRNUM, TransactionTable_$TRNUM"

  if [ "$TRANSIDX" == "All" ]; then
    WHERE="WHERE TransactionRecord_$TRNUM.TransactionIndex = TransactionTable_$TRNUM.TransactionIndex AND TransactionRecord_$TRNUM.EndTime <> 0"
  else
    WHERE="WHERE TransactionRecord_$TRNUM.TransactionIndex = TransactionTable_$TRNUM.TransactionIndex AND TransactionRecord_$TRNUM.EndTime <> 0 AND TransactionRecord_$TRNUM.TransactionIndex = $TRANSIDX"
  fi

  if [ "X$STARTTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Starttime >= $STARTTIME"
  fi
  if [ "X$ENDTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Endtime <= $ENDTIME"
  fi
  if [ "X$ABS_STARTTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Starttime >= $ABS_STARTTIME"
  fi
  if [ "X$ABS_ENDTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Endtime <= $ABS_ENDTIME"
  fi

  GROUP="GROUP BY TransactionTable_$TRNUM.TransactionName, TransactionRecord_$TRNUM.Status"
  ORDER="ORDER BY TransactionTable_$TRNUM.TransactionName"
}

# This will generate counts for all transactions as total
set_query_for_trans_errors_rpt_total()
{
  # To get count of a single tansaction by error codes
  #SELECT="SELECT TransactionRecord_$TRNUM.Status AS \"Transaction Name|Status Code\", count(*) As \"Count\""
  SELECT="SELECT 'ALL|' || TransactionRecord_$TRNUM.Status AS \"Transaction Name|Status Code\", count(*) As \"Count\""

  FROM="FROM TransactionRecord_$TRNUM"

  WHERE="WHERE TransactionRecord_$TRNUM.EndTime <> 0"

  if [ "X$STARTTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Starttime >= $STARTTIME"
  fi
  if [ "X$ENDTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Endtime <= $ENDTIME"
  fi
  if [ "X$ABS_STARTTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Starttime >= $ABS_STARTTIME"
  fi
  if [ "X$ABS_ENDTIME" != "X" ]; then
    WHERE="$WHERE AND TransactionRecord_$TRNUM.Endtime <= $ABS_ENDTIME"
  fi
  GROUP="GROUP BY TransactionRecord_$TRNUM.Status"
  ORDER="ORDER BY TransactionRecord_$TRNUM.Status"

}



#run_query()
#{
#  #Add From clause
#  #TEMP_QUERY_CLAUSE is used just to see what query we ran to debug
#  TEMP_QUERY_CLAUSE=/tmp/q.$$
#  echo $SELECT >$TEMP_QUERY_CLAUSE
#  echo $FROM >>$TEMP_QUERY_CLAUSE
# echo $WHERE >>$TEMP_QUERY_CLAUSE
#  echo $GROUP >>$TEMP_QUERY_CLAUSE
#  echo $ORDER >>$TEMP_QUERY_CLAUSE

  #cat $TEMP_QUERY_CLAUSE

# OFILE="/tmp/t1.$$"
# EFILE="/tmp/t2.$$"

#This code for psql query must start from Column 1
#psql -A test cavisson >$OFILE <<+ 2>$EFILE
#$SELECT
#$FROM
#$WHERE
#$GROUP
#$ORDER
#+

#  if [ -s $EFILE ];then
#    cat $EFILE
#    clean_tmp_files
#    exit 1
#  fi
#}


#delete_not_needed_line1()
#{
#  #Delete last line which is num rows fetched
# sed '$d' $OFILE
#}

#delete_not_needed_line2()
#{
#  #Delete first and last line which is num rows fetched
#  sed '1d' $OFILE | sed '$d' 
#}

#clean_tmp_files()
#{
#  rm -f $OFILE $EFILE $TEMP_QUERY_CLAUSE
#}


set_query_for_trans_errors_rpt
run_nd_query
log_query
delete_not_needed_line1

if [ "$TRANSIDX" == "All" ]; then
  set_query_for_trans_errors_rpt_total
  run_nd_query
  log_query
  delete_not_needed_line2
fi
remove_files
exit 0
