#!/bin/bash

#######################################################################################################
# Name   : nsi_db_get_agg_obj_data
# Example:
# Initial version : --
#   Author: --
#   Date: --
# Modified version:
#   Author: Nikita Pandey
#   Date: 15 April 2012
#   Modification Details:
#     (1) Change input style.
#           Synatx Before change input style--
#             nsi_get_3x <TR-NUM> <select-fields> <obj-type> <group-by> <[limit]> <[offset]>
#           Synatx After change input style--
#           nsi_db_get_agg_obj_data --testrun <value> --field <value> --object <value> --group <value> [--runphase <value>]
#                        [--limit <limit>] [--offset <value>] [--script <value>] [--starttime <value>] [--endtime <value>]
#                         [--responsetime <value>] [--resptimeqmode <value>] [--status <value>]
#           Note: here bracket [] show agrument is optional, and bracket <> show argument value
#     (2) Example 
#         nsi_db_get_agg_obj_data --testrun 3776 --fields 4095 --object 0 --group 0 --runphase 2 --limit 100 --offset 0 --starttime 0 --endtime 10000
#         
#########################################################################################################


######################################################################
#                     Variables and init settings
#####################################################################

# Including nsi_db_utils
. $NS_WDIR/bin/nsi_db_utils

#Set environment variable NS_WDIR
#set_nswdir

# Set default values of variables
TRNUM=""
FIELD=""
OBJECT=""
GROUPBY=""
RUNPHASE=""
LIMIT=""
OFFSET=""
STATUS=-255
SCRIPT=-255
#STARTTIME=-255
#ENDTIME=-255
LOCATION="NO"
ACCESS="NO"
RESPONSETIME=-255
RESPTIMEQMODE=-255
GROUPBYSTATUS=-255
DEBUG=0 # 0 --> off
        # 1 --> on
RPO=0
SELECT="select"

#ACC_FLAG=0
########################################################################
#                       Functions's Definitions
#######################################################################

debug_logs()
{
  if [ "X$DEBUG" != "X0" ];then
    echo "$*"
  fi
}

usage()
{
  echo "$*"
  echo "Usage:"
  echo "$0 --testrun <value> --field <value> --object <value> --group <value> [--runphase <value>] [--limit <limit>] [--offset <value>] [--location <value>] [--access<value>] [--status<value>] [--script <value>] [--starttime <value> --endtime <value] --resptimeqmode<value> --responsetime<value> "
  echo ""
  echo "Where"
  echo "  --testrun is test run number, which is mandatory argument."
  echo "  --field is field selection(all, tried, success ....), which is mandatory argument."
  echo "  --object is object selection(0-URL, 1-Page, 2-Transaction, 3-Session), which is mandatory argument."
  echo "  --group is for group by option, which is optional argument."
  echo "  --runphase is 1 for run-time phase only, otherwise 0, which is optional argument."
  echo "  --limit is for limit (This is the number of results returned by query statment (e.g. 10 it will show first 10 records)), which is optional argument"
  echo " --offset is for offset (This is used to skip rows as specified by offset (e.g suppose you wanted to show results 11-20 then you can use offset 10)), which is optional argument"
  echo "  --location is for particular location selection, which is optional argument"
  echo "  --access is for particular access selection, which is optional argument"
  echo "  --status is selecting particular staus (status is 0 for Success only, positive for the Failure code, -1 for all failures -2 for All (Success and all failures)), which is optional argument"
  echo "  --script is for selecting particular script result, which is optional argument"
  echo "  --starttime and -endtime is for selecting result that comes under the given range, which is optional argument."
  echo "  --resptimeqmode is the selection of responsetime(1-lessthen, 2-greaterthen, 3-equal), which is optional argument."
  exit 1
}

chk_args()
{
  if [ "X$TRNUM" == "X" ]; then
    usage "Test run argument is missing"
  fi
  if [ "X$FIELD" == "X" ]; then
    usage "field selection is missing"
  fi
  if [ "X$OBJECT" == "X" ]; then
    usage "object type is missing"
  fi
}

add_obj_name()
{
  debug_logs "Method add_obj_name called, OBJECT = $OBJECT"
  if [ $OBJECT -eq 0 ];then
    EXCLUDE=1
    OBJ="UrlRecord_$TRNUM"
    FROM="FROM  URLRecord_$TRNUM"
    URLRECORD_TABLE_FLAG=1
    #if [ \( $GROUPBY -ne 0 -a $GROUPBY -lt 3 \) -o $RPO -eq 1 ];then
    if [  $GROUPBY -ne 0  -o $RPO -eq 1 ];then
        debug_logs "*****************"
	WHERE="WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance
      	AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex "
	FROM="$FROM, SessionRecord_$TRNUM"
	SESSIONRECORD_TABLE_FLAG=1
    fi

  elif [ $OBJECT -eq 1 ];then
    OBJ="PageRecord_$TRNUM"
    FROM="FROM  PageRecord_$TRNUM"
    PAGERECORD_TABLE_FLAG=1
    #if [ \( $GROUPBY -ne 0 -a $GROUPBY -lt 3 \) -o $RPO -eq 1 ];then
    if [  $GROUPBY -ne 0  -o $RPO -eq 1 ];then
        #WHERE="$WHERE AND $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance
        WHERE="WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance
      	AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex "
	FROM="$FROM, SessionRecord_$TRNUM"
	SESSIONRECORD_TABLE_FLAG=1
    fi
  elif [ $OBJECT -eq 2 ];then
    OBJ="TransactionRecord_$TRNUM"
    FROM="FROM TransactionRecord_$TRNUM"
    TRANSACTIONRECORD_TABLE_FLAG=1
    #if [ \( $GROUPBY -ne 0 -a $GROUPBY -lt 3 \) -o $RPO -eq 1 ];then
    if [  $GROUPBY -ne 0 -o $RPO -eq 1 ];then
	WHERE="WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance
      	AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex "
	FROM="$FROM, SessionRecord_$TRNUM"
	SESSIONRECORD_TABLE_FLAG=1
    fi
     
  elif [ $OBJECT -eq 3 ];then
    OBJ="SessionRecord_$TRNUM"
    FROM="FROM  SessionRecord_$TRNUM"
    SESSIONRECORD_TABLE_FLAG=1
  else
    echo "Invalid object-type (valid values 0-3)"
    exit 1
  fi
  
  debug_logs "add_obj_name: OBJ = $OBJ, FROM = $FROM"
 # groupby_loc_acc $OBJ

}
groupby_loc_acc()
{
  obj=$1
  debug_logs "Method groupby_loc_acc called, GROUPBY = $GROUPBY, RPO = $RPO"
  if [ \( $GROUPBY -ne 0 -a $GROUPBY -lt 4 \) -o $RPO -eq 1 ];then
    WHERE="WHERE $obj.SessionInstance = SessionRecord_$TRNUM.SessionInstance
    AND $obj.ChildIndex = SessionRecord_$TRNUM.ChildIndex "
    FROM="$FROM, SessionRecord_$TRNUM"
    SESSIONRECORD_TABLE_FLAG=1
  fi
  debug_logs "groupby_loc_acc: FROM = $FROM, WHERE = $WHERE"
}
add_user_type()
{
  if [ $GROUPBY -eq 1 ];then
    SELECT="$SELECT, Location AS \"User Location\""
    GROUP="GROUP BY Location"
    ORDER="ORDER BY Location"
  elif [ $GROUPBY -eq 2 ];then
    SELECT="$SELECT, Access AS \"User Access\""
    GROUP="GROUP BY Access"
    ORDER="ORDER BY Access"
  #elif [ $GROUPBY -eq 3 ];then
  #  SELECT="$SELECT, Location AS \"User Location\", Access AS \"User Access\""
  #  GROUP="GROUP BY Location, Access"
  #  ORDER="ORDER BY Location, Access"
  elif [ $GROUPBY -eq 3 ];then
    SELECT="$SELECT, $OBJ.Status AS \"Status\""
    GROUP="GROUP BY $OBJ.Status"
    ORDER="ORDER BY $OBJ.Status" 
  fi
}

add_select_elements()
{
  if [ $(($FIELD & 1)) -ne 0 ];then
    SELECT="$SELECT, count(*) AS \"Tried\""
  fi
  if [ $(($FIELD & 2)) -ne 0 ];then
    SELECT="$SELECT, count(nullif($OBJ.Status, 0)) AS \"Fail\""
  fi
  if [ $(($FIELD & 4)) -ne 0 ];then
        SELECT="$SELECT, count(*)-count(nullif($OBJ.Status, 0)) AS \"Success\""
  fi
  if [ $(($FIELD & 8)) -ne 0 ];then
        SELECT="$SELECT, CASE WHEN count(*) > 0 THEN (count(nullif($OBJ.Status, 0))*100/count(*)) ELSE 0 END AS \"FailPct\""
  fi
  if [ $(($FIELD & 16)) -ne 0 ];then
    SELECT="$SELECT, min($VALUE) AS \"Min\""
  fi
  if [ $(($FIELD & 32)) -ne 0 ];then
    SELECT="$SELECT, round(avg($VALUE)) AS \"Average\""
  fi
  if [ $(($FIELD & 64)) -ne 0 ];then
    SELECT="$SELECT, max($VALUE) AS \"Max\""
  fi
  if [ $(($FIELD & 128)) -ne 0 ];then
    SELECT="$SELECT, median_percentile($VALUE) AS \"Median\""
  fi
  if [ $(($FIELD & 256)) -ne 0 ];then
    SELECT="$SELECT, eighty_percentile($VALUE) AS \"80%\""
  fi
  if [ $(($FIELD & 512)) -ne 0 ];then
    SELECT="$SELECT, ninety_percentile($VALUE) AS \"90%\""
  fi
  if [ $(($FIELD & 1024)) -ne 0 ];then
    SELECT="$SELECT, ninety_five_percentile($VALUE) AS \"95%\""
  fi
  if [ $(($FIELD & 2048)) -ne 0 ];then
    SELECT="$SELECT, ninety_nine_percentile($VALUE) AS \"99%\""
  fi
}

chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    echo "Option $1 required a value."
    usage    
    exit -1
  fi
}

########################################################################
#                            calling functions
########################################################################

# nsi_get_3x -testrun <testrun no> -fields <fields> -object <object_type> (Mandatory Arguments) -runphase <runphase value>  -limit <limit> -offset <offset>

#args: TR-NUM select-fields obj-type group-by
#select-fields is anded fields with
#       1: Tries
#       2: Fail
#       4: success
#       8: Fail Pct
#       16: min
#       32: avg
#       64: max
#       128: median
#       256: 80%
#       512: 90%
#       1024: 95%
#       2048: 99%
#obj-type can be 0: URL, 1:Page: 2: Tx 3:Sess
#group-by: is ANDED field (0 allowed)
#       1: By Location
#       2: By Access

if [ "X$1" == "X" ];then
  usage
fi

while [ "$1" != "" ];do
  debug_logs "ARGS=$1"
  case $1 in
    "--testrun")
        shift
	chk_args_of_option "--testrun" "$1"
        TRNUM=$1;;
    "--fields")
        shift
	chk_args_of_option "--fields" "$1"
        FIELD=$1;;
    "--object")
        shift
	chk_args_of_option "--object" "$1"
        OBJECT=$1;;
    "--group")
        shift
	chk_args_of_option "--group" "$1"
        GROUPBY=$1;;
    "--runphase")
        shift
	chk_args_of_option "--runphase" "$1"
        RUNPHASE=$1;;
    "--limit")
        shift
	chk_args_of_option "--limit" "$1"
        LIMIT=$1;;
    "--offset")
        shift
	chk_args_of_option "--offset" "$1"
        OFFSET=$1;;
    "--status")
        shift
	chk_args_of_option "--status" "$1"
        STATUS=$1;;
    "--script")
        shift
	chk_args_of_option "--script" "$1"
        SCRIPT=$1;;
    "--starttime")
        shift
	chk_args_of_option "--starttime" "$1"
        STARTTIME=$1;;
    "--endtime")
        shift
	chk_args_of_option "--endtime" "$1"
        ENDTIME=$1;;
    "--abs_starttime")
        shift
	chk_args_of_option "--abs_starttime" "$1"
        ABS_STARTTIME=$1;;
    "--abs_endtime")
        shift
	chk_args_of_option "--abs_endtime" "$1"
        ABS_ENDTIME=$1;;
    "--location")
        shift
	chk_args_of_option "--location" "$1"
        LOCATION=$1;;
    "--access")
        shift
	chk_args_of_option "--access" "$1"
        ACCESS=$1;;   
    "--responsetime")
        shift
	chk_args_of_option "--responsetime" "$1"
        RESPONSETIME=$1;;
    "--resptimeqmode")
        shift
	chk_args_of_option "--resptimeqmode" "$1"
        RESPTIMEQMODE=$1;; 
    "--mediantime")
        shift
	chk_args_of_option "--mediantime" "$1"
        MEDIANTIME=$1;; 
    --*) usage "Invalid option";;
    *) usage;;
  esac
  shift
done

handle_time_filters $TRNUM

debug_logs "TRNUM = $TRNUM, FIELD = $FIELD, OBJECT = $OBJECT, RUNPHASE=$RUNPHASE, LIMIT = $LIMIT, OFFSET = $OFFSET,
 RUNPHASE = $RUNPHASE, GROUPBY = $GROUPBY, ACCESS = $ACCESS, RESPONSETIME = $RESPONSETIME, RESPTIMEQMODE = $RESPTIMEQMODE, GROUPBYSTATUS = $GROUPBYSTATUS"

#Cheking mantatory arguments
chk_args

# Setting query files
set_query_files $TRNUM

#To exclude failed records. URLs are always excluded, aggrgates are excluded
#based on config
if [ -f $NS_WDIR/logs/TR$TRNUM/exclude_failed_aggregate ];then
	EXCLUDE=1
else
	EXCLUDE=0
fi

if [ "X$RUNPHASE" != "X" ];then
  RPO=$RUNPHASE
fi

# Check if limit argument is given or not. It will limit number of rows to max this number
if [ "X$LIMIT" != "X" ];then
  LIMIT="LIMIT $LIMIT"
fi

# Check if Offset argument is given or not. This is used to skip rows as specified by offset.
# For example, if offset is 1, then first row is skipped. If offset is 100, then first 100 rows are skipped
if [ "X$OFFSET" != "X" ];then
  OFFSET="OFFSET $OFFSET"
fi


SELECT="SELECT 'All'"
SELECT=$SELECT' As "All"'

#Add obj name
add_obj_name

if [ $RPO -eq 1 -a $OBJECT -lt 3 ];then
  WHERE="$WHERE AND isRunPhase = true"
elif [ $RPO -eq 1 -a $OBJECT -eq 3 ];then
  WHERE="Where isRunPhase = true"
fi

#Add User Types
add_user_type

if [ $EXCLUDE -eq 1 ];then
    VALUE="CASE WHEN $OBJ.Status != 0 THEN NULL ELSE $OBJ.RespTime END"
else
    VALUE="$OBJ.RespTime"
fi

#here we make a comman function that check the value of where
set_where()
{
  if [ "XX$WHERE" != "XX" ];then
    WHERE="$WHERE AND"
  else
    WHERE="WHERE"
  fi
}

#Add Status selection
if [ "X$RUNPHASE" != "X" ];then
  if [ $STATUS -eq -1 ];then
    set_where
    WHERE="$WHERE  $OBJ.Status > 0"
  elif [ $STATUS -gt -1 ];then
    set_where
    WHERE="$WHERE  $OBJ.Status = $STATUS"
  fi
fi

#Add Script selection
if [ $SCRIPT -ge 0 ];then
  set_where
  WHERE="$WHERE  $OBJ.SessionIndex = $SCRIPT"
fi


#Add Start time and End time selection
if [ "X$STARTTIME" != "X" -o "X$ENDTIME" != "X" -o "X$ABS_STARTTIME" != "X" -o "X$ABS_ENDTIME" != "X" ]; then
  timestamp_filter_match
fi

#Add response time selection
if [ $RESPTIMEQMODE -eq 1 ];then
  set_where
  WHERE="$WHERE $OBJ.RespTime <= $RESPONSETIME"
elif [ $RESPTIMEQMODE -eq 2 ];then
  set_where
  WHERE="$WHERE $OBJ.RespTime >= $RESPONSETIME"
elif [ $RESPTIMEQMODE -eq 3 ];then
  set_where
  WHERE="$WHERE $OBJ.RespTime >= $RESPONSETIME AND $OBJ.RespTime <= $MEDIANTIME"
fi

#Add select elements

LOC_FLAG=0
ACC_FLAG=0

#if group by is selected or Runphase is selected and object type is not equal to session
location_selection()
{
  if [ $LOCATION != "All" -a $LOCATION != "NO" ];then
    if [ $RPO -eq 1 -o $GROUPBY -gt 0 ];then
      set_where
      debug_logs " where location_selection = $WHERE"
      WHERE="$WHERE LOCATION = ""'"$LOCATION"'"
    fi
  fi
}

access_selection()
{
  if [ $ACCESS != "All" -a $ACCESS != "NO" ];then
    if [ $RPO -eq 1 -o $GROUPBY -gt 0 ];then
      set_where
      WHERE="$WHERE ACCESS = ""'"$ACCESS"'"
      debug_logs "location_selection WHERE = $WHERE"
    fi
  fi
}




#if Group by is not selected or Runphase is not selected and object type is not equal to session
location_selection2()
{

  if [ $LOCATION != "All" -a $LOCATION != "NO" ];then
    if [ \( $RPO -eq 0 -a $GROUPBY -eq 0 \) -a $OBJECT -lt 3 ];then
      LOC_FLAG=1
      set_where
      if [ $ACC_FLAG -eq 0 ];then
        FROM="$FROM , SessionRecord_$TRNUM"
	SESSIONRECORD_TABLE_FLAG=1
        debug_logs "location_selection2: FROM = $FROM"
        WHERE="$WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex AND LOCATION = ""'"$LOCATION"'"
      else
        WHERE="$WHERE Location = ""'"$LOCATION"'"
      fi
    fi
  fi
}

access_selection2()
{
  debug_logs "ACCESS = $ACCESS, RPO = $RPO, GROUPBY = $GROUPBY, LOC_FLAG = $LOC_FLAG"
  if [ $ACCESS != "All" -a $ACCESS != "NO" ];then
    if [ \( $RPO -eq 0 -a $GROUPBY -eq 0 \) -a $OBJECT -lt 3 ];then
      ACC_FLAG=1
      set_where
      if [ $LOC_FLAG -eq 0 ];then
        debug_logs "location flags is $LOC_FLAG"
        FROM="$FROM , SessionRecord_$TRNUM"
	SESSIONRECORD_TABLE_FLAG=1
        debug_logs "access_selection2 FROM = $FROM"
        WHERE="$WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex AND ACCESS = ""'"$ACCESS"'"
      debug_logs " inside flag WHERE = $WHERE"
      else
        WHERE="$WHERE  ACCESS = ""'"$ACCESS"'"
        debug_logs " outside flag WHERE = $WHERE"
     fi
    fi
  fi
}

#if group by is not selected or Runphase is not selected and object type is equal to session
location_selection_session()
{
  if [ $LOCATION != "All" -a $LOCATION != "NO" ];then
    if [ \( $RPO -eq 0 -a $GROUPBY -eq 0 \) -a $OBJECT -eq 3 ];then
      set_where
      #WHERE="$WHERE URLRecord_$TRNUM.SessionInstance = SessionRecord_$TRNUM.SessionInstance AND URLRecord_$TRNUM.ChildIndex = SessionRecord_$TRNUM.ChildIndex AND LOCATION = ""'"$LOCATION"'"
      WHERE="$WHERE LOCATION = ""'"$LOCATION"'"
    fi
  fi
}

access_selection_sessions()
{
  if [ $ACCESS != "All" -a $ACCESS != "NO" ];then
    if [ \( $RPO -eq 0 -a $GROUPBY -eq 0 \) -a $OBJECT -eq 3 ];then
      set_where
      #WHERE="$WHERE $OBJ.SessionInstance = SessionRecord_$TRNUM.SessionInstance AND $OBJ.ChildIndex = SessionRecord_$TRNUM.ChildIndex AND ACCESS = ""'"$ACCESS"'"
      WHERE="$WHERE AND ACCESS = ""'"$ACCESS"'"
      debug_logs "location_selection_sessions WHERE = $WHERE"
    fi
  fi
}
#if group by is selected or Runphase is selected and object type is equal to session

location_selection_session1()
{
  if [ $LOCATION != "All" -a $LOCATION != "NO" ];then
    if [ \( $RPO -eq 1 -o $GROUPBY -gt 0 \) -a $OBJECT -eq 3 ];then
       location_selection
    fi
  fi
}

access_selection_sessions2()
{
  if [ $ACCESS != "All" -a $ACCESS != "NO" ];then
    if [ \( $RPO -eq 1 -o $GROUPBY -gt 0 \) -a $OBJECT -eq 3 ];then
     access_selection
      debug_logs "location_selection_session2 WHERE = $WHERE"
    fi
  fi
}

add_select_elements
location_selection
access_selection
location_selection2
access_selection2
location_selection_session
access_selection_sessions
location_selection_session1
access_selection_sessions2
log_query
run_ns_db_query
show_query_result

exit 0
